var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Airline.html",[0,0.209,1,1.756]],["body/classes/Airline.html",[0,0.157,1,3.319,2,0.695,3,0.102,4,0.09,5,0.09,6,2.152,7,0.342,8,1.482,9,1.567,10,4.609,11,4.609,12,4.155,13,4.609,14,4.609,15,4.609,16,4.599,17,0.874,18,0.014,19,2.637,20,1.582,21,3.795,22,3.197,23,3.665,24,4.223,25,3.674,26,1.835,27,3.674,28,0.934,29,4.44,30,3.398,31,4.164,32,0.967,33,2.988,34,3.674,35,2.988,36,5.102,37,4.44,38,3.924,39,2.988,40,3.862,41,3.862,42,3.875,43,5.713,44,3.862,45,4.44,46,2.988,47,2.988,48,2.988,49,2.988,50,2.988,51,0.201,52,3.899,53,1.728,54,1.668,55,0.802,56,2.332,57,0.538,58,2.352,59,0.72,60,0.18,61,2.343,62,2.27,63,2.957,64,0.961,65,2.152,66,2.599,67,0.005,68,0.007,69,0.005]],["title/controllers/AirlinesController.html",[70,1.283,71,2.872]],["body/controllers/AirlinesController.html",[0,0.158,1,3.478,3,0.103,4,0.091,5,0.091,7,0.345,9,1.322,16,4.619,17,0.968,18,0.014,20,1.463,25,2.8,26,1.629,28,0.837,32,0.894,51,0.271,57,0.543,59,0.727,60,0.103,67,0.005,68,0.008,69,0.005,70,0.97,71,3.218,72,0.97,73,2.622,74,1.597,75,1.336,76,2.18,77,3.711,78,3.475,79,2.15,80,3.287,81,3.015,82,3.94,83,5.326,84,3.172,85,4.469,86,3.502,87,3.015,88,3.015,89,2.972,90,2.637,91,3.015,92,3.015,93,1.761,94,5.731,95,1.881,96,2.017,97,2.43,98,4.469,99,2.017,100,3.015,101,2.669,102,3.287,103,3.015,104,2.017,105,3.015,106,1.889,107,3.015,108,3.015,109,3.015,110,3.015,111,1.889,112,4.208,113,1.682,114,3.015,115,3.015,116,2.637,117,2.686,118,1.682,119,1.682,120,4.469,121,3.015,122,0.522,123,3.015,124,2.622,125,2.364,126,2.494,127,2.821,128,3.51,129,3.322,130,3.49,131,1.52,132,3.12,133,1.597,134,1.597,135,1.682,136,3.336,137,2.622,138,1.327,139,3.504,140,1.173,141,2.364,142,3.015,143,3.015,144,1.386,145,1.006,146,3.172,147,2.448,148,1.682,149,3.287,150,2.821,151,3.142,152,3.015,153,1.688,154,3.015,155,3.015,156,1.779,157,1.889,158,3.015,159,1.889,160,1.889,161,3.015,162,1.889,163,2.017,164,3.015]],["title/modules/AirlinesModule.html",[165,1.11,166,2.668]],["body/modules/AirlinesModule.html",[0,0.258,1,2.167,3,0.167,4,0.149,5,0.149,18,0.014,28,0.7,51,0.291,53,1.916,55,1.321,60,0.167,65,4.516,67,0.008,68,0.011,69,0.008,71,4.969,72,2.017,122,0.853,136,5.09,137,4.282,141,3.86,165,1.92,166,5.33,167,2.078,168,2.078,169,2.264,170,2.264,171,2.078,172,3.173,173,3.173,174,4.282,175,4.282,176,4.282,177,4.282,178,4.806,179,2.884,180,2.264,181,2.167,182,4.923,183,3.162,184,2.608,185,4.923,186,4.923,187,2.747,188,4.923]],["title/injectables/AirlinesService.html",[136,2.498,189,0.863]],["body/injectables/AirlinesService.html",[0,0.149,1,3.449,3,0.096,4,0.086,5,0.086,7,0.324,9,1.375,12,3.348,16,4.806,17,0.767,18,0.014,25,2.675,28,0.915,32,0.915,51,0.253,55,0.761,59,0.684,60,0.096,61,2.224,64,1.838,67,0.005,68,0.007,69,0.005,75,1.277,79,2.054,82,3.579,93,1.833,94,5.602,95,1.833,97,2.393,101,2.08,112,3.823,122,0.491,136,2.675,138,1.248,139,3.348,140,1.103,141,2.224,153,1.645,189,0.924,190,1.103,191,2.467,192,4.241,193,2.957,194,5.135,195,4.269,196,4.269,197,5.714,198,5.135,199,1.963,200,2.836,201,3.189,202,4.186,203,2.836,204,4.269,205,2.836,206,2.836,207,3.297,208,4.269,209,2.836,210,5.714,211,4.269,212,2.836,213,2.836,214,2.836,215,2.836,216,2.948,217,1.364,218,1.583,219,2.224,220,2.836,221,2.836,222,2.054,223,3.297,224,6.44,225,5.714,226,3.594,227,2.698,228,2.482,229,2.042,230,2.042,231,2.675,232,1.583,233,3.714,234,2.836,235,2.836,236,3.616,237,3.42,238,3.09,239,1.673,240,1.897,241,1.897,242,1.583,243,4.269,244,2.866,245,3.029,246,2.836,247,4.269,248,2.836,249,4.269,250,2.836,251,2.836,252,4.269,253,2.836,254,4.269,255,2.836,256,4.269,257,2.836,258,2.836,259,2.836]],["title/classes/Airplane.html",[0,0.209,260,1.756]],["body/classes/Airplane.html",[0,0.227,2,1.009,3,0.148,4,0.131,5,0.131,7,0.497,8,1.928,17,0.947,18,0.014,19,2.002,20,1.51,21,3.624,26,1.724,28,0.617,30,3.316,31,3.624,32,0.923,38,3.865,51,0.273,52,3.864,53,2.248,54,2.422,55,1.165,56,2.311,57,0.781,58,3.06,59,1.565,60,0.221,62,2.168,63,3.224,64,1.396,67,0.007,68,0.01,69,0.007,260,3.174,261,3.125,262,5.648,263,4.676,264,4.373,265,4.16,266,4.16,267,4.16,268,2.904,269,4.34,270,2.779,271,5.025,272,5.025,273,3.775,274,4.34,275,3.819,276,4.34,277,2.719,278,3.619,279,4.34,280,3.775,281,3.125,282,1.911,283,2.719,284,2.904,285,3.775]],["title/controllers/AirplanesController.html",[70,1.283,286,2.872]],["body/controllers/AirplanesController.html",[0,0.164,3,0.107,4,0.095,5,0.095,7,0.359,9,1.347,17,0.974,18,0.014,20,1.487,26,1.606,28,0.853,32,0.909,51,0.268,57,0.564,59,0.756,60,0.107,67,0.005,68,0.008,69,0.005,70,1.008,72,1.008,74,1.66,75,1.375,76,2.08,77,3.771,78,3.541,79,2.213,80,3.35,84,3.223,86,3.534,89,2.567,90,2.714,93,1.795,95,1.911,96,2.097,97,2.452,99,2.097,101,2.706,102,3.35,104,2.097,106,1.963,111,1.963,113,2.567,116,2.714,117,2.319,118,1.749,119,1.749,122,0.543,126,2.567,127,2.886,128,3.35,129,3.369,130,3.539,131,1.581,132,3.18,133,1.66,134,1.66,135,1.749,138,1.38,140,1.22,144,1.441,145,1.046,146,3.223,147,2.487,148,1.749,149,3.041,150,2.886,151,3.214,153,1.716,156,1.849,157,1.963,159,1.963,160,1.963,162,1.963,163,2.097,260,3.464,286,3.312,287,2.726,288,4.001,289,3.134,290,4.004,291,4.599,292,3.134,293,2.257,294,3.134,295,3.134,296,5.812,297,5.448,298,3.134,299,3.134,300,3.134,301,2.458,302,3.134,303,4.276,304,3.134,305,3.134,306,3.413,307,2.726,308,3.607,309,2.458,310,3.134,311,3.134,312,2.097,313,3.134,314,3.134,315,3.134,316,3.134,317,3.134]],["title/modules/AirplanesModule.html",[165,1.11,318,2.498]],["body/modules/AirplanesModule.html",[0,0.266,3,0.173,4,0.154,5,0.154,18,0.014,28,0.722,51,0.287,53,1.977,55,1.364,60,0.173,67,0.009,68,0.011,69,0.009,72,2.058,122,0.88,165,1.948,167,2.144,168,2.144,169,2.337,170,2.337,171,2.144,172,3.22,173,3.22,179,2.942,180,2.337,181,2.237,183,2.562,184,2.692,187,2.836,260,2.237,284,4.28,286,5.043,306,5.112,307,4.42,309,3.984,318,4.918,319,4.42,320,4.42,321,4.42,322,5.081,323,5.081,324,4.42]],["title/injectables/AirplanesService.html",[189,0.863,306,2.498]],["body/injectables/AirplanesService.html",[0,0.158,3,0.103,4,0.091,5,0.091,7,0.346,9,1.413,17,0.788,18,0.014,28,0.895,32,0.938,51,0.25,55,0.812,59,0.729,60,0.103,64,1.716,67,0.005,68,0.008,69,0.005,75,1.339,93,1.883,95,1.883,97,2.431,101,2.161,122,0.524,138,1.331,140,1.177,153,1.69,189,0.969,190,1.177,192,4.289,193,2.99,199,2.06,201,3.292,207,3.349,216,2.567,217,1.455,218,1.687,222,1.455,223,3.223,226,3.515,227,2.597,228,2.389,231,1.894,232,1.687,236,4.297,237,4.065,238,3.176,239,1.784,240,2.023,241,2.023,242,1.687,244,2.977,245,2.642,260,3.407,264,3.716,281,2.177,288,3.896,290,3.695,296,5.737,303,3.946,306,2.806,308,3.512,309,2.371,325,2.63,326,5.335,327,4.479,328,4.479,329,5.899,330,5.335,331,3.024,332,3.024,333,3.896,334,3.024,335,3.024,336,4.479,337,3.024,338,5.899,339,4.479,340,3.024,341,3.024,342,3.024,343,3.024,344,2.177,345,2.63,346,3.024,347,5.478,348,3.024,349,4.535,350,3.945,351,4.479,352,3.024,353,3.024,354,4.479,355,3.024,356,2.63,357,3.024]],["title/classes/Airport.html",[0,0.209,358,2.113]],["body/classes/Airport.html",[0,0.151,2,0.672,3,0.098,4,0.087,5,0.087,7,0.33,8,1.445,9,1.662,17,0.915,18,0.014,19,2.722,20,1.675,21,4.019,23,2.415,26,1.827,27,4.062,28,1.084,30,3.454,31,4.286,32,1.024,34,4.062,38,4.338,51,0.197,52,4.081,53,1.684,54,1.612,55,0.775,56,2.441,57,0.52,58,2.293,59,0.696,60,0.177,62,2.404,63,3.218,64,0.929,67,0.005,68,0.007,69,0.005,268,1.932,358,4.119,359,2.079,360,4.516,361,4.516,362,4.516,363,4.516,364,4.516,365,4.516,366,4.516,367,4.516,368,4.516,369,4.521,370,5.64,371,4.328,372,2.888,373,2.888,374,4.669,375,2.512,376,2.888,377,3.765,378,4.328,379,2.888,380,2.888,381,2.888,382,3.765,383,4.328,384,2.888,385,2.888,386,2.888,387,2.888,388,3.765,389,2.888,390,2.888,391,2.264,392,4.516,393,2.079,394,2.512]],["title/controllers/AirportsController.html",[70,1.283,395,2.872]],["body/controllers/AirportsController.html",[0,0.165,3,0.107,4,0.095,5,0.095,7,0.36,9,1.349,17,0.974,18,0.014,20,1.489,26,1.607,28,0.854,32,0.91,51,0.268,57,0.566,59,0.758,60,0.107,67,0.005,68,0.008,69,0.005,70,1.011,72,1.011,74,1.666,75,1.378,76,2.083,77,3.776,78,3.546,79,2.218,80,3.355,84,3.227,86,3.537,89,2.573,90,1.855,93,1.797,95,1.914,96,2.103,97,2.454,99,2.103,101,2.709,102,3.355,104,2.103,106,1.969,111,1.969,113,2.573,116,2.72,117,2.324,118,1.755,119,1.755,122,0.545,126,3.046,127,2.891,128,3.046,129,3.373,130,3.543,131,1.585,132,3.184,133,1.666,134,1.666,135,1.755,138,1.384,140,1.223,144,1.446,145,1.049,146,3.227,147,2.49,148,2.573,149,2.573,150,2.891,151,3.22,153,1.718,156,1.855,157,1.969,159,1.969,160,1.969,162,1.969,163,2.103,312,2.103,358,4.124,395,3.32,396,2.735,397,4.01,398,3.144,399,4.009,400,4.61,401,3.144,402,2.735,403,2.735,404,3.144,405,3.144,406,5.818,407,4.61,408,3.144,409,3.144,410,3.144,411,3.144,412,3.144,413,3.144,414,4.281,415,3.144,416,3.144,417,3.419,418,2.735,419,3.615,420,2.465,421,3.144,422,3.144,423,3.144,424,3.144,425,3.144,426,3.144,427,3.144]],["title/modules/AirportsModule.html",[165,1.11,428,2.498]],["body/modules/AirportsModule.html",[0,0.268,3,0.174,4,0.154,5,0.154,18,0.014,28,0.726,51,0.287,53,1.987,55,1.371,60,0.174,67,0.009,68,0.011,69,0.009,72,2.064,122,0.885,165,1.953,167,2.155,168,2.155,169,2.348,170,2.348,171,2.155,172,3.227,173,3.227,179,2.951,180,2.348,181,2.248,183,2.575,184,2.705,187,2.85,358,2.705,393,4.622,395,5.054,417,5.115,418,4.442,420,4.004,428,4.924,429,4.442,430,4.442,431,4.442,432,5.106,433,5.106,434,5.106]],["title/injectables/AirportsService.html",[189,0.863,417,2.498]],["body/injectables/AirportsService.html",[0,0.149,3,0.097,4,0.086,5,0.086,7,0.326,9,1.378,17,0.769,18,0.014,28,0.873,32,0.917,51,0.244,55,0.765,59,0.687,60,0.097,64,1.657,67,0.005,68,0.007,69,0.005,75,1.282,79,2.063,93,1.837,95,1.837,97,2.397,101,2.087,122,0.494,138,1.255,140,1.11,153,1.649,189,0.928,190,1.11,192,4.245,193,2.96,199,1.971,201,3.198,207,3.301,216,2.757,217,1.372,218,1.591,222,1.372,223,3.241,226,3.602,227,2.704,228,2.488,229,2.053,230,2.053,231,2.686,232,1.591,236,3.624,237,3.429,238,3.098,239,1.682,240,1.908,241,1.908,242,1.591,244,2.875,245,2.529,344,2.053,358,4.133,369,4.04,391,2.236,397,3.729,399,3.589,406,5.344,414,3.833,417,2.686,419,3.362,420,2.236,435,2.48,436,4.287,437,4.287,438,4.287,439,5.73,440,5.152,441,2.851,442,2.851,443,4.287,444,4.287,445,2.851,446,4.287,447,2.851,448,5.73,449,4.287,450,2.851,451,2.851,452,2.851,453,2.851,454,2.851,455,6.454,456,5.73,457,2.851,458,4.287,459,2.851,460,2.851,461,2.851,462,4.287,463,2.851,464,4.287,465,2.851,466,4.287,467,2.851,468,4.287,469,2.851,470,4.287,471,2.851,472,4.287,473,2.851,474,4.287,475,2.851,476,4.287,477,2.851,478,4.287,479,2.851,480,2.851,481,2.851]],["title/controllers/AppController.html",[70,1.283,482,2.872]],["body/controllers/AppController.html",[0,0.275,3,0.179,4,0.159,5,0.159,7,0.601,9,1.178,18,0.014,20,1.221,28,0.746,32,0.746,51,0.282,57,0.945,60,0.179,67,0.009,68,0.011,69,0.009,70,2.101,72,1.689,75,1.953,84,2.647,93,1.57,95,1.57,122,0.91,129,3.293,131,2.647,144,2.414,146,2.647,153,1.409,193,2.766,482,4.702,483,4.567,484,5.68,485,5.25,486,5.25,487,5.25,488,3.853,489,3.781,490,3.512,491,3.967,492,5.25,493,2.93,494,5.25,495,3.512,496,5.25,497,5.25,498,3.512,499,5.25,500,5.25,501,5.25]],["title/modules/AppModule.html",[165,1.11,502,2.872]],["body/modules/AppModule.html",[0,0.169,3,0.11,4,0.098,5,0.098,18,0.014,30,2.571,51,0.302,55,0.868,60,0.11,67,0.005,68,0.008,69,0.005,72,1.513,122,0.56,165,1.543,166,4.519,167,1.364,168,1.364,169,1.487,170,1.487,171,1.364,172,2.55,173,1.487,178,4.231,179,2.163,180,1.487,181,1.423,183,3.264,184,1.713,193,1.831,238,1.63,318,4.231,350,2.025,428,4.231,482,3.994,502,5.843,503,2.812,504,2.812,505,2.812,506,4.231,507,4.231,508,4.519,509,4.519,510,4.519,511,3.985,512,4.519,513,3.233,514,4.705,515,3.233,516,5.298,517,5.711,518,2.328,519,4.705,520,3.233,521,2.812,522,5.546,523,4.705,524,2.535,525,3.233,526,2.812,527,3.689,528,2.812,529,3.233,530,3.233,531,2.812,532,3.233,533,3.233,534,3.233,535,3.233,536,3.233,537,3.233,538,3.233,539,3.233,540,3.233,541,3.388,542,3.233,543,2.812,544,2.812,545,2.812,546,2.812,547,3.233,548,4.824,549,4.705,550,3.233,551,4.824,552,3.233,553,3.233,554,3.233,555,3.233,556,3.233,557,3.233,558,3.233,559,3.233,560,3.233,561,3.233,562,3.233,563,3.233,564,3.233,565,3.233,566,3.233,567,5.546,568,5.546]],["title/injectables/AppService.html",[189,0.863,512,2.668]],["body/injectables/AppService.html",[0,0.325,3,0.211,4,0.187,5,0.187,18,0.013,51,0.235,60,0.211,67,0.01,68,0.012,69,0.01,122,1.074,189,1.562,190,2.413,512,4.829,569,5.394]],["title/controllers/AuthController.html",[70,1.283,570,2.872]],["body/controllers/AuthController.html",[0,0.18,3,0.117,4,0.104,5,0.104,7,0.392,9,1.286,17,0.925,18,0.014,20,1.333,26,1.54,28,0.815,30,2.908,32,0.815,51,0.28,57,0.617,60,0.117,64,1.103,67,0.006,68,0.008,69,0.006,70,1.103,72,1.103,74,1.816,75,1.467,84,2.89,86,3.011,93,1.714,95,1.714,116,2.022,117,1.728,122,0.594,125,2.688,126,3.199,127,3.037,129,3.156,130,3.037,131,1.728,132,3.037,144,1.576,146,2.89,147,1.909,148,2.739,150,2.6,153,1.539,181,1.509,193,2.875,223,2.256,293,2.468,488,2.895,489,2.468,490,2.293,491,3.199,493,1.913,495,3.283,498,2.293,570,3.534,571,2.981,572,3.427,573,4.907,574,4.269,575,4.269,576,3.427,577,7.095,578,4.907,579,3.427,580,3.427,581,3.427,582,3.427,583,7.095,584,3.427,585,6.258,586,3.427,587,3.427,588,3.427,589,3.427,590,3.427,591,2.981,592,3.508,593,3.427,594,2.981,595,2.981,596,3.427,597,3.427,598,3.534,599,4.907,600,2.468,601,3.074,602,3.534,603,2.688,604,1.986,605,2.468,606,2.688,607,3.427,608,2.468,609,3.427,610,3.427,611,3.427,612,3.427,613,3.427,614,3.427,615,4.907,616,4.907,617,3.848,618,3.427,619,4.907,620,4.907,621,4.907,622,4.907,623,4.907,624,3.427,625,3.427,626,3.427,627,3.427,628,3.427,629,3.427,630,3.427]],["title/modules/AuthModule.html",[165,1.11,506,2.498]],["body/modules/AuthModule.html",[0,0.233,3,0.151,4,0.134,5,0.134,18,0.014,51,0.296,60,0.151,67,0.007,68,0.01,69,0.007,72,1.888,122,0.77,165,1.828,167,1.875,168,1.875,169,2.043,170,2.043,171,1.875,172,3.021,173,3.021,179,2.698,180,2.043,181,1.956,183,2.959,193,1.729,491,4.468,506,4.982,511,3.462,516,5.104,517,5.479,518,3.2,531,3.865,543,3.865,544,3.865,545,3.865,548,3.865,551,3.865,570,4.731,606,3.484,631,3.865,632,3.865,633,3.865,634,4.992,635,4.992,636,4.443,637,5.104,638,5.868,639,2.784,640,5.868,641,3.2,642,4.443,643,4.443,644,4.443,645,4.443,646,4.443,647,3.865,648,4.443,649,4.443,650,4.443]],["title/injectables/AuthService.html",[189,0.863,491,2.226]],["body/injectables/AuthService.html",[0,0.186,3,0.121,4,0.108,5,0.108,7,0.407,9,1.507,17,0.841,18,0.014,19,2.418,28,0.955,32,0.955,51,0.264,59,0.858,60,0.121,64,2.161,67,0.006,68,0.008,69,0.006,75,1.507,93,2.009,95,1.903,97,2.125,122,0.616,153,1.708,189,1.091,190,1.384,193,3.003,199,2.317,207,2.317,216,2.424,217,1.712,222,2.424,223,3.208,227,2.219,228,2.041,229,2.562,230,2.562,231,2.229,484,4.384,491,2.813,574,4.384,575,4.384,591,4.384,592,3.372,598,3.629,600,2.562,601,2.229,604,2.583,641,2.562,651,3.095,652,5.04,653,3.558,654,3.893,655,6.24,656,3.558,657,5.04,658,3.558,659,3.952,660,5.04,661,3.558,662,3.558,663,5.04,664,5.852,665,3.558,666,4.494,667,3.952,668,3.952,669,3.558,670,3.558,671,3.095,672,4.384,673,3.558,674,5.04,675,3.629,676,5.04,677,2.38,678,3.095,679,2.38,680,3.095,681,2.79,682,3.095,683,3.558,684,3.558,685,4.384,686,3.095,687,4.384,688,3.558,689,3.558,690,2.813,691,3.558,692,4.384,693,3.558,694,3.095,695,3.558,696,3.558]],["title/classes/ChangeUserPasswordDto.html",[0,0.209,697,2.668]],["body/classes/ChangeUserPasswordDto.html",[0,0.32,2,1.1,3,0.161,4,0.143,5,0.143,7,0.541,8,2.04,17,0.765,18,0.014,19,2.481,20,1.422,26,1.665,32,0.869,51,0.271,56,2.261,57,0.851,60,0.161,62,2.04,67,0.008,68,0.01,69,0.008,76,1.639,145,2.534,228,2.476,592,2.506,601,2.963,604,2.347,690,3.995,697,4.089,698,5.891,699,4.114,700,6.772,701,6.772,702,5.317,703,6.226,704,6.226,705,5.613,706,5.317,707,6.112,708,4.73,709,4.793,710,4.73,711,2.082,712,3.406,713,3.406,714,3.114,715,3.587,716,4.114,717,2.082,718,1.77,719,3.709,720,5.317,721,5.317]],["title/classes/CreateAirlineDto.html",[0,0.209,82,2.498]],["body/classes/CreateAirlineDto.html",[0,0.249,1,3.405,2,0.764,3,0.112,4,0.099,5,0.099,7,0.376,8,1.589,9,1.61,10,4.868,11,4.868,12,4.389,13,4.868,14,4.868,15,4.868,17,0.85,18,0.014,19,2.635,20,1.58,22,3.427,23,3.79,24,4.419,25,3.844,26,1.842,27,3.844,28,0.965,32,0.965,34,3.844,36,5.338,40,4.14,41,4.14,42,4.007,43,5.908,44,4.14,51,0.18,56,2.338,57,0.591,60,0.112,62,2.267,67,0.006,68,0.008,69,0.006,82,2.981,145,2.643,714,2.574,715,3.711,717,1.446,722,6.094,723,2.576,724,4.812,725,3.285,726,3.285,727,2.576,728,3.285,729,3.285,730,3.285,731,1.938,732,3.285,733,4.691]],["title/classes/CreateAirplaneDto.html",[0,0.209,290,2.498]],["body/classes/CreateAirplaneDto.html",[0,0.319,2,1.093,3,0.16,4,0.142,5,0.142,7,0.538,8,2.031,17,0.845,18,0.014,19,2.109,20,1.57,26,1.762,28,0.865,32,0.959,51,0.256,56,2.383,57,0.845,59,1.133,60,0.16,62,2.253,67,0.008,68,0.01,69,0.008,97,2.253,145,2.529,260,2.679,262,5.871,263,4.86,264,4.55,265,4.382,266,4.382,267,4.382,270,2.927,271,5.293,272,5.293,282,2.679,290,3.812,714,3.283,715,3.224,717,2.068,727,3.684,734,6.21,735,3.684,736,4.698,737,4.698,738,4.698,739,4.698,740,4.698,741,6.085,742,6.085,743,4.772]],["title/classes/CreateAirportDto.html",[0,0.209,399,2.498]],["body/classes/CreateAirportDto.html",[0,0.235,2,0.703,3,0.103,4,0.091,5,0.091,7,0.346,8,1.495,9,1.678,17,0.912,18,0.014,19,2.739,20,1.694,23,2.5,26,1.838,27,4.132,28,1.113,32,1.035,34,4.132,51,0.17,56,2.466,57,0.544,60,0.103,62,2.431,67,0.005,68,0.008,69,0.005,145,2.715,358,4.147,360,4.641,361,4.641,362,4.641,363,4.641,364,4.641,365,4.641,366,4.641,367,4.641,368,4.641,369,4.938,370,5.737,374,4.749,377,3.896,382,3.896,388,3.896,392,5.737,399,2.806,714,2.896,715,3.914,717,1.331,724,5.172,731,3.147,733,4.915,744,6.427,745,2.371,746,3.024,747,3.024,748,3.024,749,3.024,750,3.024,751,3.024,752,3.024,753,3.024,754,3.024,755,3.024,756,3.024,757,3.024,758,4.479,759,2.63,760,3.024,761,3.024]],["title/classes/CreateFlightDto.html",[0,0.209,762,2.226]],["body/classes/CreateFlightDto.html",[0,0.222,1,2.688,2,0.654,3,0.096,4,0.085,5,0.085,7,0.322,8,1.899,9,1.277,17,0.922,18,0.014,19,2.225,20,1.713,22,3.055,23,2.368,24,3.055,25,2.658,26,1.849,28,0.913,30,1.791,32,1.047,51,0.194,56,2.487,57,0.506,59,0.678,60,0.096,62,2.458,67,0.005,68,0.007,69,0.005,86,2.041,97,2.344,145,2.726,153,1.139,260,2.688,265,3.055,266,3.055,267,3.055,270,3.3,358,3.014,714,3.342,715,2.248,717,1.238,731,1.659,733,3.679,743,3.327,762,2.368,763,6.48,764,2.025,765,3.679,766,4.444,767,5.312,768,4.444,769,3.679,770,4.006,771,5.312,772,4.006,773,4.444,774,5.312,775,4.444,776,2.812,777,2.812,778,2.812,779,3.055,780,4.098,781,2.812,782,4.006,783,4.098,784,4.098,785,3.691,786,4.098,787,2.812,788,4.022,789,3.055,790,2.812,791,3.327,792,2.812,793,3.691,794,3.691,795,2.812,796,3.055,797,4.098,798,2.812,799,3.327,800,2.812,801,3.691,802,3.691,803,3.401,804,2.812,805,3.055,806,3.055,807,1.868,808,2.812,809,3.691,810,2.812,811,2.446,812,2.812,813,4.243,814,5.312]],["title/classes/CreateSeatDto.html",[0,0.209,815,2.668]],["body/classes/CreateSeatDto.html",[0,0.33,2,1.465,3,0.214,4,0.19,5,0.19,18,0.013,60,0.214,67,0.011,68,0.012,69,0.011,815,4.872,816,5.477,817,4.534]],["title/classes/CreateSectionDto.html",[0,0.209,818,2.498]],["body/classes/CreateSectionDto.html",[0,0.418,2,1.105,3,0.162,4,0.144,5,0.144,7,0.544,8,2.046,17,0.849,18,0.014,20,1.579,26,1.768,32,0.965,51,0.257,56,2.394,57,0.855,60,0.162,62,2.265,67,0.008,68,0.01,69,0.008,145,2.643,270,3.45,275,3.248,714,3.297,717,2.092,743,5.322,811,5.333,818,3.84,819,6.237,820,3.726,821,5.82,822,5.345,823,3.726,824,4.807,825,4.752,826,5.333,827,4.752,828,5.333,829,4.752,830,3.726,831,3.422,832,4.752,833,4.752]],["title/classes/CreateTicketDto.html",[0,0.209,834,2.498]],["body/classes/CreateTicketDto.html",[0,0.212,2,0.615,3,0.09,4,0.08,5,0.08,7,0.302,8,1.351,9,1.406,17,0.98,18,0.014,19,2.621,20,1.729,23,2.258,26,1.858,27,2.535,28,1.001,32,1.056,34,2.535,51,0.225,56,2.504,57,0.476,58,3.147,59,0.637,60,0.09,62,2.481,67,0.004,68,0.007,69,0.004,97,1.983,145,2.735,147,2.618,270,1.947,282,2.615,374,2.914,604,2.059,677,3.29,679,3.29,705,2.072,714,3.34,715,3.654,717,1.163,724,3.173,727,2.072,731,3.251,733,3.968,759,2.298,775,3.52,789,2.914,801,2.298,805,2.914,806,2.914,807,2.615,814,4.278,834,2.535,835,6.525,836,2.072,837,5.168,838,4.278,839,4.278,840,4.278,841,4.278,842,5.276,843,5.168,844,3.52,845,4.794,846,4.794,847,2.642,848,5.451,849,2.642,850,2.642,851,2.642,852,2.642,853,2.642,854,3.52,855,2.642,856,3.173,857,2.707,858,2.642,859,2.642,860,3.52,861,2.914,862,2.642,863,2.642,864,2.642,865,3.173,866,2.642,867,2.642,868,2.535,869,2.642,870,2.642,871,3.173,872,2.642,873,2.914,874,2.642,875,3.52,876,2.642,877,2.642,878,1.768,879,1.903,880,2.642,881,2.642,882,2.642,883,2.642]],["title/classes/CreateUserDto.html",[0,0.209,592,2.113]],["body/classes/CreateUserDto.html",[0,0.293,2,0.961,3,0.141,4,0.125,5,0.125,7,0.473,8,1.865,17,0.887,18,0.014,19,2.634,20,1.649,26,1.811,28,0.965,32,1.008,51,0.212,56,2.439,57,0.743,60,0.141,62,2.366,67,0.007,68,0.009,69,0.007,145,2.687,270,3.264,592,2.96,600,5.262,666,4.237,677,4.237,679,4.237,681,4.966,690,3.956,702,3.593,703,4.861,704,4.861,705,4.382,706,3.593,709,4.382,714,3.36,715,3.595,716,3.593,717,1.818,720,3.593,721,3.593,731,3.297,856,4.382,857,3.738,861,4.024,873,4.024,884,3.239,885,4.131,886,4.024,887,4.861,888,4.131,889,4.131,890,5.588,891,4.131,892,4.131,893,4.131,894,4.861,895,4.861,896,4.131,897,5.588,898,5.588]],["title/modules/FilesModule.html",[165,1.11,178,2.498]],["body/modules/FilesModule.html",[0,0.288,3,0.187,4,0.166,5,0.166,18,0.014,51,0.255,60,0.187,67,0.009,68,0.011,69,0.009,122,0.953,165,2.019,167,2.323,168,2.323,169,2.531,170,2.531,171,2.323,172,3.338,173,3.338,178,5.003,179,3.091,180,2.531,181,2.423,202,5.165,899,4.787,900,4.787,901,4.787,902,5.503,903,5.503]],["title/injectables/FilesService.html",[189,0.863,202,2.498]],["body/injectables/FilesService.html",[0,0.248,1,2.695,3,0.161,4,0.143,5,0.224,7,0.543,9,1.064,17,0.593,18,0.014,28,0.674,30,2.001,32,0.674,51,0.271,60,0.208,64,2.181,67,0.008,68,0.01,69,0.008,75,1.83,93,1.418,95,1.418,122,0.821,153,1.273,189,1.325,190,1.845,193,2.638,202,3.835,207,2.815,216,2.945,217,2.281,219,6.06,227,2.087,228,1.92,232,2.646,233,5.897,239,2.797,350,3.835,527,3.718,886,3.414,904,3.718,905,6.121,906,6.121,907,4.741,908,6.121,909,5.325,910,3.172,911,6.121,912,4.741,913,4.741,914,4.741,915,4.741,916,4.741,917,4.741,918,4.741,919,4.741,920,4.741,921,4.741,922,4.741,923,4.741,924,4.741]],["title/classes/Flight.html",[0,0.209,807,1.756]],["body/classes/Flight.html",[0,0.135,1,3.077,2,0.598,3,0.088,4,0.078,5,0.078,7,0.294,8,1.614,9,1.219,17,0.972,18,0.014,19,2.149,20,1.679,21,4.028,22,2.855,23,2.213,24,2.855,25,2.483,26,1.829,28,0.687,30,3.342,31,3.46,32,1.026,38,2.652,51,0.245,52,4.08,53,1.543,54,1.436,55,0.691,56,2.44,57,0.463,58,2.1,59,1.166,60,0.165,62,2.41,63,3.723,64,0.828,67,0.004,68,0.007,69,0.004,86,1.907,153,0.691,260,3.077,265,2.855,266,2.855,267,2.855,268,3.236,270,3.209,277,3.404,278,4.179,283,3.404,358,3.768,375,3.449,765,3.483,766,4.207,767,5.106,768,4.207,769,3.483,770,3.792,771,4.727,772,3.792,773,4.207,774,4.727,779,2.855,780,3.913,783,3.913,784,3.913,785,3.449,786,2.855,788,3.884,789,2.855,791,3.109,793,3.449,794,2.238,796,2.855,797,3.913,799,3.109,802,3.449,803,3.285,805,2.855,806,2.855,807,2.584,809,3.449,925,1.853,926,5.231,927,2.573,928,2.573,929,2.573,930,3.964,931,2.573,932,2.573,933,2.573,934,2.573,935,2.573,936,2.573,937,2.573,938,2.573,939,2.573,940,2.573,941,2.573,942,2.573,943,2.573,944,2.573,945,2.573,946,2.573,947,2.017,948,1.853,949,1.721,950,2.238]],["title/controllers/FlightsController.html",[70,1.283,951,2.872]],["body/controllers/FlightsController.html",[0,0.137,3,0.089,4,0.079,5,0.079,7,0.3,9,1.402,17,0.987,18,0.014,20,1.513,26,1.634,28,0.888,32,0.925,51,0.266,57,0.472,59,0.632,60,0.089,67,0.004,68,0.007,69,0.004,70,0.843,72,0.843,74,1.389,75,1.203,76,1.902,77,3.493,78,3.238,79,1.935,80,3.063,84,3.28,86,3.57,89,2.245,90,1.547,93,1.868,95,1.945,96,1.754,97,2.345,99,1.754,101,2.53,102,3.063,104,1.754,106,1.643,111,1.643,113,2.245,116,2.373,117,2.028,118,1.463,119,1.463,122,0.454,126,3.063,127,3.136,128,3.487,129,3.384,130,3.555,131,1.322,132,2.593,133,1.389,134,1.389,135,1.463,138,1.154,140,1.02,144,1.206,145,0.875,146,3.28,147,2.531,148,2.731,149,3.304,150,2.131,151,2.887,153,1.746,156,1.547,157,1.643,159,1.643,160,1.643,162,1.643,163,1.754,301,2.056,312,1.754,403,3.499,594,2.281,595,2.281,762,3.304,807,3.482,951,2.897,952,2.281,953,5.15,954,6.248,955,4.023,956,2.622,957,4.023,958,2.622,959,2.622,960,2.622,961,6.11,962,4.894,963,2.622,964,4.023,965,2.622,966,2.622,967,2.622,968,3.961,969,2.622,970,3.499,971,2.622,972,2.622,973,2.622,974,3.961,975,2.622,976,2.622,977,2.622,978,3.961,979,2.622,980,2.622,981,3.066,982,2.281,983,3.274,984,3.499,985,2.281,986,2.056,987,2.622,988,2.622,989,2.622,990,2.622,991,2.622,992,2.622,993,2.281,994,2.622,995,2.622,996,2.622,997,2.622,998,2.622,999,2.622,1000,2.622]],["title/modules/FlightsModule.html",[165,1.11,507,2.498]],["body/modules/FlightsModule.html",[0,0.268,3,0.174,4,0.154,5,0.154,18,0.014,28,0.726,51,0.287,53,1.987,55,1.371,60,0.174,67,0.009,68,0.011,69,0.009,72,2.064,122,0.885,165,1.953,167,2.155,168,2.155,169,2.348,170,2.348,171,2.155,172,3.227,173,3.227,179,2.951,180,2.348,181,2.248,183,2.575,184,2.705,187,2.85,507,4.924,807,2.248,949,4.294,951,5.054,981,5.115,982,4.442,986,4.004,1001,4.442,1002,4.442,1003,4.442,1004,5.106,1005,5.106,1006,4.442]],["title/injectables/FlightsService.html",[189,0.863,981,2.498]],["body/injectables/FlightsService.html",[0,0.086,1,1.843,3,0.056,4,0.05,5,0.05,7,0.188,9,1.206,17,0.673,18,0.014,28,0.885,30,1.767,32,0.802,42,1.631,51,0.23,55,0.442,59,0.397,60,0.056,64,1.887,67,0.009,68,0.005,69,0.003,75,0.826,79,1.33,93,1.607,95,1.607,97,2.023,122,0.285,138,0.724,140,0.64,153,1.442,189,0.598,190,0.64,192,4.008,193,2.795,199,1.271,201,2.337,207,3.046,216,0.791,217,0.791,218,0.918,222,0.791,223,2.865,226,3.148,227,2.055,228,2.376,229,1.185,230,1.185,231,1.031,232,0.918,236,4.627,237,4.377,238,2.71,239,0.971,240,1.101,241,1.101,242,1.995,244,1.995,260,2.668,263,1.99,264,3.17,344,1.185,349,5.545,350,4.824,762,2.337,765,3.87,769,3.87,770,2.167,772,2.167,807,3.041,948,1.185,953,2.404,961,4.906,968,2.801,974,2.801,978,2.801,981,1.731,983,2.391,984,2.404,985,1.431,986,1.29,1007,1.431,1008,2.764,1009,2.764,1010,4.187,1011,2.764,1012,2.764,1013,3.574,1014,3.574,1015,1.645,1016,1.645,1017,2.404,1018,2.764,1019,1.645,1020,2.764,1021,1.645,1022,4.187,1023,1.645,1024,2.764,1025,1.645,1026,2.764,1027,1.645,1028,1.645,1029,1.645,1030,1.645,1031,1.645,1032,4.668,1033,1.431,1034,2.404,1035,1.431,1036,4.906,1037,4.187,1038,3.642,1039,1.645,1040,2.764,1041,1.645,1042,1.645,1043,1.645,1044,1.645,1045,1.645,1046,1.645,1047,1.645,1048,1.645,1049,1.645,1050,1.645,1051,2.764,1052,1.645,1053,2.764,1054,1.645,1055,2.764,1056,1.645,1057,1.645,1058,1.645,1059,1.645,1060,2.764,1061,1.645,1062,2.764,1063,1.645,1064,1.645,1065,2.764,1066,1.645,1067,2.764,1068,1.645,1069,1.645,1070,1.645,1071,2.764,1072,3.642,1073,2.764,1074,2.764,1075,4.187,1076,4.187,1077,4.187,1078,4.187,1079,2.764,1080,2.764,1081,2.167,1082,4.187,1083,4.187,1084,4.187,1085,2.764,1086,2.764,1087,2.764,1088,2.764,1089,2.764,1090,2.764,1091,2.764,1092,2.764,1093,2.764,1094,4.187,1095,4.187,1096,2.764,1097,2.764,1098,2.764,1099,2.764,1100,2.764,1101,2.764,1102,2.764,1103,2.764,1104,2.764,1105,1.645,1106,1.645]],["title/injectables/JwtAuthGuard.html",[189,0.863,493,2.226]],["body/injectables/JwtAuthGuard.html",[0,0.317,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,60,0.206,67,0.01,68,0.012,69,0.01,122,1.049,189,1.541,190,2.356,493,3.973,639,3.793,718,2.265,1107,4.051,1108,4.748,1109,5.267,1110,6.055]],["title/injectables/JwtStrategy.html",[189,0.863,634,2.668]],["body/injectables/JwtStrategy.html",[0,0.241,3,0.157,4,0.139,5,0.139,7,0.527,9,1.347,17,0.752,18,0.014,28,0.854,32,0.854,51,0.278,60,0.157,64,1.932,67,0.008,68,0.01,69,0.008,75,1.796,93,1.796,95,1.376,122,0.797,153,1.612,189,1.3,190,1.791,193,2.601,199,2.761,222,2.889,223,2.117,227,2.026,228,1.864,238,2.321,488,3.543,517,6.018,518,3.315,604,2.316,617,3.609,634,4.017,639,2.883,647,4.004,654,3.953,667,4.709,671,4.004,718,1.722,788,2.883,1111,3.609,1112,5.223,1113,4.603,1114,4.603,1115,6.005,1116,6.005,1117,4.603,1118,4.004,1119,4.004,1120,3.609,1121,4.603,1122,4.709,1123,3.609,1124,5.241,1125,3.609,1126,3.609,1127,4.004,1128,4.004,1129,4.603,1130,4.603,1131,4.603,1132,4.603]],["title/injectables/LocalAuthGuard.html",[189,0.863,608,2.872]],["body/injectables/LocalAuthGuard.html",[0,0.317,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,60,0.206,67,0.01,68,0.012,69,0.01,122,1.049,189,1.541,190,2.356,608,5.126,639,3.793,718,2.265,1108,4.748,1109,5.267,1133,5.267,1134,6.055]],["title/injectables/LocalStrategy.html",[189,0.863,635,2.668]],["body/injectables/LocalStrategy.html",[0,0.257,3,0.167,4,0.148,5,0.148,7,0.561,9,1.403,17,0.782,18,0.014,19,2.655,28,0.889,32,0.889,51,0.275,60,0.167,64,1.576,67,0.008,68,0.011,69,0.008,75,1.869,93,1.869,95,1.465,122,0.849,144,2.253,153,1.315,189,1.353,190,1.906,193,2.679,199,2.253,207,2.875,223,2.253,227,2.157,228,1.984,491,4.276,604,2.386,606,3.842,635,4.182,639,3.069,666,4.182,667,4.902,690,4.048,718,1.833,1112,5.438,1118,4.262,1119,4.262,1120,3.842,1127,4.262,1128,4.262,1135,4.262,1136,4.899,1137,4.899,1138,6.252,1139,4.899,1140,4.262,1141,4.899,1142,4.899]],["title/classes/LoginUserDto.html",[0,0.209,602,2.872]],["body/classes/LoginUserDto.html",[0,0.316,2,1.404,3,0.205,4,0.182,5,0.182,18,0.014,51,0.269,60,0.205,67,0.01,68,0.012,69,0.01,76,2.092,592,3.198,601,3.782,602,5.117,603,4.734,711,2.658,712,4.348,713,4.348,718,2.259,719,4.734,884,4.734]],["title/guards/RolesGuard.html",[541,2.872,1143,3.127]],["body/guards/RolesGuard.html",[0,0.23,3,0.15,4,0.133,5,0.133,7,0.503,9,1.307,17,0.729,18,0.014,28,0.828,30,1.855,32,0.828,51,0.274,60,0.15,64,2.102,67,0.007,68,0.01,69,0.007,75,1.742,93,1.742,95,1.314,122,0.762,135,2.453,144,2.021,153,1.564,189,1.261,199,2.021,207,2.679,216,2.115,217,2.115,222,2.115,227,1.935,228,1.78,232,2.453,239,2.593,488,3.437,524,3.447,541,4.195,604,2.019,641,3.166,655,6.471,788,2.754,791,4.568,886,3.166,1124,4.568,1125,3.447,1126,3.447,1144,4.396,1145,3.824,1146,7.239,1147,4.396,1148,7.59,1149,4.396,1150,4.396,1151,6.958,1152,4.396,1153,5.826,1154,6.535,1155,3.824,1156,4.568,1157,4.396,1158,4.396,1159,5.826,1160,4.396,1161,4.396,1162,4.396,1163,4.396,1164,4.396,1165,4.396,1166,4.396,1167,4.396,1168,4.396,1169,4.396,1170,4.396]],["title/classes/SearchFlightByRangeDto.html",[0,0.209,974,2.668]],["body/classes/SearchFlightByRangeDto.html",[0,0.299,2,0.991,3,0.145,4,0.129,5,0.129,7,0.487,8,1.904,17,0.86,18,0.014,19,2.652,20,1.598,26,1.78,32,0.977,51,0.244,56,2.391,57,0.766,60,0.145,62,2.293,67,0.007,68,0.01,69,0.007,76,1.476,145,2.655,711,1.875,714,3.294,715,3.408,717,1.875,718,1.593,731,3.366,762,2.377,779,4.108,780,5.158,782,4.473,783,4.948,784,4.948,786,4.948,796,4.108,797,5.581,807,3.154,857,3.816,974,3.816,983,2.849,993,5.976,1171,5.617,1172,3.705,1173,6.432,1174,6.432,1175,4.259,1176,4.259,1177,5.705,1178,4.259,1179,5.705,1180,5.705,1181,4.259,1182,3.34]],["title/classes/SearchFlightDto.html",[0,0.209,968,2.668]],["body/classes/SearchFlightDto.html",[0,0.319,2,1.093,3,0.16,4,0.142,5,0.142,7,0.538,8,2.031,17,0.845,18,0.014,19,2.626,20,1.57,26,1.762,32,0.959,51,0.256,56,2.383,57,0.845,60,0.16,62,2.253,67,0.008,68,0.01,69,0.008,76,1.628,145,2.637,711,2.068,714,3.283,715,3.576,717,2.068,718,1.757,731,3.59,762,2.622,764,3.383,779,4.382,780,5.326,782,3.684,783,4.382,784,4.382,786,4.382,796,4.382,797,5.554,799,4.772,968,4.071,983,3.143,1171,5.598,1182,3.684,1183,6.75,1184,4.698,1185,4.698,1186,4.698]],["title/classes/Seat.html",[0,0.209,282,1.756]],["body/classes/Seat.html",[0,0.216,2,0.957,3,0.14,4,0.124,5,0.124,7,0.471,8,1.86,17,0.913,18,0.014,20,1.47,21,3.527,26,1.698,30,3.339,31,4.073,32,0.898,42,3.288,51,0.268,52,3.781,53,2.169,54,2.296,55,1.104,56,2.261,57,0.74,58,2.952,59,1.524,60,0.23,62,2.11,63,3.527,64,1.323,67,0.007,68,0.009,69,0.007,147,2.995,270,3.591,273,3.579,275,4.159,277,3.491,278,3.491,280,3.579,282,2.982,283,2.577,868,3.491,910,4.228,926,4.37,1187,2.752,1188,4.114,1189,4.114,1190,4.114,1191,5.893,1192,3.579,1193,4.013,1194,4.114,1195,2.963,1196,4.37,1197,4.37,1198,4.37,1199,3.226,1200,2.752,1201,3.579]],["title/controllers/SeatsController.html",[70,1.283,1202,2.872]],["body/controllers/SeatsController.html",[0,0.237,3,0.154,4,0.137,5,0.137,7,0.517,9,1.015,17,0.881,18,0.014,20,1.052,26,1.381,28,0.643,32,0.643,51,0.289,57,0.814,59,1.09,60,0.154,67,0.008,68,0.01,69,0.008,70,1.455,72,1.455,74,2.395,75,1.775,80,3.926,84,2.28,86,2.855,89,2.524,93,1.352,95,1.352,97,2.349,101,2.404,102,2.524,111,2.833,113,2.524,117,2.993,118,2.524,119,2.524,122,0.783,127,3.144,128,3.313,129,2.993,130,3.144,131,2.28,132,3.144,140,1.759,144,2.079,145,1.509,146,2.28,147,1.759,149,2.524,150,2.395,153,1.214,160,2.833,282,3.301,490,3.025,493,2.524,495,3.025,498,3.025,822,3.256,1107,3.025,1202,4.274,1203,3.933,1204,6.12,1205,4.888,1206,4.522,1207,4.522,1208,4.522,1209,4.522,1210,3.256,1211,3.025,1212,4.151,1213,3.933,1214,4.522,1215,4.522,1216,4.522,1217,4.522]],["title/modules/SeatsModule.html",[165,1.11,508,2.668]],["body/modules/SeatsModule.html",[0,0.268,3,0.174,4,0.154,5,0.154,18,0.014,28,0.726,51,0.287,53,1.987,55,1.371,60,0.174,67,0.009,68,0.011,69,0.009,72,2.064,122,0.885,165,1.953,167,2.155,168,2.155,169,2.348,170,2.348,171,2.155,172,3.227,173,3.227,179,2.951,180,2.348,181,2.248,183,2.575,184,2.705,187,2.85,282,2.248,508,5.258,1200,4.294,1202,5.054,1211,3.416,1212,5.115,1213,4.442,1218,4.442,1219,4.442,1220,4.442,1221,5.106,1222,5.106,1223,4.442]],["title/injectables/SeatsService.html",[189,0.863,1212,2.498]],["body/injectables/SeatsService.html",[0,0.242,3,0.157,4,0.14,5,0.14,7,0.529,9,1.351,17,0.754,18,0.014,28,0.856,32,0.856,51,0.279,55,1.241,59,1.115,60,0.157,67,0.008,68,0.01,69,0.008,75,1.801,93,1.801,95,1.383,97,2.369,101,1.873,122,0.801,140,1.799,153,1.241,189,1.303,190,1.799,192,3.738,193,2.606,199,2.126,201,3.96,207,2.769,216,2.897,217,2.224,218,2.58,222,2.224,223,3.08,226,2.58,227,2.035,228,1.873,237,2.58,238,2.331,244,2.58,245,2.728,282,3.321,1195,3.329,1204,5.826,1205,4.747,1210,3.329,1211,3.093,1212,3.773,1224,4.022,1225,6.698,1226,4.624,1227,4.624,1228,5.239,1229,4.624,1230,4.624,1231,6.023,1232,4.624,1233,4.624,1234,6.023,1235,4.624,1236,4.624,1237,4.624]],["title/classes/Section.html",[0,0.209,275,2.113]],["body/classes/Section.html",[0,0.41,2,0.991,3,0.145,4,0.129,5,0.129,7,0.487,8,1.904,17,0.942,18,0.014,20,1.496,21,3.59,26,1.715,30,3.305,31,3.998,32,0.914,51,0.271,52,3.834,53,2.22,54,2.377,55,1.143,56,2.293,57,0.766,58,3.022,59,1.551,60,0.234,62,2.147,63,3.184,64,1.37,67,0.007,68,0.01,69,0.007,270,2.744,275,3.795,277,2.668,278,3.574,282,3.154,283,2.668,821,5.388,822,4.948,824,5.388,826,4.962,828,4.962,878,2.849,910,4.303,1238,2.849,1239,4.259,1240,4.259,1241,4.259,1242,4.259,1243,4.259,1244,4.259,1245,3.34,1246,4.962,1247,3.067,1248,3.705]],["title/controllers/SectionsController.html",[70,1.283,1249,2.872]],["body/controllers/SectionsController.html",[0,0.164,3,0.107,4,0.095,5,0.095,7,0.359,9,1.347,17,0.974,18,0.014,20,1.487,26,1.606,28,0.853,32,0.909,51,0.268,57,0.564,59,0.756,60,0.107,67,0.005,68,0.008,69,0.005,70,1.008,72,1.008,74,1.66,75,1.375,76,2.08,77,3.771,78,3.541,79,2.213,80,3.35,84,3.223,86,3.534,89,2.567,90,2.714,93,1.795,95,1.911,96,2.097,97,2.452,99,2.097,101,2.706,102,3.35,104,2.097,106,1.963,111,1.963,113,2.567,116,2.714,117,2.319,118,1.749,119,1.749,122,0.543,126,2.567,127,2.886,128,3.35,129,3.369,130,3.539,131,1.581,132,3.18,133,1.66,134,1.66,135,1.749,138,1.38,140,1.22,144,1.441,145,1.046,146,3.223,147,2.487,148,1.749,149,3.041,150,2.886,151,3.214,153,1.716,156,1.849,157,1.963,159,1.963,160,1.963,162,1.963,163,2.097,264,2.714,275,4.168,293,2.257,301,2.458,312,2.097,818,4.004,831,2.257,1249,3.312,1250,2.726,1251,3.134,1252,4.599,1253,3.134,1254,3.134,1255,3.134,1256,5.812,1257,5.448,1258,3.134,1259,3.134,1260,3.134,1261,3.134,1262,4.276,1263,3.134,1264,3.134,1265,3.413,1266,2.726,1267,3.607,1268,3.134,1269,3.134,1270,3.134,1271,3.134,1272,3.134,1273,3.134,1274,3.134]],["title/modules/SectionsModule.html",[165,1.11,509,2.668]],["body/modules/SectionsModule.html",[0,0.26,3,0.169,4,0.15,5,0.15,18,0.014,28,0.895,51,0.291,53,2.451,55,1.331,60,0.169,67,0.008,68,0.011,69,0.008,72,2.026,122,0.859,165,1.926,167,2.093,168,2.093,169,2.28,170,2.28,171,2.093,172,3.184,173,3.184,179,2.897,180,2.28,181,2.183,183,2.5,184,2.627,187,3.516,275,2.627,282,2.183,509,5.224,831,3.571,878,3.317,1200,4.214,1223,4.313,1247,4.537,1249,4.986,1265,5.095,1266,4.313,1275,4.313,1276,4.313,1277,4.313,1278,4.958,1279,4.958,1280,4.958]],["title/injectables/SectionsService.html",[189,0.863,1265,2.498]],["body/injectables/SectionsService.html",[0,0.24,3,0.106,4,0.094,5,0.094,7,0.356,9,1.431,17,0.798,18,0.014,28,0.906,32,0.948,42,1.838,51,0.261,55,0.836,59,0.751,60,0.106,64,1.746,67,0.005,68,0.008,69,0.005,75,1.369,93,1.907,95,1.907,97,2.449,101,2.199,122,0.54,138,1.371,140,1.212,153,1.606,189,0.991,190,1.212,192,4.278,193,2.983,199,2.106,201,3.846,207,3.318,216,2.879,217,1.499,218,1.739,222,2.203,223,3.169,226,3.34,227,2.39,228,2.199,232,1.739,236,3.933,237,3.721,238,3.018,242,1.739,244,3.03,245,3.203,264,2.701,275,4.091,282,1.371,349,3.297,350,2.868,818,3.749,821,2.443,822,3.909,831,2.243,878,2.084,1195,2.243,1228,4.722,1245,2.443,1256,5.206,1262,4.004,1265,2.868,1267,3.59,1281,2.71,1282,4.579,1283,4.579,1284,5.429,1285,4.579,1286,5.429,1287,3.115,1288,3.115,1289,4.579,1290,4.579,1291,3.115,1292,4.579,1293,3.115,1294,5.985,1295,3.115,1296,4.579,1297,3.115,1298,3.115,1299,3.115,1300,3.115,1301,3.115,1302,3.115,1303,5.429,1304,5.429,1305,5.985,1306,4.579,1307,3.115,1308,3.115,1309,3.115,1310,3.115,1311,3.115]],["title/classes/SelectSeatDto.html",[0,0.209,1312,3.127]],["body/classes/SelectSeatDto.html",[0,0.39,2,1.227,3,0.18,4,0.159,5,0.159,7,0.604,8,2.187,17,0.66,18,0.014,20,1.227,26,1.524,32,0.75,51,0.282,56,2.187,57,0.95,60,0.18,62,1.762,67,0.009,68,0.011,69,0.009,76,1.829,145,2.378,147,3.038,711,2.323,714,3.012,717,2.323,718,1.974,815,3.53,817,3.8,823,4.138,830,5.137,868,4.104,1199,4.138,1210,3.8,1211,3.53,1312,5.137,1313,5.698,1314,4.59,1315,4.59,1316,4.138,1317,4.59,1318,4.59,1319,4.138]],["title/classes/Ticket.html",[0,0.209,803,2.113]],["body/classes/Ticket.html",[0,0.122,2,0.54,3,0.079,4,0.07,5,0.07,7,0.266,8,1.222,9,1.334,17,0.985,18,0.014,19,2.558,20,1.682,21,4.036,23,2.043,26,1.831,27,2.293,28,0.916,30,3.389,31,3.929,32,1.028,34,2.293,51,0.236,52,4.08,53,1.424,54,1.296,55,0.623,56,2.44,57,0.418,58,3.148,59,1.092,60,0.202,62,2.414,63,3.865,64,0.747,67,0.004,68,0.006,69,0.004,147,2.581,268,2.449,270,1.761,277,3.221,278,3.221,282,2.264,283,2.293,374,2.636,604,2.298,605,1.672,677,3.031,679,3.031,788,2.838,789,2.636,803,2.4,805,2.636,806,2.636,807,2.92,837,4.472,838,3.941,839,3.941,840,3.941,841,3.941,842,5.201,843,4.472,844,3.184,845,4.472,846,4.472,848,3.941,854,3.184,856,2.87,857,2.449,860,3.184,861,2.636,865,4.032,868,3.221,871,4.032,873,2.636,875,3.184,878,1.554,910,4.437,926,4.032,1192,2.02,1193,3.263,1196,2.87,1197,2.87,1198,2.87,1316,1.821,1320,1.554,1321,2.323,1322,2.323,1323,3.661,1324,2.323,1325,2.323,1326,2.323,1327,2.323,1328,2.323,1329,2.323,1330,2.323,1331,2.323,1332,2.323,1333,2.323,1334,2.323,1335,2.323,1336,2.323,1337,2.323,1338,2.323,1339,2.323,1340,2.323,1341,2.323,1342,2.323,1343,2.323,1344,2.323,1345,1.821,1346,1.821,1347,3.184,1348,3.184,1349,3.184,1350,3.184,1351,1.672,1352,2.02]],["title/controllers/TicketsController.html",[70,1.283,1353,2.872]],["body/controllers/TicketsController.html",[0,0.153,3,0.099,4,0.088,5,0.088,7,0.333,9,1.299,17,0.963,18,0.014,20,1.442,26,1.679,28,0.823,32,0.881,51,0.268,57,0.524,59,0.702,60,0.099,67,0.005,68,0.007,69,0.005,70,0.937,72,0.937,74,1.543,75,1.302,76,2.007,77,1.718,78,3.416,80,3.46,84,3.126,86,3.472,89,3.232,90,1.718,93,1.731,95,1.854,97,2.409,101,3.006,102,3.232,113,2.431,116,1.718,117,2.196,118,1.625,119,1.625,122,0.505,126,2.431,127,2.764,128,3.46,129,3.28,130,3.446,131,1.468,132,3.446,133,1.543,134,1.543,135,1.625,138,1.282,140,1.133,144,1.339,145,0.972,146,3.126,147,2.412,148,1.625,149,3.232,150,3.284,151,1.718,153,1.902,156,1.718,159,1.824,162,1.824,242,2.431,260,1.917,312,1.948,402,2.533,488,3.838,489,3.136,490,1.948,493,1.625,495,1.948,498,3.874,604,2.007,803,3.931,807,3.052,834,3.883,879,2.097,1107,1.948,1353,3.136,1354,2.533,1355,3.415,1356,2.912,1357,4.355,1358,2.912,1359,2.912,1360,2.912,1361,2.912,1362,5.658,1363,2.912,1364,5.217,1365,2.912,1366,2.912,1367,2.912,1368,2.912,1369,2.912,1370,2.912,1371,2.912,1372,2.912,1373,2.912,1374,2.912,1375,4.147,1376,2.912,1377,2.912,1378,3.415,1379,3.268,1380,2.533,1381,2.912,1382,2.912,1383,2.912,1384,2.912,1385,2.912,1386,2.912,1387,5.217,1388,2.912,1389,2.912,1390,2.912,1391,2.912]],["title/modules/TicketsModule.html",[165,1.11,510,2.668]],["body/modules/TicketsModule.html",[0,0.218,3,0.141,4,0.126,5,0.126,18,0.014,28,0.967,51,0.3,53,2.647,55,1.115,60,0.141,67,0.007,68,0.009,69,0.007,72,1.805,122,0.72,165,1.767,167,1.754,168,1.754,169,1.911,170,1.911,171,1.754,172,2.921,173,2.921,179,2.58,180,1.911,181,1.829,183,2.829,184,2.201,187,2.319,260,1.829,284,3.754,318,4.586,324,3.615,428,4.586,507,4.586,510,5.39,511,4.319,604,1.44,605,2.993,803,2.201,807,1.829,879,2.993,947,3.259,949,3.754,1006,3.615,1345,3.259,1351,4.041,1353,4.575,1379,4.964,1380,3.615,1392,3.615,1393,3.615,1394,3.615,1395,4.156,1396,4.156,1397,4.156,1398,4.156,1399,4.156,1400,3.754,1401,4.156,1402,4.156,1403,4.156,1404,3.615]],["title/injectables/TicketsService.html",[189,0.863,1379,2.498]],["body/injectables/TicketsService.html",[0,0.12,1,1.011,3,0.078,4,0.069,5,0.069,7,0.263,9,1.248,17,0.696,18,0.014,28,0.962,32,0.841,42,2.653,51,0.25,55,0.616,59,0.554,60,0.078,64,2.221,67,0.004,68,0.006,69,0.004,75,1.085,79,1.745,93,1.664,95,1.664,97,2.517,101,1.822,122,0.398,138,1.011,140,0.894,147,0.894,153,1.493,189,0.785,190,0.894,192,4.07,193,2.838,199,1.668,201,3.975,207,3.112,216,2.164,217,1.105,218,1.282,222,2.458,223,3.416,226,3.583,227,2.826,228,2.601,236,4.449,237,4.208,238,3.413,242,1.282,244,3.583,245,2.141,260,2.826,263,1.654,264,2.653,281,1.654,333,3.912,344,1.654,345,1.998,347,3.156,349,4.971,350,4.324,356,3.156,604,2.29,605,1.654,659,4.638,690,2.025,765,1.654,769,1.654,803,3.657,807,2.909,834,3.201,879,1.654,947,1.801,948,1.654,1017,3.912,1035,1.998,1036,3.156,1038,3.912,1072,1.998,1081,1.801,1319,1.801,1345,1.801,1346,1.801,1355,2.845,1362,4.84,1375,3.418,1378,2.845,1379,2.273,1405,1.998,1406,3.628,1407,5.11,1408,4.497,1409,4.497,1410,4.497,1411,2.297,1412,3.912,1413,2.297,1414,3.628,1415,3.628,1416,2.297,1417,2.297,1418,2.297,1419,6.609,1420,2.297,1421,2.297,1422,2.297,1423,2.297,1424,2.297,1425,1.654,1426,2.297,1427,2.297,1428,3.628,1429,3.156,1430,2.297,1431,3.628,1432,2.297,1433,3.628,1434,2.297,1435,1.998,1436,3.628,1437,3.628,1438,2.297,1439,3.628,1440,2.297,1441,1.998,1442,3.628,1443,2.297,1444,2.297,1445,2.297,1446,2.297]],["title/classes/UpdateAirlineDto.html",[0,0.209,112,2.668]],["body/classes/UpdateAirlineDto.html",[0,0.317,2,1.408,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,57,1.09,60,0.206,67,0.01,68,0.012,69,0.01,76,2.098,82,3.793,112,4.762,139,4.748,711,2.666,718,2.265,723,4.748,1447,5.267,1448,6.055]],["title/classes/UpdateAirplaneDto.html",[0,0.209,303,2.668]],["body/classes/UpdateAirplaneDto.html",[0,0.317,2,1.408,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,57,1.09,60,0.206,67,0.01,68,0.012,69,0.01,76,2.098,290,3.793,303,4.762,308,4.748,711,2.666,718,2.265,735,4.748,1449,5.267,1450,6.055]],["title/classes/UpdateAirportDto.html",[0,0.209,414,2.668]],["body/classes/UpdateAirportDto.html",[0,0.317,2,1.408,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,57,1.09,60,0.206,67,0.01,68,0.012,69,0.01,76,2.098,399,3.793,414,4.762,419,4.748,711,2.666,718,2.265,745,4.748,1451,5.267,1452,6.055]],["title/classes/UpdateFlightDto.html",[0,0.209,978,2.668]],["body/classes/UpdateFlightDto.html",[0,0.317,2,1.408,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,57,1.09,60,0.206,67,0.01,68,0.012,69,0.01,76,2.098,711,2.666,718,2.265,762,3.379,764,4.36,978,4.762,983,4.051,1182,4.748,1453,5.267]],["title/classes/UpdateSeatDto.html",[0,0.209,1205,2.668]],["body/classes/UpdateSeatDto.html",[0,0.39,2,1.227,3,0.18,4,0.159,5,0.159,7,0.604,8,2.187,17,0.66,18,0.014,20,1.227,26,1.524,32,0.75,51,0.282,56,2.187,57,0.95,60,0.18,62,1.762,67,0.009,68,0.011,69,0.009,76,1.829,145,2.378,147,3.038,711,2.323,714,3.012,717,2.323,718,1.974,815,3.53,817,3.8,823,4.138,830,5.137,868,4.104,1199,4.138,1205,4.383,1210,3.8,1211,3.53,1314,4.59,1315,4.59,1316,4.138,1317,4.59,1318,4.59,1319,4.138,1454,5.698]],["title/classes/UpdateSectionDto.html",[0,0.209,1262,2.668]],["body/classes/UpdateSectionDto.html",[0,0.317,2,1.408,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,57,1.09,60,0.206,67,0.01,68,0.012,69,0.01,76,2.098,711,2.666,718,2.265,818,3.793,820,4.748,1262,4.762,1267,4.748,1455,5.267,1456,6.055]],["title/classes/UpdateTicketDto.html",[0,0.209,1375,2.668]],["body/classes/UpdateTicketDto.html",[0,0.317,2,1.408,3,0.206,4,0.183,5,0.183,18,0.014,51,0.27,57,1.09,60,0.206,67,0.01,68,0.012,69,0.01,76,2.098,711,2.666,718,2.265,834,3.793,836,4.748,1375,4.762,1378,4.748,1457,5.267,1458,6.055]],["title/classes/UpdateUserDataDto.html",[0,0.209,1459,2.668]],["body/classes/UpdateUserDataDto.html",[0,0.316,2,1.4,3,0.205,4,0.182,5,0.182,18,0.014,51,0.269,60,0.205,67,0.01,68,0.012,69,0.01,76,2.086,592,3.189,601,3.771,604,2.086,711,2.65,712,4.335,713,4.335,718,2.252,719,4.72,1459,4.746,1460,5.236,1461,5.236]],["title/classes/User.html",[0,0.209,604,1.382]],["body/classes/User.html",[0,0.178,2,0.792,3,0.116,4,0.103,5,0.103,7,0.39,8,1.63,17,0.948,18,0.014,19,2.511,20,1.647,21,3.952,26,1.81,28,0.694,30,3.407,31,3.952,32,1.007,38,3.267,51,0.25,52,4.043,53,1.9,54,1.9,55,0.914,56,2.418,57,0.613,58,2.587,59,1.377,60,0.212,62,2.364,63,3.837,64,1.095,67,0.006,68,0.008,69,0.006,268,3.267,270,2.747,277,3.059,278,3.059,283,2.133,604,2.454,666,3.821,675,5.312,677,3.821,679,3.821,681,4.478,690,3.482,709,3.83,803,3.751,857,3.267,861,3.517,873,3.517,886,3.517,887,2.962,894,4.248,895,4.248,910,3.821,1193,3.517,1355,4.892,1400,2.278,1425,2.452,1462,2.278,1463,3.405,1464,3.405,1465,3.405,1466,3.405,1467,3.405,1468,3.405,1469,3.405,1470,3.405,1471,3.405,1472,3.405,1473,3.405,1474,3.405,1475,3.405,1476,4.248,1477,3.405,1478,2.962]],["title/controllers/UsersController.html",[70,1.283,1479,2.872]],["body/controllers/UsersController.html",[0,0.156,3,0.101,4,0.09,5,0.09,7,0.34,9,1.313,17,0.959,18,0.014,20,1.455,26,1.712,28,0.832,32,0.889,51,0.27,57,0.535,59,0.717,60,0.101,67,0.005,68,0.007,69,0.005,70,0.957,72,0.957,74,1.576,75,1.323,77,3.868,78,3.453,79,2.129,80,2.47,84,3.154,86,3.49,89,2.949,90,2.611,93,1.75,95,1.871,97,1.954,101,1.793,102,3.266,106,1.864,113,2.47,117,2.665,118,1.661,119,1.661,122,0.516,126,2.949,127,2.8,128,3.491,129,3.306,130,3.473,131,1.5,132,3.473,133,1.576,134,1.576,135,1.661,140,1.158,144,1.368,145,0.993,146,3.154,147,2.434,148,1.661,149,3.266,150,3.314,151,2.611,153,1.679,156,1.755,157,1.864,293,2.143,488,3.868,489,2.143,490,1.991,493,1.661,495,1.991,498,3.535,598,5.024,604,2.764,654,2.949,690,2.949,697,4.185,970,2.588,1107,1.991,1459,4.185,1479,3.187,1480,2.588,1481,3.85,1482,4.426,1483,4.426,1484,2.975,1485,4.426,1486,2.975,1487,5.852,1488,2.975,1489,2.975,1490,2.975,1491,2.975,1492,2.975,1493,2.975,1494,2.975,1495,2.975,1496,2.975,1497,2.975,1498,2.975,1499,2.975,1500,2.975,1501,2.975,1502,2.975,1503,2.975,1504,2.588,1505,2.588,1506,2.588,1507,2.588,1508,2.333,1509,2.975,1510,2.975,1511,2.975,1512,2.975,1513,2.975,1514,2.975,1515,2.975,1516,2.588,1517,2.975,1518,2.975,1519,2.975,1520,2.975,1521,2.975]],["title/modules/UsersModule.html",[165,1.11,511,2.353]],["body/modules/UsersModule.html",[0,0.262,3,0.17,4,0.151,5,0.151,18,0.014,28,0.71,51,0.292,53,1.943,55,1.341,60,0.17,67,0.008,68,0.011,69,0.008,72,2.036,122,0.865,165,1.933,167,2.108,168,2.108,169,2.297,170,2.297,171,2.108,172,3.195,173,3.195,179,2.91,180,2.297,181,2.199,183,2.519,184,2.646,187,2.787,506,3.965,511,4.614,604,1.731,637,5.505,654,4.543,1400,4.234,1404,4.345,1479,5.003,1504,4.345,1508,3.917,1522,4.345,1523,4.345,1524,4.345,1525,4.995,1526,4.995,1527,4.995]],["title/injectables/UsersService.html",[189,0.863,654,2.226]],["body/injectables/UsersService.html",[0,0.128,3,0.083,4,0.074,5,0.074,7,0.28,9,1.423,17,0.794,18,0.014,19,1.624,28,0.902,32,0.933,51,0.249,55,0.657,59,0.59,60,0.083,64,2.111,67,0.004,68,0.006,69,0.004,75,1.14,79,1.177,93,1.897,95,1.897,97,2.413,101,2.143,122,0.424,138,1.077,140,0.952,153,1.703,189,0.825,190,0.952,192,4.301,193,2.999,199,1.125,201,2.953,207,3.363,216,2.923,217,1.177,218,1.366,222,1.177,223,3.429,226,3.54,227,2.793,228,2.658,231,2.935,232,1.366,236,3.584,237,3.39,238,3.597,239,1.444,240,1.637,241,1.637,242,1.366,244,2.953,245,3.121,592,2.803,598,4.725,601,1.533,604,2.727,654,2.128,659,4.764,666,3.539,668,2.99,672,2.129,678,2.129,680,2.129,682,2.129,685,3.317,686,2.129,687,3.317,690,3.39,692,3.317,694,4.076,697,3.539,1081,1.919,1412,3.317,1425,1.762,1429,5.284,1435,3.317,1441,4.076,1459,3.539,1481,3.317,1505,2.129,1506,2.129,1507,2.129,1508,1.919,1516,2.129,1528,2.129,1529,4.686,1530,3.813,1531,3.813,1532,5.291,1533,3.813,1534,3.813,1535,4.686,1536,2.447,1537,2.447,1538,2.447,1539,2.447,1540,3.813,1541,2.447,1542,3.813,1543,2.447,1544,2.447,1545,3.813,1546,2.447,1547,3.813,1548,2.447,1549,2.447,1550,2.447,1551,2.447,1552,2.447,1553,4.686,1554,3.813,1555,3.813,1556,3.813,1557,3.813,1558,3.813,1559,2.447,1560,3.813,1561,2.447,1562,2.447,1563,2.447,1564,2.447,1565,2.447,1566,2.447,1567,2.447]],["title/coverage.html",[1568,4.278]],["body/coverage.html",[0,0.421,1,1.189,5,0.082,6,2.964,17,0.338,18,0.014,65,1.945,67,0.005,68,0.007,69,0.005,70,2.278,71,1.945,73,2.35,82,1.692,112,1.807,133,1.431,134,2.18,136,1.692,165,0.752,171,1.14,189,1.63,191,2.35,202,1.692,228,1.094,260,1.189,261,2.964,275,1.431,282,1.189,284,1.807,286,1.945,287,2.35,290,1.692,303,1.807,306,1.692,325,2.35,358,1.431,359,2.964,393,1.945,395,1.945,396,2.35,399,1.692,414,1.807,417,1.692,435,2.35,482,1.945,483,2.35,491,1.508,493,1.508,512,1.807,541,1.945,569,2.35,570,1.945,571,2.35,592,1.431,600,1.945,602,1.945,603,2.118,604,1.728,608,1.945,634,1.807,635,1.807,651,2.35,654,1.508,697,1.807,698,2.35,699,2.35,722,2.35,723,3.227,734,2.35,735,3.227,744,2.35,745,3.227,762,1.508,763,2.35,764,3.59,803,1.431,807,1.812,815,1.807,816,2.35,817,3.59,818,1.692,819,2.35,820,3.227,834,1.692,835,2.35,836,3.227,884,3.227,904,2.118,925,2.964,949,1.807,951,1.945,952,2.35,968,1.807,974,1.807,978,1.807,981,1.692,1007,2.35,1107,1.807,1108,3.227,1111,3.227,1122,2.118,1123,2.118,1133,2.35,1135,2.35,1143,2.118,1145,2.35,1156,2.118,1171,3.227,1172,2.35,1187,2.753,1200,1.807,1202,1.945,1203,2.35,1205,1.807,1212,1.692,1224,2.35,1238,2.753,1247,1.945,1249,1.945,1250,2.35,1262,1.807,1265,1.692,1281,2.35,1312,2.118,1313,2.35,1320,2.753,1351,1.945,1353,1.945,1354,2.35,1375,1.807,1379,1.692,1400,1.807,1405,2.35,1447,2.35,1449,2.35,1451,2.35,1453,2.35,1454,2.35,1455,2.35,1457,2.35,1459,1.807,1460,2.35,1461,2.35,1462,2.753,1479,1.945,1480,2.35,1528,2.35,1568,2.118,1569,2.701,1570,2.701,1571,2.701,1572,8.365,1573,6.775,1574,6.321,1575,7.938,1576,4.985,1577,7.299,1578,6.573,1579,4.115,1580,6,1581,3.58,1582,6,1583,4.115,1584,2.701,1585,4.115,1586,3.227,1587,4.115,1588,2.701,1589,2.701]],["title/dependencies.html",[168,2.026,1590,3.324]],["body/dependencies.html",[0,0.32,18,0.014,55,1.267,57,0.849,59,1.138,67,0.008,68,0.01,69,0.008,117,2.38,122,0.818,124,4.105,125,4.786,168,1.992,518,3.398,521,4.105,524,3.7,526,4.105,527,3.7,546,4.105,617,3.7,639,2.956,641,3.398,668,3.7,712,3.398,713,3.398,717,2.078,909,4.105,1033,4.105,1034,4.105,1120,5.304,1140,4.105,1155,4.105,1591,4.719,1592,6.764,1593,4.719,1594,4.719,1595,4.719,1596,4.719,1597,4.719,1598,4.719,1599,4.719,1600,4.719,1601,6.764,1602,4.719,1603,4.719,1604,6.103,1605,4.719,1606,4.719,1607,4.719,1608,4.719,1609,4.719,1610,4.719,1611,4.719,1612,4.719,1613,4.719,1614,4.719,1615,4.719,1616,4.719,1617,4.719,1618,4.719,1619,4.719,1620,4.719,1621,4.719,1622,4.719,1623,4.719,1624,4.719,1625,4.719,1626,4.719,1627,4.719,1628,4.719,1629,4.719,1630,4.719,1631,4.719,1632,4.719,1633,4.719,1634,4.719,1635,4.719,1636,4.719,1637,4.719]],["title/miscellaneous/enumerations.html",[1638,1.855,1639,4.175]],["body/miscellaneous/enumerations.html",[0,0.325,1,2.731,7,0.554,17,0.777,18,0.014,67,0.008,68,0.01,69,0.008,147,2.81,219,4.865,604,2.15,675,4.468,824,4.865,842,4.865,865,4.865,868,4.523,871,4.865,904,3.796,1187,3.239,1191,5.397,1196,5.662,1197,5.662,1198,5.662,1238,3.239,1246,5.397,1320,3.239,1347,5.397,1348,5.397,1349,5.397,1350,5.397,1462,3.239,1476,5.397,1638,2.702,1639,4.211,1640,3.796,1641,4.842,1642,3.796,1643,5.369,1644,3.796,1645,7.229]],["title/miscellaneous/functions.html",[1638,1.855,1646,4.175]],["body/miscellaneous/functions.html",[7,0.727,18,0.012,67,0.011,68,0.012,69,0.011,171,3.255,1586,4.983,1638,3.547,1646,5.528,1647,5.528]],["title/index.html",[7,0.38,1648,3.324,1649,3.324]],["body/index.html",[4,0.152,18,0.014,26,1.173,67,0.008,68,0.011,69,0.008,528,4.387,1568,3.955,1650,5.044,1651,5.044,1652,6.368,1653,5.044,1654,5.044,1655,5.044,1656,5.044,1657,5.044,1658,5.044,1659,6.979,1660,5.044,1661,5.044,1662,5.044,1663,5.044,1664,7.838,1665,5.044,1666,5.044,1667,5.044,1668,7.719,1669,5.044,1670,5.044,1671,6.368,1672,5.044,1673,5.044,1674,5.044,1675,5.044,1676,6.368,1677,6.368,1678,5.044,1679,5.044,1680,5.044,1681,6.368,1682,6.368,1683,5.044,1684,5.044,1685,5.044,1686,5.044,1687,5.044,1688,4.387,1689,5.044,1690,5.044,1691,5.044,1692,5.044,1693,5.044,1694,5.044,1695,5.044,1696,5.044,1697,5.044,1698,5.044,1699,5.044,1700,5.044,1701,5.044,1702,5.044,1703,5.044,1704,5.044,1705,5.044]],["title/modules.html",[167,2.303]],["body/modules.html",[18,0.011,67,0.009,68,0.011,69,0.009,166,3.702,167,2.335,178,3.466,318,3.466,428,3.466,502,3.984,506,3.466,507,3.466,508,3.702,509,3.702,510,3.702,511,3.264,1688,7.147,1706,8.217,1707,8.217,1708,8.217]],["title/overview.html",[1709,4.746]],["body/overview.html",[2,0.808,18,0.014,42,2.049,67,0.006,68,0.008,69,0.006,72,1.117,136,4.462,165,0.966,166,4.872,167,1.466,168,1.466,169,1.597,170,1.597,171,1.466,172,1.597,173,1.597,174,3.022,175,3.022,176,3.022,177,3.022,178,4.462,179,2.278,180,1.597,181,1.529,190,1.352,202,4.462,306,4.462,318,4.462,319,3.022,320,3.022,321,3.022,417,4.462,428,4.462,429,3.022,430,3.022,431,3.022,491,3.976,502,5.856,503,3.022,504,3.022,505,3.022,506,4.71,507,4.462,508,4.63,509,4.63,510,5.223,511,4.203,512,3.863,631,3.022,632,3.022,633,3.022,634,3.863,635,3.863,654,3.976,899,3.022,900,3.022,901,3.022,981,4.462,1001,3.022,1002,3.022,1003,3.022,1143,2.724,1212,4.462,1218,3.022,1219,3.022,1220,3.022,1265,4.462,1275,3.022,1276,3.022,1277,3.022,1379,4.462,1392,3.022,1393,3.022,1394,3.022,1522,3.022,1523,3.022,1524,3.022,1709,3.022,1710,3.474,1711,3.474,1712,3.474,1713,3.474]],["title/miscellaneous/typealiases.html",[1638,1.855,1714,4.8]],["body/miscellaneous/typealiases.html",[6,4.211,7,0.669,17,0.732,18,0.012,61,5.468,67,0.01,68,0.012,69,0.01,261,4.211,281,5.022,359,4.211,391,5.468,925,4.211,948,5.022,1187,3.912,1195,5.022,1238,3.912,1245,5.468,1320,3.912,1346,5.468,1425,5.022,1462,3.912,1638,3.264,1640,4.586,1642,4.586,1643,4.586,1644,4.586,1715,5.848,1716,5.087,1717,5.087,1718,5.087,1719,5.087]],["title/miscellaneous/variables.html",[1638,1.855,1720,4.175]],["body/miscellaneous/variables.html",[6,3.383,7,0.538,17,0.762,18,0.014,19,2.109,65,4.382,66,4.086,67,0.008,68,0.01,69,0.008,133,3.224,134,2.489,153,1.261,165,1.693,261,3.383,284,4.071,285,4.086,359,3.383,393,4.382,394,4.086,488,3.59,675,4.86,788,2.943,925,3.383,949,4.071,950,4.086,1111,3.684,1122,4.772,1123,3.684,1124,5.293,1125,3.684,1126,3.684,1156,4.772,1187,3.143,1193,5.778,1200,4.071,1201,4.086,1238,3.143,1247,4.382,1248,4.086,1320,3.143,1351,4.382,1352,4.086,1400,4.071,1462,3.143,1478,4.086,1581,5.871,1586,3.684,1638,2.622,1640,3.684,1642,3.684,1643,3.684,1644,3.684,1645,6.98,1647,4.086,1716,4.086,1717,4.086,1718,4.086,1719,4.086,1720,4.086,1721,4.698,1722,6.085,1723,4.698]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1572,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1591,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1611,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1610,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":809,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0.6.3",{"_index":1593,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":802,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0/1",{"_index":1575,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1579,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1583,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1587,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1580,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1582,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1578,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1584,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1573,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1574,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1576,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1585,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":784,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["08",{"_index":845,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["1",{"_index":42,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["1.1.4",{"_index":1599,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":1606,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1602,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1604,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1711,"title":{},"body":{"overview.html":{}}}],["11",{"_index":1710,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1712,"title":{},"body":{"overview.html":{}}}],["15t15:35:00.000z",{"_index":1177,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["16t15:35:00.000z",{"_index":799,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["1700",{"_index":826,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["18t15:35:00.000z",{"_index":1179,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["1992",{"_index":43,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["2.1.4",{"_index":1597,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":86,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["2000",{"_index":844,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2016",{"_index":875,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2021",{"_index":783,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["21t09:15:00.000z",{"_index":785,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["23",{"_index":789,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["29",{"_index":1713,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["3.4.3",{"_index":1608,"title":{},"body":{"dependencies.html":{}}}],["31t00:00:00.000z",{"_index":846,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["380951234567",{"_index":894,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["4",{"_index":761,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4)@apiproperty({example",{"_index":756,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4.0.0",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1598,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":271,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["5.0.1",{"_index":1605,"title":{},"body":{"dependencies.html":{}}}],["5.12.9",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["6.4.6",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1596,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1594,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":1595,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1592,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":267,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["8,12",{"_index":721,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8,12}$')@apiproperty({example",{"_index":706,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8.3.2",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":705,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["9)@apiproperty({example",{"_index":853,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["90",{"_index":828,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["9065",{"_index":806,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["__v",{"_index":237,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["a1b2@c3d",{"_index":709,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["access",{"_index":1169,"title":{},"body":{"guards/RolesGuard.html":{}}}],["add(3",{"_index":1075,"title":{},"body":{"injectables/FlightsService.html":{}}}],["admin",{"_index":1476,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["adult",{"_index":871,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["aerospatiale/alenia",{"_index":265,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airline",{"_index":1,"title":{"classes/Airline.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["airline'})@apiresponse({status",{"_index":85,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@prop({required",{"_index":37,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({trim",{"_index":45,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({unique",{"_index":29,"title":{},"body":{"classes/Airline.html":{}}}],["airline.airlinenameeng",{"_index":248,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameru",{"_index":250,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameua",{"_index":251,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptioneng",{"_index":253,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionru",{"_index":255,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionua",{"_index":257,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.dto",{"_index":139,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{}}}],["airline.dto.ts",{"_index":723,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["airline.dto.ts:11",{"_index":728,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:19",{"_index":725,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:27",{"_index":726,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:36",{"_index":732,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:45",{"_index":729,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:54",{"_index":730,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.name",{"_index":188,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airline.save",{"_index":258,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedocument",{"_index":61,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"miscellaneous/typealiases.html":{}}}],["airlinedto",{"_index":94,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameeng",{"_index":247,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameru",{"_index":249,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameua",{"_index":225,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptioneng",{"_index":252,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionru",{"_index":254,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionua",{"_index":256,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlineid",{"_index":210,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinemodel",{"_index":204,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinenameeng",{"_index":10,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameru",{"_index":11,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameua",{"_index":12,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["airlines",{"_index":25,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airlines'})@apiresponse({status",{"_index":103,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airlines.controller",{"_index":185,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airlines.service",{"_index":137,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{}}}],["airlines/airlines.module",{"_index":534,"title":{},"body":{"modules/AppModule.html":{}}}],["airlineschema",{"_index":65,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airlinescontroller",{"_index":71,"title":{"controllers/AirlinesController.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"coverage.html":{}}}],["airlinesmodule",{"_index":166,"title":{"modules/AirlinesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["airlinesservice",{"_index":136,"title":{"injectables/AirlinesService.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"coverage.html":{},"overview.html":{}}}],["airline})@apibadrequestresponse({description",{"_index":87,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@apinotfoundresponse({description",{"_index":98,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@get(':id",{"_index":109,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airplane",{"_index":260,"title":{"classes/Airplane.html":{}},"body":{"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["airplane'})@apiresponse({status",{"_index":291,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane.airplanename",{"_index":355,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplane.amountofseat",{"_index":1436,"title":{},"body":{"injectables/TicketsService.html":{}}}],["airplane.dto",{"_index":308,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{}}}],["airplane.dto.ts",{"_index":735,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["airplane.dto.ts:18",{"_index":736,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:23",{"_index":738,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:32",{"_index":740,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.name",{"_index":324,"title":{},"body":{"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{}}}],["airplane.save",{"_index":356,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanedocument",{"_index":281,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["airplanedto",{"_index":296,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanedto.airplanename",{"_index":354,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplaneid",{"_index":338,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplanemodel",{"_index":333,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanename",{"_index":262,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["airplanes",{"_index":288,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanes'})@apiresponse({status",{"_index":299,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplanes.controller",{"_index":323,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["airplanes.service",{"_index":307,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{}}}],["airplanes/airplanes.module",{"_index":538,"title":{},"body":{"modules/AppModule.html":{}}}],["airplaneschema",{"_index":284,"title":{},"body":{"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airplanescontroller",{"_index":286,"title":{"controllers/AirplanesController.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"coverage.html":{}}}],["airplanesmodule",{"_index":318,"title":{"modules/AirplanesModule.html":{}},"body":{"modules/AirplanesModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airplanesservice",{"_index":306,"title":{"injectables/AirplanesService.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"coverage.html":{},"overview.html":{}}}],["airplane})@apibadrequestresponse({description",{"_index":292,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@apinotfoundresponse({description",{"_index":297,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airport",{"_index":358,"title":{"classes/Airport.html":{}},"body":{"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"coverage.html":{}}}],["airport'})@apiresponse({status",{"_index":400,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@prop({required",{"_index":375,"title":{},"body":{"classes/Airport.html":{},"classes/Flight.html":{}}}],["airport'})@prop({trim",{"_index":371,"title":{},"body":{"classes/Airport.html":{}}}],["airport.airportcountryeng",{"_index":463,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryru",{"_index":467,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryua",{"_index":465,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameeng",{"_index":469,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameru",{"_index":473,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameua",{"_index":471,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttowneng",{"_index":475,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownru",{"_index":479,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownua",{"_index":477,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.dto",{"_index":419,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{}}}],["airport.dto.ts",{"_index":745,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["airport.dto.ts:14",{"_index":751,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:22",{"_index":749,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:30",{"_index":750,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:37",{"_index":757,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:45",{"_index":748,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:53",{"_index":746,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:61",{"_index":747,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:69",{"_index":754,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:77",{"_index":752,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:85",{"_index":753,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.iata",{"_index":461,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.name",{"_index":434,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airport.save",{"_index":480,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportcountryeng",{"_index":360,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryru",{"_index":361,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryua",{"_index":362,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportdocument",{"_index":391,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"miscellaneous/typealiases.html":{}}}],["airportdto",{"_index":406,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airportdto.airportcountryeng",{"_index":462,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryru",{"_index":466,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryua",{"_index":464,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameeng",{"_index":468,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameru",{"_index":472,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameua",{"_index":470,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttowneng",{"_index":474,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownru",{"_index":478,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownua",{"_index":476,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.iata",{"_index":456,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportid",{"_index":448,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportmodel",{"_index":443,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportnameeng",{"_index":363,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameru",{"_index":364,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameua",{"_index":365,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airports",{"_index":397,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airports'})@apiresponse({status",{"_index":409,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airports.controller",{"_index":433,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airports.service",{"_index":418,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{}}}],["airports/airports.module",{"_index":533,"title":{},"body":{"modules/AppModule.html":{}}}],["airportschema",{"_index":393,"title":{},"body":{"classes/Airport.html":{},"modules/AirportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airportscontroller",{"_index":395,"title":{"controllers/AirportsController.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"coverage.html":{}}}],["airportsmodule",{"_index":428,"title":{"modules/AirportsModule.html":{}},"body":{"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airportsservice",{"_index":417,"title":{"injectables/AirportsService.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"coverage.html":{},"overview.html":{}}}],["airporttowneng",{"_index":366,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownru",{"_index":367,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownua",{"_index":368,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airport})@apibadrequestresponse({description",{"_index":411,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@apinotfoundresponse({description",{"_index":407,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@apiunauthorizedresponse({description",{"_index":401,"title":{},"body":{"controllers/AirportsController.html":{}}}],["aliases",{"_index":1715,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":229,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["amazing",{"_index":1689,"title":{},"body":{"index.html":{}}}],["amount",{"_index":272,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["amountofseat",{"_index":263,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["apibadrequestresponse",{"_index":126,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":127,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":128,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["apioperation",{"_index":129,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":84,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":56,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["apiproperty({example",{"_index":21,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["apiresponse",{"_index":130,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":131,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags('airlines",{"_index":142,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apitags('airplanes",{"_index":310,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["apitags('airports",{"_index":421,"title":{},"body":{"controllers/AirportsController.html":{}}}],["apitags('app",{"_index":496,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('authentication",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('flights",{"_index":987,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('seats",{"_index":1214,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('sections",{"_index":1268,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags('tickets",{"_index":1381,"title":{},"body":{"controllers/TicketsController.html":{}}}],["apitags('users",{"_index":1509,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":132,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":1666,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":522,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":523,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":482,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1658,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":502,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":512,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arrayunique",{"_index":741,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["arrival",{"_index":780,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["arrivalairport",{"_index":765,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["arrivalairport.airportnameeng",{"_index":1097,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameru",{"_index":1098,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameua",{"_index":1096,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttowneng",{"_index":1101,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownru",{"_index":1102,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownua",{"_index":1100,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.iata",{"_index":1099,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivaltime",{"_index":766,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["async",{"_index":193,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["atr",{"_index":266,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["auth",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":644,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":135,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"guards/RolesGuard.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.decorator.ts",{"_index":1581,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":495,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1108,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":492,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":494,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/roles.guard",{"_index":542,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":570,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1109,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1110,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1134,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":506,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1698,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":491,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":223,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["b2a3#d1c",{"_index":707,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["baby",{"_index":1349,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["backers",{"_index":1690,"title":{},"body":{"index.html":{}}}],["badrequest",{"_index":148,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["badrequest'})@apibody({type",{"_index":403,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{}}}],["badrequest'})@apinotfoundresponse({description",{"_index":88,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["badrequest'})@apiresponse({status",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FlightsController.html":{}}}],["badrequest'})@apiunauthorizedresponse({description",{"_index":293,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AuthController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["badrequest'})@get(':id",{"_index":412,"title":{},"body":{"controllers/AirportsController.html":{}}}],["badrequest'})@useguards(jwtauthguard)@post('reserve",{"_index":1360,"title":{},"body":{"controllers/TicketsController.html":{}}}],["badrequestexception",{"_index":344,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["badrequestexception('airplane",{"_index":353,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["badrequestexception('airport",{"_index":460,"title":{},"body":{"injectables/AirportsService.html":{}}}],["badrequestexception('flight",{"_index":1038,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["badrequestexception('ticket",{"_index":1440,"title":{},"body":{"injectables/TicketsService.html":{}}}],["badrequestexception('user",{"_index":1431,"title":{},"body":{"injectables/TicketsService.html":{}}}],["baggage",{"_index":767,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["bcrypt",{"_index":668,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1558,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(pass",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":686,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.newpassword",{"_index":1565,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.password",{"_index":688,"title":{},"body":{"injectables/AuthService.html":{}}}],["birthday",{"_index":837,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["birthday'})@prop({required",{"_index":1321,"title":{},"body":{"classes/Ticket.html":{}}}],["body",{"_index":117,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["booked",{"_index":868,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":791,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":171,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1708,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1706,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1653,"title":{},"body":{"index.html":{}}}],["business",{"_index":1246,"title":{},"body":{"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["cache",{"_index":546,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":514,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":515,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.registerasync",{"_index":547,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":1146,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1150,"title":{},"body":{"guards/RolesGuard.html":{}}}],["carryonbaggage",{"_index":768,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["catch",{"_index":239,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":1485,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":1482,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(@request",{"_index":1518,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1484,"title":{},"body":{"controllers/UsersController.html":{}}}],["changeuserpassword",{"_index":1529,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassword(userid",{"_index":1538,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassworddto",{"_index":697,"title":{"classes/ChangeUserPasswordDto.html":{}},"body":{"classes/ChangeUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changeuserpassworddto})@useguards(jwtauthguard)@patch('/changepassword",{"_index":1489,"title":{},"body":{"controllers/UsersController.html":{}}}],["child",{"_index":1348,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["citizenship",{"_index":848,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenship'})@prop({required",{"_index":1326,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenship'})@prop({trim",{"_index":1323,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenshipeng",{"_index":838,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipru",{"_index":839,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipua",{"_index":840,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["class",{"_index":0,"title":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["class'})@prop({required",{"_index":1239,"title":{},"body":{"classes/Section.html":{}}}],["class.economy",{"_index":833,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_airlinesmodule",{"_index":174,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_exports",{"_index":176,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_imports",{"_index":175,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_providers",{"_index":177,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule",{"_index":319,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_exports",{"_index":320,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_providers",{"_index":321,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airportsmodule",{"_index":429,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_exports",{"_index":431,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_providers",{"_index":430,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":504,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":505,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":631,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":632,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":633,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":899,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":901,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":900,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_flightsmodule",{"_index":1001,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_exports",{"_index":1003,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_providers",{"_index":1002,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule",{"_index":1218,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_exports",{"_index":1220,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_providers",{"_index":1219,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule",{"_index":1275,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_exports",{"_index":1276,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_providers",{"_index":1277,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":1392,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":1394,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":1395,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":1393,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1522,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1523,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1524,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compression",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":553,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_limit",{"_index":556,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":554,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":516,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":543,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":517,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache_ttl",{"_index":550,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":650,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":647,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('mongo_db_uri",{"_index":562,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":64,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":199,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(seat.name",{"_index":1232,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1551,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(airlinemodel",{"_index":200,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["constructor(airplanemodel",{"_index":331,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["constructor(airportmodel",{"_index":441,"title":{},"body":{"injectables/AirportsService.html":{}}}],["constructor(authservice",{"_index":1136,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(flightmodel",{"_index":1015,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(jwtservice",{"_index":1147,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(private",{"_index":144,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["constructor(seatmodel",{"_index":1226,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(sectionmodel",{"_index":1287,"title":{},"body":{"injectables/SectionsService.html":{}}}],["constructor(ticketmodel",{"_index":1411,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(usermodel",{"_index":1536,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":1113,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersservice",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":1153,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1162,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1161,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1163,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('airlines",{"_index":143,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["controller('airplanes",{"_index":311,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["controller('airports",{"_index":422,"title":{},"body":{"controllers/AirportsController.html":{}}}],["controller('auth",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('flights",{"_index":988,"title":{},"body":{"controllers/FlightsController.html":{}}}],["controller('seats",{"_index":1215,"title":{},"body":{"controllers/SeatsController.html":{}}}],["controller('sections",{"_index":1269,"title":{},"body":{"controllers/SectionsController.html":{}}}],["controller('tickets",{"_index":1382,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":1510,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":72,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["cookieextractor",{"_index":1122,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":370,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["coverage",{"_index":1568,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":76,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["create(@body",{"_index":312,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["create(airlinedto",{"_index":81,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["create(airplanedto",{"_index":289,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["create(airportdto",{"_index":398,"title":{},"body":{"controllers/AirportsController.html":{}}}],["create(flightdto",{"_index":956,"title":{},"body":{"controllers/FlightsController.html":{}}}],["create(sectiondto",{"_index":1251,"title":{},"body":{"controllers/SectionsController.html":{}}}],["create(ticketdto",{"_index":1356,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createairline",{"_index":194,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairline(airlinedto",{"_index":205,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairlinedto",{"_index":82,"title":{"classes/CreateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["createairlinedto})@post()@roles('admin')@useinterceptors(undefined",{"_index":91,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["createairplane",{"_index":326,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplane(airplanedto",{"_index":334,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplanedto",{"_index":290,"title":{"classes/CreateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["createairplanedto})@roles('admin')@post",{"_index":294,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["createairport",{"_index":436,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairport(airportdto",{"_index":444,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairportdto",{"_index":399,"title":{"classes/CreateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["createairportdto})@roles('admin')@post",{"_index":404,"title":{},"body":{"controllers/AirportsController.html":{}}}],["createfile",{"_index":905,"title":{},"body":{"injectables/FilesService.html":{}}}],["createfile(folder",{"_index":906,"title":{},"body":{"injectables/FilesService.html":{}}}],["createflight",{"_index":1008,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflight(flightdto",{"_index":1018,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflightdto",{"_index":762,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["createflightdto})@roles('admin')@post",{"_index":959,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createseatdto",{"_index":815,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["createsection",{"_index":1282,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsection(sectiondto",{"_index":1290,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsectiondto",{"_index":818,"title":{"classes/CreateSectionDto.html":{}},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["createsectiondto})@roles('admin')@post",{"_index":1254,"title":{},"body":{"controllers/SectionsController.html":{}}}],["createticket",{"_index":1406,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticket(ticketdto",{"_index":1415,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticketdto",{"_index":834,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createticketdto})@apinotfoundresponse({description",{"_index":1359,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createuser",{"_index":1530,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(userdto",{"_index":1540,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":592,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@post('signup",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["data",{"_index":102,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data'})@apinotfoundresponse({description",{"_index":107,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data'})@apiresponse({status",{"_index":113,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data.dto",{"_index":1505,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.dto.ts",{"_index":1461,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["declarations",{"_index":170,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":20,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles",{"_index":1157,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":1193,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":77,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":162,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["delete(@param('id",{"_index":163,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(@request",{"_index":1520,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":96,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(req",{"_index":1491,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteairline",{"_index":195,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairline(airlineid",{"_index":208,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairplane",{"_index":327,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairplane(airplaneid",{"_index":336,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairport",{"_index":437,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteairport(airportid",{"_index":446,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteflight",{"_index":1009,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deleteflight(flightid",{"_index":1020,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deletesection",{"_index":1283,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deletesection(sectionid",{"_index":1292,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deleteuser",{"_index":1531,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1542,"title":{},"body":{"injectables/UsersService.html":{}}}],["departure",{"_index":797,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["departureairport",{"_index":769,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["departureairport.airportnameeng",{"_index":1086,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameru",{"_index":1087,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameua",{"_index":1085,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttowneng",{"_index":1090,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownru",{"_index":1091,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownua",{"_index":1089,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.iata",{"_index":1088,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departuretime",{"_index":770,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["dependencies",{"_index":168,"title":{"dependencies.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deptime",{"_index":1183,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["description",{"_index":26,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["descriptioneng",{"_index":13,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionru",{"_index":14,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionua",{"_index":15,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["development",{"_index":1667,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1350,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["dmitry",{"_index":856,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{}}}],["document",{"_index":58,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["document'})@prop({required",{"_index":1328,"title":{},"body":{"classes/Ticket.html":{}}}],["documentation",{"_index":1569,"title":{},"body":{"coverage.html":{}}}],["dto/change",{"_index":1506,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":138,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["dto/search",{"_index":984,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dto/update",{"_index":140,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":886,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["e2e",{"_index":1678,"title":{},"body":{"index.html":{}}}],["economy",{"_index":824,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1654,"title":{},"body":{"index.html":{}}}],["efremov",{"_index":860,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["email",{"_index":666,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["endof('day",{"_index":1080,"title":{},"body":{"injectables/FlightsService.html":{}}}],["english",{"_index":27,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["entities/airlines.entity",{"_index":141,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{}}}],["entities/airplane.entity",{"_index":309,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{}}}],["entities/airport.entity",{"_index":420,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{}}}],["entities/flights.entity",{"_index":986,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{}}}],["entities/seat.entity",{"_index":1211,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["entities/section.entity",{"_index":831,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{}}}],["entities/ticket.entity",{"_index":879,"title":{},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/users.entity",{"_index":1508,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":910,"title":{},"body":{"injectables/FilesService.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1639,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["envfilepath",{"_index":544,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["err",{"_index":240,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":921,"title":{},"body":{"injectables/FilesService.html":{}}}],["example",{"_index":62,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["exchange",{"_index":771,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["exchange'})@prop",{"_index":938,"title":{},"body":{"classes/Flight.html":{}}}],["exec",{"_index":226,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":1151,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exists",{"_index":230,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["expiresin",{"_index":649,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":60,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":173,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":125,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":83,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["extends",{"_index":718,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["false",{"_index":238,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["female",{"_index":1347,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":920,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname.split('.').pop",{"_index":912,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileextension",{"_index":911,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":123,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["filename",{"_index":233,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{}}}],["filepath",{"_index":914,"title":{},"body":{"injectables/FilesService.html":{}}}],["files.service",{"_index":903,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":537,"title":{},"body":{"modules/AppModule.html":{}}}],["files/files.service",{"_index":220,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["filesmodule",{"_index":178,"title":{"modules/FilesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":202,"title":{"injectables/FilesService.html":{}},"body":{"injectables/AirlinesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":242,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["find(@request",{"_index":1386,"title":{},"body":{"controllers/TicketsController.html":{}}}],["find(req",{"_index":1363,"title":{},"body":{"controllers/TicketsController.html":{}}}],["findall",{"_index":78,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(airlineid",{"_index":243,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyid(airplane._id",{"_index":348,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airplaneid",{"_index":351,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airportid",{"_index":458,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyid(flight.airplane",{"_index":1433,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(flightid",{"_index":1040,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyid(sectionid",{"_index":1306,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyid(ticketdto.flight",{"_index":1428,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketdto.user",{"_index":1430,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketid",{"_index":1438,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(userid",{"_index":1441,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["findbyidanddelete(airlineid",{"_index":259,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyidanddelete(airplaneid",{"_index":357,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyidanddelete(airportid",{"_index":481,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyidanddelete(flightid",{"_index":1070,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyidanddelete(sectionid",{"_index":1311,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyidanddelete(userid",{"_index":1566,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":79,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":157,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":106,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["first",{"_index":857,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["firstdeptime",{"_index":1173,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["firstname",{"_index":677,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["flagship",{"_index":44,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["flight",{"_index":807,"title":{"classes/Flight.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["flight'})@apiresponse({status",{"_index":957,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@prop({required",{"_index":1331,"title":{},"body":{"classes/Ticket.html":{}}}],["flight.airline",{"_index":1043,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.airplane",{"_index":1046,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivalairport",{"_index":1049,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivaltime",{"_index":1052,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.baggage",{"_index":1054,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.carryonbaggage",{"_index":1056,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departureairport",{"_index":1058,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departuretime",{"_index":1061,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.dto",{"_index":983,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts",{"_index":764,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:13",{"_index":1185,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:16",{"_index":808,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:20",{"_index":1186,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:24",{"_index":776,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:28",{"_index":1184,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:32",{"_index":778,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:40",{"_index":798,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:47",{"_index":800,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:55",{"_index":781,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:62",{"_index":787,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":812,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:74",{"_index":790,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:79",{"_index":795,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:83",{"_index":804,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:87",{"_index":810,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.exchange",{"_index":1063,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.flightname",{"_index":1064,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.name",{"_index":1006,"title":{},"body":{"modules/FlightsModule.html":{},"modules/TicketsModule.html":{}}}],["flight.refund",{"_index":1066,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.save",{"_index":1069,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.taxa",{"_index":1068,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdocument",{"_index":948,"title":{},"body":{"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["flightdto",{"_index":961,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flightdto.airline",{"_index":1042,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airline.tostring",{"_index":1044,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane",{"_index":1045,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane.tostring",{"_index":1047,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport",{"_index":1048,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport.tostring",{"_index":1050,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivaltime",{"_index":1051,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.baggage",{"_index":1053,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.carryonbaggage",{"_index":1055,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport",{"_index":1057,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport.tostring",{"_index":1059,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departuretime",{"_index":1060,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.exchange",{"_index":1062,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.flightname",{"_index":1037,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.refund",{"_index":1065,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.taxa",{"_index":1067,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightid",{"_index":1022,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightmodel",{"_index":1017,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["flightname",{"_index":772,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["flights",{"_index":953,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apiresponse({status",{"_index":964,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":1005,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.service",{"_index":982,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["flightschema",{"_index":949,"title":{},"body":{"classes/Flight.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["flightscontroller",{"_index":951,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":507,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["flightsservice",{"_index":981,"title":{"injectables/FlightsService.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"coverage.html":{},"overview.html":{}}}],["flight})@apibadrequestresponse({description",{"_index":958,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@apinotfoundresponse({description",{"_index":962,"title":{},"body":{"controllers/FlightsController.html":{}}}],["folder",{"_index":219,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{}}}],["forwardref",{"_index":637,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":244,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1652,"title":{},"body":{"index.html":{}}}],["free",{"_index":1191,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/enumerations.html":{}}}],["fs",{"_index":908,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.existssync(filepath",{"_index":916,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.mkdirsync(filepath",{"_index":917,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.writefilesync(path.join(filepath",{"_index":919,"title":{},"body":{"injectables/FilesService.html":{}}}],["function",{"_index":1123,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1646,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuse",{"_index":1032,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(initialflights",{"_index":1092,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(result",{"_index":1103,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.js",{"_index":1033,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["fuse.search(flightdto.arrival).map((r",{"_index":1104,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.search(flightdto.departure).map((r",{"_index":1093,"title":{},"body":{"injectables/FlightsService.html":{}}}],["get(':id",{"_index":156,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":499,"title":{},"body":{"controllers/AppController.html":{}}}],["getairlinebyid",{"_index":196,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairlinebyid(airlineid",{"_index":211,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairplanebyid",{"_index":328,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairplanebyid(airplaneid",{"_index":339,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairportbyid",{"_index":438,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getairportbyid(airportid",{"_index":449,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallairlines",{"_index":197,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getallairplanes",{"_index":329,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getallairports",{"_index":439,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallflights",{"_index":1010,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getallsections",{"_index":1284,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getalltickets",{"_index":1407,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getallusers",{"_index":1532,"title":{},"body":{"injectables/UsersService.html":{}}}],["getflightbyid",{"_index":1011,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getflightbyid(flightid",{"_index":1024,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getprofile",{"_index":484,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":500,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":485,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(userid",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsectionbyid",{"_index":1285,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getsectionbyid(sectionid",{"_index":1296,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getticketbyid",{"_index":1408,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getticketbyid(userid",{"_index":1418,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getting",{"_index":1648,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":1533,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1545,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1534,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":1547,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1685,"title":{},"body":{"index.html":{}}}],["gte",{"_index":1072,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["guard",{"_index":1143,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1144,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["hand",{"_index":793,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["hashpassword",{"_index":687,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["helmet",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1695,"title":{},"body":{"index.html":{}}}],["hours",{"_index":1076,"title":{},"body":{"injectables/FlightsService.html":{}}}],["httpexception",{"_index":216,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('no",{"_index":1168,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpexception('password",{"_index":1562,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception(err",{"_index":241,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1702,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":217,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":231,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":1170,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpstatus.internal_server_error",{"_index":924,"title":{},"body":{"injectables/FilesService.html":{}}}],["httpstatus.not_found",{"_index":245,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["iata",{"_index":369,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{}}}],["iata'})@prop({required",{"_index":389,"title":{},"body":{"classes/Airport.html":{}}}],["id",{"_index":101,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1570,"title":{},"body":{"coverage.html":{}}}],["iev",{"_index":388,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["ignoreexpiration",{"_index":1130,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":1158,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":183,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apibody({type",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["includescore",{"_index":1083,"title":{},"body":{"injectables/FlightsService.html":{}}}],["incorrect",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["initialflights",{"_index":1071,"title":{},"body":{"injectables/FlightsService.html":{}}}],["inject",{"_index":551,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":189,"title":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":190,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":218,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(airline.name",{"_index":221,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["injectmodel(airplane.name",{"_index":345,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(airport.name",{"_index":454,"title":{},"body":{"injectables/AirportsService.html":{}}}],["injectmodel(flight.name",{"_index":1035,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(seat.name",{"_index":1301,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(section.name",{"_index":1300,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(ticket.name",{"_index":1426,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectmodel(user.name",{"_index":1427,"title":{},"body":{"injectables/TicketsService.html":{}}}],["installation",{"_index":1663,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1665,"title":{},"body":{"index.html":{}}}],["international",{"_index":24,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["isarray",{"_index":742,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isarray()@arrayunique()@isnotempty()@apiproperty({example",{"_index":739,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isboolean",{"_index":813,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isboolean()@isnotempty()@apiproperty({example",{"_index":792,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isemail",{"_index":897,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":877,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(sex",{"_index":880,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(status",{"_index":883,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(type",{"_index":881,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isin",{"_index":830,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isin([class.business",{"_index":832,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["ismongoid",{"_index":814,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["ismongoid()@isnotempty()@apiproperty({example",{"_index":777,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isnotempty",{"_index":714,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@apiproperty({example",{"_index":782,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@isemail()@apiproperty({example",{"_index":885,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isenum(sex)@apiproperty({example",{"_index":864,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(status)@apiproperty({example",{"_index":867,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(type)@apiproperty({example",{"_index":870,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isin(undefined)@apiproperty({example",{"_index":823,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@ismongoid()@apiproperty({example",{"_index":775,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({example",{"_index":737,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isnotempty()@isphonenumber()@apiproperty({example",{"_index":893,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":731,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@isstring()@isuppercase()@length(2",{"_index":755,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["isnotempty()@isstring()@matches('^(?=.*?[a",{"_index":702,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":743,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({example",{"_index":811,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isoptional",{"_index":733,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@apiproperty({example",{"_index":801,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@isstring()@apiproperty({example",{"_index":724,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["isphonenumber",{"_index":898,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":715,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":727,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@length(7",{"_index":852,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isuppercase",{"_index":758,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["join",{"_index":528,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":493,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1129,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":640,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":645,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":634,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1699,"title":{},"body":{"index.html":{}}}],["keys",{"_index":1084,"title":{},"body":{"injectables/FlightsService.html":{}}}],["kiev",{"_index":382,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["last",{"_index":861,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lastname",{"_index":679,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lax",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{}}}],["legend",{"_index":169,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":759,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["length(2",{"_index":760,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["length(7",{"_index":882,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["license",{"_index":1705,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1682,"title":{},"body":{"index.html":{}}}],["limit",{"_index":555,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1140,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":608,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":635,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":602,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto})@apibadrequestresponse({description",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["logo",{"_index":16,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["logo'})@prop({required",{"_index":49,"title":{},"body":{"classes/Airline.html":{}}}],["logout",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["lte",{"_index":1079,"title":{},"body":{"injectables/FlightsService.html":{}}}],["luggage",{"_index":794,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["luggage'})@prop({required",{"_index":934,"title":{},"body":{"classes/Flight.html":{}}}],["mail",{"_index":887,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["mail'})@prop({required",{"_index":1463,"title":{},"body":{"classes/User.html":{}}}],["male",{"_index":865,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1607,"title":{},"body":{"dependencies.html":{}}}],["match",{"_index":1081,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":716,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matches('^(?=.*?[a",{"_index":720,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matching",{"_index":68,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":75,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":1638,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1516,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["mismatch'})@apiunauthorizedresponse({description",{"_index":1488,"title":{},"body":{"controllers/UsersController.html":{}}}],["mit",{"_index":1681,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1671,"title":{},"body":{"index.html":{}}}],["model",{"_index":201,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":165,"title":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":167,"title":{"modules.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1034,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["moment(flightdto.deptime",{"_index":1073,"title":{},"body":{"injectables/FlightsService.html":{}}}],["moment(flightdto.firstdeptime",{"_index":1105,"title":{},"body":{"injectables/FlightsService.html":{}}}],["moment(flightdto.seconddeptime",{"_index":1106,"title":{},"body":{"injectables/FlightsService.html":{}}}],["mongoose",{"_index":59,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":283,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["mongoose.types.objectid",{"_index":926,"title":{},"body":{"classes/Flight.html":{},"classes/Seat.html":{},"classes/Ticket.html":{}}}],["mongoosemodule",{"_index":184,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":187,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":560,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1694,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1700,"title":{},"body":{"index.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name'})@prop({required",{"_index":268,"title":{},"body":{"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["name'})@prop({unique",{"_index":378,"title":{},"body":{"classes/Airport.html":{}}}],["nest",{"_index":1659,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1704,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":122,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":518,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":524,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":641,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":712,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":55,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":639,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":124,"title":{},"body":{"controllers/AirlinesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":526,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":57,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":521,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":228,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":700,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["newpasswordequals",{"_index":1560,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":1651,"title":{},"body":{"index.html":{}}}],["notavailable",{"_index":1198,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["notfound",{"_index":149,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["notfound'})@apibadrequestresponse({description",{"_index":970,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["notfound'})@apiresponse({status",{"_index":108,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["notfound'})@apiunauthorizedresponse({description",{"_index":89,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["notfound'})@get(':id",{"_index":301,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["npm",{"_index":1664,"title":{},"body":{"index.html":{}}}],["null",{"_index":788,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":270,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["number'})@prop({required",{"_index":1469,"title":{},"body":{"classes/User.html":{}}}],["numberofseat",{"_index":841,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["objectid",{"_index":97,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":1154,"title":{},"body":{"guards/RolesGuard.html":{}}}],["occurred",{"_index":922,"title":{},"body":{"injectables/FilesService.html":{}}}],["october",{"_index":41,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["ok",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["ok'})@useguards(jwtauthguard)@post('logout",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{}}}],["old",{"_index":1563,"title":{},"body":{"injectables/UsersService.html":{}}}],["oldpassword",{"_index":701,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["open",{"_index":1683,"title":{},"body":{"index.html":{}}}],["operating",{"_index":40,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionsforarrival",{"_index":1095,"title":{},"body":{"injectables/FlightsService.html":{}}}],["optionsfordeparture",{"_index":1082,"title":{},"body":{"injectables/FlightsService.html":{}}}],["out",{"_index":181,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out'})@apiunauthorizedresponse({description",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1709,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1590,"title":{"dependencies.html":{}},"body":{}}],["paid",{"_index":1196,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":119,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":1387,"title":{},"body":{"controllers/TicketsController.html":{}}}],["parameters",{"_index":93,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1601,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":711,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["partialtype(createairlinedto",{"_index":1448,"title":{},"body":{"classes/UpdateAirlineDto.html":{}}}],["partialtype(createairplanedto",{"_index":1450,"title":{},"body":{"classes/UpdateAirplaneDto.html":{}}}],["partialtype(createairportdto",{"_index":1452,"title":{},"body":{"classes/UpdateAirportDto.html":{}}}],["partialtype(createflightdto",{"_index":1182,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["partialtype(createseatdto",{"_index":1315,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["partialtype(createsectiondto",{"_index":1456,"title":{},"body":{"classes/UpdateSectionDto.html":{}}}],["partialtype(createticketdto",{"_index":1458,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["partialtype(createuserdto",{"_index":719,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["pass",{"_index":664,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1120,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":638,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1118,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1127,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password'})@apiresponse({status",{"_index":1486,"title":{},"body":{"controllers/UsersController.html":{}}}],["password'})@prop({required",{"_index":1467,"title":{},"body":{"classes/User.html":{}}}],["password.dto",{"_index":1507,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":699,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:12",{"_index":710,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["password.dto.ts:18",{"_index":708,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["passwordequals",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":1564,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":118,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["patch('/changepassword",{"_index":1517,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/update",{"_index":1513,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":159,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["patch(':id/update",{"_index":1216,"title":{},"body":{"controllers/SeatsController.html":{}}}],["path",{"_index":350,"title":{},"body":{"injectables/AirplanesService.html":{},"modules/AppModule.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["path.resolve(__dirname",{"_index":915,"title":{},"body":{"injectables/FilesService.html":{}}}],["payload",{"_index":671,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["phone",{"_index":895,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["phonenumber",{"_index":681,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":1692,"title":{},"body":{"index.html":{}}}],["populate",{"_index":349,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["post",{"_index":116,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["post('logout",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reserve",{"_index":1383,"title":{},"body":{"controllers/TicketsController.html":{}}}],["post('search",{"_index":990,"title":{},"body":{"controllers/FlightsController.html":{}}}],["post('searchrange",{"_index":994,"title":{},"body":{"controllers/FlightsController.html":{}}}],["post('signin",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":821,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["price'})@prop({required",{"_index":1241,"title":{},"body":{"classes/Section.html":{}}}],["private",{"_index":222,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env}.env",{"_index":545,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["production",{"_index":1673,"title":{},"body":{"index.html":{}}}],["profile",{"_index":497,"title":{},"body":{"controllers/AppController.html":{}}}],["profile'})@useguards(jwtauthguard)@get('profile",{"_index":486,"title":{},"body":{"controllers/AppController.html":{}}}],["progressive",{"_index":1650,"title":{},"body":{"index.html":{}}}],["project",{"_index":1684,"title":{},"body":{"index.html":{}}}],["promise",{"_index":207,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":52,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["properties'})@prop",{"_index":932,"title":{},"body":{"classes/Flight.html":{}}}],["provide",{"_index":567,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":172,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["ps",{"_index":805,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["public",{"_index":192,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["r.item",{"_index":1094,"title":{},"body":{"injectables/FlightsService.html":{}}}],["range",{"_index":993,"title":{},"body":{"controllers/FlightsController.html":{},"classes/SearchFlightByRangeDto.html":{}}}],["range'})@apinotfoundresponse({description",{"_index":975,"title":{},"body":{"controllers/FlightsController.html":{}}}],["range.dto",{"_index":985,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["range.dto.ts",{"_index":1172,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{},"coverage.html":{}}}],["range.dto.ts:13",{"_index":1176,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["range.dto.ts:20",{"_index":1178,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["range.dto.ts:27",{"_index":1181,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["range.dto.ts:35",{"_index":1175,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["read",{"_index":1693,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":145,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":918,"title":{},"body":{"injectables/FilesService.html":{}}}],["ref",{"_index":278,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["reflect",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1148,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refund",{"_index":773,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["repository",{"_index":1662,"title":{},"body":{"index.html":{}}}],["req",{"_index":488,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["req.cookies",{"_index":1125,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.cookies['access_token",{"_index":1126,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1165,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":489,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":63,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":1159,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1166,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["resbody",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":180,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":67,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":69,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":153,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["return'})@prop",{"_index":941,"title":{},"body":{"classes/Flight.html":{}}}],["return(@request",{"_index":1390,"title":{},"body":{"controllers/TicketsController.html":{}}}],["return(req",{"_index":1371,"title":{},"body":{"controllers/TicketsController.html":{}}}],["returned",{"_index":1197,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["returns",{"_index":95,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnticket",{"_index":1409,"title":{},"body":{"injectables/TicketsService.html":{}}}],["returnticket(userid",{"_index":1421,"title":{},"body":{"injectables/TicketsService.html":{}}}],["rimraf",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":675,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@prop({required",{"_index":1471,"title":{},"body":{"classes/User.html":{}}}],["role.user",{"_index":1477,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":133,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":151,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["roles_key",{"_index":1156,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":541,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["rs123456",{"_index":854,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["run",{"_index":1668,"title":{},"body":{"index.html":{}}}],["russian",{"_index":34,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["rxjs",{"_index":1155,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":685,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["samesite",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":1655,"title":{},"body":{"index.html":{}}}],["schema",{"_index":53,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":54,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(airline",{"_index":66,"title":{},"body":{"classes/Airline.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airplane",{"_index":285,"title":{},"body":{"classes/Airplane.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airport",{"_index":394,"title":{},"body":{"classes/Airport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(flight",{"_index":950,"title":{},"body":{"classes/Flight.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(seat",{"_index":1201,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(section",{"_index":1248,"title":{},"body":{"classes/Section.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ticket",{"_index":1352,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1478,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":954,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(@body",{"_index":991,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(flightdto",{"_index":967,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchbyrange",{"_index":955,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchbyrange(@body",{"_index":995,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchbyrange(flightdto",{"_index":973,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflightbyrangedto",{"_index":974,"title":{"classes/SearchFlightByRangeDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightByRangeDto.html":{},"coverage.html":{}}}],["searchflightbyrangedto})@post('searchrange",{"_index":976,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflightdto",{"_index":968,"title":{"classes/SearchFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["searchflightdto})@post('search",{"_index":971,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflights",{"_index":1012,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflights(flightdto",{"_index":1026,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflightsbyrange",{"_index":1013,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflightsbyrange(flightdto",{"_index":1028,"title":{},"body":{"injectables/FlightsService.html":{}}}],["seat",{"_index":282,"title":{"classes/Seat.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"coverage.html":{}}}],["seat'})@prop({default",{"_index":1334,"title":{},"body":{"classes/Ticket.html":{}}}],["seat'})@prop({required",{"_index":273,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["seat.dto",{"_index":1210,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts",{"_index":817,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat.dto.ts:17",{"_index":1314,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.name",{"_index":1223,"title":{},"body":{"modules/SeatsModule.html":{},"modules/SectionsModule.html":{}}}],["seat.save",{"_index":1236,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seat.status",{"_index":1235,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatdocument",{"_index":1195,"title":{},"body":{"classes/Seat.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["seatdto",{"_index":1204,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seatdto.status",{"_index":1234,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatid",{"_index":1231,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatmodel",{"_index":1228,"title":{},"body":{"injectables/SeatsService.html":{},"injectables/SectionsService.html":{}}}],["seats",{"_index":822,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["seats'})@prop({trim",{"_index":1243,"title":{},"body":{"classes/Section.html":{}}}],["seats.controller",{"_index":1222,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1213,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":539,"title":{},"body":{"modules/AppModule.html":{}}}],["seatschema",{"_index":1200,"title":{},"body":{"classes/Seat.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seatscontroller",{"_index":1202,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":508,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["seatsservice",{"_index":1212,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["seat})@apinotfoundresponse({description",{"_index":1206,"title":{},"body":{"controllers/SeatsController.html":{}}}],["second",{"_index":1180,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["seconddeptime",{"_index":1174,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{}}}],["secret",{"_index":646,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1131,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":275,"title":{"classes/Section.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateSectionDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{}}}],["section'})@apiresponse({status",{"_index":1252,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@prop({required",{"_index":1189,"title":{},"body":{"classes/Seat.html":{}}}],["section.class",{"_index":1308,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.dto",{"_index":1267,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{}}}],["section.dto.ts",{"_index":820,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["section.dto.ts:10",{"_index":827,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:15",{"_index":825,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:23",{"_index":829,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.name",{"_index":1280,"title":{},"body":{"modules/SectionsModule.html":{}}}],["section.price",{"_index":1309,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.save",{"_index":1310,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondocument",{"_index":1245,"title":{},"body":{"classes/Section.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["sectiondto",{"_index":1256,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{}}}],["sectiondto.class",{"_index":1304,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondto.price",{"_index":1303,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionid",{"_index":1294,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionmodel",{"_index":1289,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sections",{"_index":264,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["sections'})@apiresponse({status",{"_index":1259,"title":{},"body":{"controllers/SectionsController.html":{}}}],["sections'})@prop({trim",{"_index":276,"title":{},"body":{"classes/Airplane.html":{}}}],["sections.controller",{"_index":1279,"title":{},"body":{"modules/SectionsModule.html":{}}}],["sections.service",{"_index":1266,"title":{},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{}}}],["sections/sections.module",{"_index":540,"title":{},"body":{"modules/AppModule.html":{}}}],["sectionschema",{"_index":1247,"title":{},"body":{"classes/Section.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sectionscontroller",{"_index":1249,"title":{"controllers/SectionsController.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"coverage.html":{}}}],["sectionsmodule",{"_index":509,"title":{"modules/SectionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SectionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sectionsservice",{"_index":1265,"title":{"injectables/SectionsService.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{},"overview.html":{}}}],["section})@apibadrequestresponse({description",{"_index":1253,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@apinotfoundresponse({description",{"_index":1257,"title":{},"body":{"controllers/SectionsController.html":{}}}],["secure",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":236,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["selectseatdto",{"_index":1312,"title":{"classes/SelectSeatDto.html":{}},"body":{"classes/SelectSeatDto.html":{},"coverage.html":{}}}],["server",{"_index":1656,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":525,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":557,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata(roles_key",{"_index":1723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sex",{"_index":842,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["sex'})@prop({required",{"_index":1336,"title":{},"body":{"classes/Ticket.html":{}}}],["sheremetyevo/шереметьево/svo",{"_index":779,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["side",{"_index":1657,"title":{},"body":{"index.html":{}}}],["sign",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@request",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(req",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":648,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":1687,"title":{},"body":{"index.html":{}}}],["src/.../airlines.entity.ts",{"_index":1716,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airplane.entity.ts",{"_index":1717,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airport.entity.ts",{"_index":1718,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../files.service.ts",{"_index":1641,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../flights.entity.ts",{"_index":1719,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1647,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seat.entity.ts",{"_index":1644,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../section.entity.ts",{"_index":1640,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ticket.entity.ts",{"_index":1643,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.entity.ts",{"_index":1642,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/airlines.controller.ts",{"_index":73,"title":{},"body":{"controllers/AirlinesController.html":{},"coverage.html":{}}}],["src/airlines/airlines.controller.ts:44",{"_index":92,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:54",{"_index":105,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:62",{"_index":110,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:73",{"_index":115,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:83",{"_index":100,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.module.ts",{"_index":182,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/airlines/airlines.service.ts",{"_index":191,"title":{},"body":{"injectables/AirlinesService.html":{},"coverage.html":{}}}],["src/airlines/airlines.service.ts:11",{"_index":203,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:111",{"_index":209,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:17",{"_index":206,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:50",{"_index":213,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:58",{"_index":212,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:72",{"_index":215,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/dto/create",{"_index":722,"title":{},"body":{"classes/CreateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/dto/update",{"_index":1447,"title":{},"body":{"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/entities/airlines.entity",{"_index":946,"title":{},"body":{"classes/Flight.html":{}}}],["src/airlines/entities/airlines.entity.ts",{"_index":6,"title":{},"body":{"classes/Airline.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/entities/airlines.entity.ts:14",{"_index":39,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:21",{"_index":33,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:28",{"_index":35,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:36",{"_index":48,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:44",{"_index":46,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:52",{"_index":47,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:59",{"_index":50,"title":{},"body":{"classes/Airline.html":{}}}],["src/airplanes/airplanes.controller.ts",{"_index":287,"title":{},"body":{"controllers/AirplanesController.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.controller.ts:39",{"_index":295,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:46",{"_index":300,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:54",{"_index":302,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:65",{"_index":305,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:75",{"_index":298,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.module",{"_index":1402,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airplanes/airplanes.module.ts",{"_index":322,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["src/airplanes/airplanes.service.ts",{"_index":325,"title":{},"body":{"injectables/AirplanesService.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.service.ts:15",{"_index":332,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:20",{"_index":335,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:36",{"_index":341,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:45",{"_index":340,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:60",{"_index":343,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:82",{"_index":337,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/dto/create",{"_index":734,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/dto/update",{"_index":1449,"title":{},"body":{"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/entities/airplane.entity",{"_index":947,"title":{},"body":{"classes/Flight.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/airplanes/entities/airplane.entity.ts",{"_index":261,"title":{},"body":{"classes/Airplane.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airplanes/entities/airplane.entity.ts:17",{"_index":269,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:21",{"_index":274,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:29",{"_index":279,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airports/airports.controller.ts",{"_index":396,"title":{},"body":{"controllers/AirportsController.html":{},"coverage.html":{}}}],["src/airports/airports.controller.ts:39",{"_index":405,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:46",{"_index":410,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:54",{"_index":413,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:65",{"_index":416,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:75",{"_index":408,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.module",{"_index":1397,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airports/airports.module.ts",{"_index":432,"title":{},"body":{"modules/AirportsModule.html":{}}}],["src/airports/airports.service.ts",{"_index":435,"title":{},"body":{"injectables/AirportsService.html":{},"coverage.html":{}}}],["src/airports/airports.service.ts:117",{"_index":447,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:15",{"_index":442,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:20",{"_index":445,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:47",{"_index":451,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:55",{"_index":450,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:69",{"_index":453,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/dto/create",{"_index":744,"title":{},"body":{"classes/CreateAirportDto.html":{},"coverage.html":{}}}],["src/airports/dto/update",{"_index":1451,"title":{},"body":{"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["src/airports/entities/airport.entity",{"_index":945,"title":{},"body":{"classes/Flight.html":{}}}],["src/airports/entities/airport.entity.ts",{"_index":359,"title":{},"body":{"classes/Airport.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airports/entities/airport.entity.ts:11",{"_index":381,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:18",{"_index":379,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:22",{"_index":380,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:26",{"_index":390,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:33",{"_index":376,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:40",{"_index":372,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:47",{"_index":373,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:54",{"_index":387,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:61",{"_index":384,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:68",{"_index":385,"title":{},"body":{"classes/Airport.html":{}}}],["src/app.controller.ts",{"_index":483,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:15",{"_index":487,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":569,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:63",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1527,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":636,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":661,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":662,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":665,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles",{"_index":134,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":1107,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1133,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1145,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":1149,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:17",{"_index":1152,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1111,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":1114,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:29",{"_index":1117,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1135,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":1139,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":1137,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/files/files.module",{"_index":186,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/files/files.module.ts",{"_index":902,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":904,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/files/files.service.ts:12",{"_index":907,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/flights/dto/create",{"_index":763,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/search",{"_index":1171,"title":{},"body":{"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/update",{"_index":1453,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/entities/flights.entity",{"_index":1345,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/flights/entities/flights.entity.ts",{"_index":925,"title":{},"body":{"classes/Flight.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/flights/entities/flights.entity.ts:16",{"_index":940,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:27",{"_index":927,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:38",{"_index":928,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:50",{"_index":936,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:57",{"_index":937,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:69",{"_index":929,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:76",{"_index":931,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:80",{"_index":944,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:87",{"_index":933,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:91",{"_index":935,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:95",{"_index":939,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:99",{"_index":942,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":952,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:40",{"_index":960,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:50",{"_index":972,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:60",{"_index":977,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:67",{"_index":965,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:75",{"_index":966,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:86",{"_index":980,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:96",{"_index":963,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":1398,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":1004,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service.ts",{"_index":1007,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:153",{"_index":1021,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:172",{"_index":1027,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:19",{"_index":1016,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:233",{"_index":1029,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:24",{"_index":1019,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:56",{"_index":1023,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:72",{"_index":1025,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:91",{"_index":1031,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/main.ts",{"_index":1586,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/seats/dto/create",{"_index":816,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/select",{"_index":1313,"title":{},"body":{"classes/SelectSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/update",{"_index":1454,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["src/seats/entities/seat.entity",{"_index":878,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{}}}],["src/seats/entities/seat.entity.ts",{"_index":1187,"title":{},"body":{"classes/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/seats/entities/seat.entity.ts:30",{"_index":1190,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:34",{"_index":1188,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:38",{"_index":1194,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1203,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:29",{"_index":1209,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module.ts",{"_index":1221,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1224,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:12",{"_index":1230,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:9",{"_index":1227,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/sections/dto/create",{"_index":819,"title":{},"body":{"classes/CreateSectionDto.html":{},"coverage.html":{}}}],["src/sections/dto/update",{"_index":1455,"title":{},"body":{"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["src/sections/entities/section.entity",{"_index":280,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["src/sections/entities/section.entity.ts",{"_index":1238,"title":{},"body":{"classes/Section.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/sections/entities/section.entity.ts:19",{"_index":1242,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:23",{"_index":1240,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:34",{"_index":1244,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/sections.controller.ts",{"_index":1250,"title":{},"body":{"controllers/SectionsController.html":{},"coverage.html":{}}}],["src/sections/sections.controller.ts:39",{"_index":1255,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:46",{"_index":1260,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:54",{"_index":1261,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:65",{"_index":1264,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:75",{"_index":1258,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.module.ts",{"_index":1278,"title":{},"body":{"modules/SectionsModule.html":{}}}],["src/sections/sections.service.ts",{"_index":1281,"title":{},"body":{"injectables/SectionsService.html":{},"coverage.html":{}}}],["src/sections/sections.service.ts:11",{"_index":1288,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:17",{"_index":1291,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:44",{"_index":1295,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:53",{"_index":1297,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:68",{"_index":1299,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:95",{"_index":1293,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/tickets/dto/create",{"_index":835,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/dto/update",{"_index":1457,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/entities/ticket.entity",{"_index":1475,"title":{},"body":{"classes/User.html":{}}}],["src/tickets/entities/ticket.entity.ts",{"_index":1320,"title":{},"body":{"classes/Ticket.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tickets/entities/ticket.entity.ts:100",{"_index":1338,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:107",{"_index":1335,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:39",{"_index":1332,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:47",{"_index":1342,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:51",{"_index":1337,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:55",{"_index":1340,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:59",{"_index":1330,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:63",{"_index":1333,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:67",{"_index":1322,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:74",{"_index":1327,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:81",{"_index":1324,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:88",{"_index":1325,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:92",{"_index":1329,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:96",{"_index":1344,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/tickets.controller.ts",{"_index":1354,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/tickets/tickets.controller.ts:43",{"_index":1361,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:52",{"_index":1370,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:62",{"_index":1366,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:73",{"_index":1377,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:87",{"_index":1373,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.module.ts",{"_index":1396,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/tickets/tickets.service.ts",{"_index":1405,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/tickets/tickets.service.ts:102",{"_index":1424,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:126",{"_index":1422,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:21",{"_index":1413,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:29",{"_index":1416,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:75",{"_index":1417,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:85",{"_index":1420,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/users/dto/change",{"_index":698,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1460,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1462,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/users.entity.ts:19",{"_index":1465,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":1466,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1470,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:31",{"_index":1468,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:35",{"_index":1464,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:39",{"_index":1472,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:50",{"_index":1474,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1480,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:40",{"_index":1498,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1500,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:61",{"_index":1503,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:73",{"_index":1490,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":1494,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":1399,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/users/users.module.ts",{"_index":1525,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":1121,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1528,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1537,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:131",{"_index":1543,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:145",{"_index":1546,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1541,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1544,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1548,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1550,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:89",{"_index":1539,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1669,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1672,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1674,"title":{},"body":{"index.html":{}}}],["started",{"_index":1649,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1661,"title":{},"body":{"index.html":{}}}],["startof('day",{"_index":1074,"title":{},"body":{"injectables/FlightsService.html":{}}}],["statements",{"_index":1571,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":527,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"dependencies.html":{}}}],["status",{"_index":147,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"classes/CreateTicketDto.html":{},"controllers/FlightsController.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["status'})@prop({required",{"_index":1192,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{}}}],["status.booked",{"_index":1316,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{}}}],["status.free",{"_index":1199,"title":{},"body":{"classes/Seat.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["status.notavailable",{"_index":1317,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["status.paid",{"_index":1318,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["status.returned",{"_index":1319,"title":{},"body":{"classes/SelectSeatDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{}}}],["stay",{"_index":1696,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":643,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":642,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1119,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":19,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"injectables/LocalStrategy.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":673,"title":{},"body":{"injectables/AuthService.html":{}}}],["summary",{"_index":146,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1128,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1688,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1707,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1589,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1588,"title":{},"body":{"coverage.html":{}}}],["taxa",{"_index":774,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["taxa'})@prop",{"_index":943,"title":{},"body":{"classes/Flight.html":{}}}],["test",{"_index":1677,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1680,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1679,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":873,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["tests",{"_index":1676,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1686,"title":{},"body":{"index.html":{}}}],["this.airlinemodel",{"_index":224,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.create",{"_index":235,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.findbyid(airlineid).exec",{"_index":246,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinesservice.createairline(airlinedto",{"_index":154,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.deleteairline(id",{"_index":164,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getairlinebyid(id",{"_index":158,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getallairlines",{"_index":155,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.updateairlinedata(id",{"_index":161,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airplanemodel",{"_index":347,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["this.airplanemodel.create",{"_index":346,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanemodel.findbyid(airplaneid).exec",{"_index":352,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanesservice.createairplane(airplanedto",{"_index":313,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.deleteairplane(id",{"_index":317,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getairplanebyid(id",{"_index":315,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getallairplanes",{"_index":314,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.updateairplanedata(id",{"_index":316,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airportmodel",{"_index":455,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.create",{"_index":457,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.findbyid(airportid).exec",{"_index":459,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportsservice.createairport(airportdto",{"_index":423,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.deleteairport(id",{"_index":427,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getairportbyid(id",{"_index":425,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getallairports",{"_index":424,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.updateairportdata(id",{"_index":426,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.authservice.getprofile(req.user._id",{"_index":501,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(req.user",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1142,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.filesservice.createfile(folder.airline",{"_index":234,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.flightmodel",{"_index":1036,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["this.flightmodel.create",{"_index":1039,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(flightid).exec",{"_index":1041,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(ticket.flight).exec",{"_index":1443,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.flightsservice.createflight(flightdto",{"_index":989,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.deleteflight(id",{"_index":1000,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getallflights",{"_index":997,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getflightbyid(id",{"_index":998,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.searchflights(flightdto",{"_index":992,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.searchflightsbyrange(flightdto",{"_index":996,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.updateflightdata(id",{"_index":999,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":683,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":1164,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1160,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seatmodel.findbyid(seatid).exec",{"_index":1233,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatmodel.findbyid(seatid).select",{"_index":1237,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatsservice.updateseatdata(id",{"_index":1217,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.sectionmodel",{"_index":1305,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.create",{"_index":1302,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.findbyid(sectionid).exec",{"_index":1307,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionsservice.createsection(sectiondto",{"_index":1270,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.deletesection(id",{"_index":1274,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getallsections",{"_index":1271,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getsectionbyid(id",{"_index":1272,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.updatesectiondata(id",{"_index":1273,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.ticketmodel",{"_index":1437,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.create",{"_index":1432,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyid(ticketid).exec",{"_index":1442,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyidanddelete(ticketid).exec",{"_index":1444,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketsservice.createticket(ticketdto",{"_index":1384,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getalltickets",{"_index":1385,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getticketbyid(req.user._id",{"_index":1388,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.returnticket(req.user._id",{"_index":1391,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.updateticketdata(req.user._id",{"_index":1389,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.usermodel",{"_index":1429,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":1552,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1554,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1567,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.getuserbyemail(payload.email",{"_index":1132,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.changeuserpassword(req.user._id",{"_index":1519,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deleteuser(req.user._id",{"_index":1521,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1511,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(userdto.email",{"_index":684,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1512,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(userid",{"_index":670,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuserdata(req.user._id",{"_index":1515,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":519,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":520,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":552,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":227,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":803,"title":{"classes/Ticket.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["ticket'})@apiresponse({status",{"_index":1357,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket.dto",{"_index":1378,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":836,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:18",{"_index":859,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:23",{"_index":874,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:28",{"_index":866,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:33",{"_index":872,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:38",{"_index":858,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:43",{"_index":862,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:48",{"_index":847,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:56",{"_index":851,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:64",{"_index":849,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:72",{"_index":850,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:78",{"_index":855,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:83",{"_index":876,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:88",{"_index":869,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:95",{"_index":863,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.name",{"_index":1403,"title":{},"body":{"modules/TicketsModule.html":{}}}],["ticket.save",{"_index":1446,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticket.status",{"_index":1445,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketdocument",{"_index":1346,"title":{},"body":{"classes/Ticket.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["ticketdto",{"_index":1362,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["ticketid",{"_index":1419,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketmodel",{"_index":1414,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":1355,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{}}}],["tickets'})@apiresponse({status",{"_index":1367,"title":{},"body":{"controllers/TicketsController.html":{}}}],["tickets'})@prop({trim",{"_index":1473,"title":{},"body":{"classes/User.html":{}}}],["tickets.controller",{"_index":1401,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service",{"_index":1380,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["tickets/tickets.module",{"_index":536,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketschema",{"_index":1351,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ticketscontroller",{"_index":1353,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":510,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":1379,"title":{"injectables/TicketsService.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["ticket})@apibody({type",{"_index":1358,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@apinotfoundresponse({description",{"_index":1364,"title":{},"body":{"controllers/TicketsController.html":{}}}],["time",{"_index":786,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["time'})@prop({required",{"_index":930,"title":{},"body":{"classes/Flight.html":{}}}],["toisostring",{"_index":1077,"title":{},"body":{"injectables/FlightsService.html":{}}}],["token",{"_index":1124,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["tostring",{"_index":1078,"title":{},"body":{"injectables/FlightsService.html":{}}}],["touch",{"_index":1697,"title":{},"body":{"index.html":{}}}],["town",{"_index":392,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["town'})@prop({required",{"_index":386,"title":{},"body":{"classes/Airport.html":{}}}],["town'})@prop({trim",{"_index":383,"title":{},"body":{"classes/Airport.html":{}}}],["transformer",{"_index":1609,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":31,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true",{"_index":30,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["try",{"_index":232,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SectionsService.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":549,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1703,"title":{},"body":{"index.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@prop({required",{"_index":1339,"title":{},"body":{"classes/Ticket.html":{}}}],["typealiases",{"_index":1714,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":713,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"dependencies.html":{}}}],["types/cookie",{"_index":1600,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1603,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1660,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["uia",{"_index":22,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["ukraine",{"_index":23,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["ukrainian",{"_index":36,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["ukranian",{"_index":374,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["unauthorized",{"_index":150,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apibadrequestresponse({description",{"_index":402,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/TicketsController.html":{}}}],["unauthorized'})@apibody({type",{"_index":90,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apiokresponse({description",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiresponse({status",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@get(':id')@roles('admin",{"_index":1499,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@get()@roles('admin",{"_index":1497,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@roles('admin')@delete(':id",{"_index":99,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["unauthorized'})@roles('admin')@get",{"_index":1369,"title":{},"body":{"controllers/TicketsController.html":{}}}],["unauthorized'})@useguards(jwtauthguard)@apibody({type",{"_index":1207,"title":{},"body":{"controllers/SeatsController.html":{}}}],["unauthorized'})@useguards(jwtauthguard)@delete",{"_index":1493,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@useguards(jwtauthguard)@delete(':id",{"_index":1372,"title":{},"body":{"controllers/TicketsController.html":{}}}],["unauthorized'})@useguards(jwtauthguard)@get(':id",{"_index":1365,"title":{},"body":{"controllers/TicketsController.html":{}}}],["unauthorizedexception",{"_index":667,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":277,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":1496,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@apibody({type",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{},"controllers/FlightsController.html":{}}}],["undefined})@apinotfoundresponse({description",{"_index":969,"title":{},"body":{"controllers/FlightsController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":1368,"title":{},"body":{"controllers/TicketsController.html":{}}}],["undefined})@get",{"_index":104,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["undefined})@useguards(localauthguard)@post('signin",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["unique",{"_index":38,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/User.html":{}}}],["unit",{"_index":1675,"title":{},"body":{"index.html":{}}}],["up",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["up'})@apibadrequestresponse({description",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":80,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":160,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(id",{"_index":111,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(req",{"_index":1374,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateairlinedata",{"_index":198,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedata(airlineid",{"_index":214,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedto",{"_index":112,"title":{"classes/UpdateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["updateairlinedto})@roles('admin')@patch(':id",{"_index":114,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["updateairplanedata",{"_index":330,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedata(airplaneid",{"_index":342,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedto",{"_index":303,"title":{"classes/UpdateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["updateairplanedto})@roles('admin')@patch(':id",{"_index":304,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["updateairportdata",{"_index":440,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdata(airportid",{"_index":452,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdto",{"_index":414,"title":{"classes/UpdateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["updateairportdto})@roles('admin')@patch(':id",{"_index":415,"title":{},"body":{"controllers/AirportsController.html":{}}}],["updatedata",{"_index":1483,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(@request",{"_index":1514,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(req",{"_index":1501,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateflightdata",{"_index":1014,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdata(flightid",{"_index":1030,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdto",{"_index":978,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updateflightdto})@roles('admin')@patch(':id",{"_index":979,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateseatdata",{"_index":1225,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdata(seatid",{"_index":1229,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdto",{"_index":1205,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updateseatdto})@patch(':id/update",{"_index":1208,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updatesectiondata",{"_index":1286,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondata(sectionid",{"_index":1298,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondto",{"_index":1262,"title":{"classes/UpdateSectionDto.html":{}},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["updatesectiondto})@roles('admin')@patch(':id",{"_index":1263,"title":{},"body":{"controllers/SectionsController.html":{}}}],["updateticketdata",{"_index":1410,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdata(userid",{"_index":1423,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdto",{"_index":1375,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["updateticketdto})@useguards(jwtauthguard)@patch(':id",{"_index":1376,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateuserdata",{"_index":1535,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdata(userid",{"_index":1549,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdatadto",{"_index":1459,"title":{"classes/UpdateUserDataDto.html":{}},"body":{"classes/UpdateUserDataDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdatadto})@useguards(jwtauthguard)@patch('/update",{"_index":1502,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":120,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["uri",{"_index":561,"title":{},"body":{"modules/AppModule.html":{}}}],["useclass",{"_index":568,"title":{},"body":{"modules/AppModule.html":{}}}],["usecreateindex",{"_index":566,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":548,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefindandmodify",{"_index":565,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":490,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":498,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":121,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["useinterceptors(fileinterceptor('logo",{"_index":152,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["usenewurlparser",{"_index":563,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":604,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiresponse({status",{"_index":1492,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@prop({required",{"_index":1341,"title":{},"body":{"classes/Ticket.html":{}}}],["user._id",{"_index":674,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":884,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":889,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":891,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":896,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":888,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":892,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":672,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":678,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.lastname",{"_index":680,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":1404,"title":{},"body":{"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phonenumber",{"_index":682,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":676,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":1167,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.save",{"_index":1435,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["user.tickets.push(ticket._id",{"_index":1434,"title":{},"body":{"injectables/TicketsService.html":{}}}],["userdocument",{"_index":1425,"title":{},"body":{"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":1553,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.firstname",{"_index":1555,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.lastname",{"_index":1556,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.newpassword",{"_index":1561,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.oldpassword",{"_index":1559,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.phonenumber",{"_index":1557,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["userid.tostring",{"_index":1439,"title":{},"body":{"injectables/TicketsService.html":{}}}],["usermodel",{"_index":1412,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1141,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1481,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiresponse({status",{"_index":1495,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1526,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1504,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":531,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":669,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":1400,"title":{},"body":{"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1479,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1115,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":511,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":654,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apinotfoundresponse({description",{"_index":1487,"title":{},"body":{"controllers/UsersController.html":{}}}],["useunifiedtopology",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":909,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["uuid.v4",{"_index":913,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1112,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1138,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1116,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":663,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":717,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{},"dependencies.html":{}}}],["validity",{"_index":843,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["validity'})@prop({required",{"_index":1343,"title":{},"body":{"classes/Ticket.html":{}}}],["value",{"_index":1645,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1577,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1720,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1670,"title":{},"body":{"index.html":{}}}],["website",{"_index":1701,"title":{},"body":{"index.html":{}}}],["writing",{"_index":923,"title":{},"body":{"injectables/FilesService.html":{}}}],["yefremov",{"_index":890,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["you'd",{"_index":1691,"title":{},"body":{"index.html":{}}}],["z])(?=.*?[0",{"_index":704,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*?[a",{"_index":703,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["zhulyani",{"_index":377,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["zhulyani/жуляни/iev",{"_index":796,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightByRangeDto.html":{},"classes/SearchFlightDto.html":{}}}],["zoom",{"_index":179,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Airline.html":{"url":"classes/Airline.html","title":"class - Airline","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/entities/airlines.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                airlineNameUa\n                            \n                            \n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Optional\n                                descriptionRu\n                            \n                            \n                                descriptionUa\n                            \n                            \n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Лого', description: 'Airline logo'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirlineDocument = Airline & Document;\n\n@Schema()\nexport class Airline {\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airlineNameUa: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameEng?: string;\n\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameRu?: string;\n\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  @Prop({ required: true, trim: true })\n  descriptionUa: string;\n\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionEng?: string;\n\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionRu?: string;\n\n  @ApiProperty({\n    example: 'Лого',\n    description: 'Airline logo',\n  })\n  @Prop({ required: true, trim: true })\n  logo: string;\n}\nexport const AirlineSchema = SchemaFactory.createForClass(Airline);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirlinesController.html":{"url":"controllers/AirlinesController.html","title":"controller - AirlinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirlinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airlines\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airlineDto: CreateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airline'})@ApiResponse({status: 200, type: Airline})@ApiBadRequestResponse({description: 'BadRequest'})@ApiNotFoundResponse({description: 'Airline NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: CreateAirlineDto})@Post()@Roles('admin')@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airline'})@ApiResponse({status: 200, type: Airline})@ApiNotFoundResponse({description: 'Airline NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airlines'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airline data'})@ApiNotFoundResponse({description: 'Airline NotFound'})@ApiResponse({status: 200, type: Airline})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airlineDto: UpdateAirlineDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airline data'})@ApiResponse({status: 200, type: Airline})@ApiNotFoundResponse({description: 'Airline NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateAirlineDto})@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\nimport { AirlinesService } from './airlines.service';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Airline } from './entities/airlines.entity';\n\n@ApiTags('Airlines')\n@Controller('airlines')\nexport class AirlinesController {\n  constructor(private readonly airlinesService: AirlinesService) {}\n\n  @ApiOperation({ summary: 'Create a Airline' })\n  @ApiResponse({ status: 200, type: Airline })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiNotFoundResponse({ description: 'Airline NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: CreateAirlineDto })\n  @Post()\n  @Roles('admin')\n  @UseInterceptors(FileInterceptor('logo'))\n  create(\n    @Body() airlineDto: CreateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.createAirline(airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airlines' })\n  @ApiResponse({ status: 200, type: [Airline] })\n  @Get()\n  findAll() {\n    return this.airlinesService.getAllAirlines();\n  }\n\n  @ApiOperation({ summary: 'Get Airline data' })\n  @ApiNotFoundResponse({ description: 'Airline NotFound' })\n  @ApiResponse({ status: 200, type: Airline })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airlinesService.getAirlineById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airline data' })\n  @ApiResponse({ status: 200, type: Airline })\n  @ApiNotFoundResponse({ description: 'Airline NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateAirlineDto })\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airlineDto: UpdateAirlineDto) {\n    return this.airlinesService.updateAirlineData(id, airlineDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airline' })\n  @ApiResponse({ status: 200, type: Airline })\n  @ApiNotFoundResponse({ description: 'Airline NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airlinesService.deleteAirline(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirlinesModule.html":{"url":"modules/AirlinesModule.html","title":"module - AirlinesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirlinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airlines/airlines.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirlinesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { AirlinesController } from './airlines.controller';\nimport { Airline, AirlineSchema } from './entities/airlines.entity';\nimport { FilesModule } from 'src/files/files.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airline.name, schema: AirlineSchema }]),\n    FilesModule,\n  ],\n  controllers: [AirlinesController],\n  providers: [AirlinesService],\n  exports: [AirlinesService],\n})\nexport class AirlinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirlinesService.html":{"url":"injectables/AirlinesService.html","title":"injectable - AirlinesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirlinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirline\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirline\n                            \n                            \n                                    Public\n                                    Async\n                                getAirlineById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirlines\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirlineData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airlineModel: Model, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/airlines/airlines.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airlineModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirline(airlineDto: CreateAirlineDto, logo)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirline(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirlineById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirlineById(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirlines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirlines()\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirlineData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirlineData(airlineId: ObjectId, airlineDto: UpdateAirlineDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { FilesService, Folder } from '../files/files.service';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Airline, AirlineDocument } from './entities/airlines.entity';\n\n@Injectable()\nexport class AirlinesService {\n  constructor(\n    @InjectModel(Airline.name) private airlineModel: Model,\n    private filesService: FilesService,\n  ) {}\n\n  public async createAirline(\n    airlineDto: CreateAirlineDto,\n    logo,\n  ): Promise {\n    let airline = await this.airlineModel\n      .findOne({\n        airlineNameUa: airlineDto.airlineNameUa,\n      })\n      .exec();\n    if (airline) {\n      throw new HttpException(\n        'Airline with this name already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      const fileName = await this.filesService.createFile(Folder.Airline, logo);\n      airline = await this.airlineModel.create({\n        ...airlineDto,\n        logo: fileName,\n      });\n\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirlines(): Promise {\n    const airlines = await this.airlineModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airlines;\n  }\n\n  public async getAirlineById(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n\n  public async updateAirlineData(\n    airlineId: ObjectId,\n    airlineDto: UpdateAirlineDto,\n  ): Promise {\n    let airline = await this.airlineModel.findById(airlineId).exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airlineDto.airlineNameEng) {\n      airline.airlineNameEng = airlineDto.airlineNameEng;\n    }\n    if (airlineDto.airlineNameRu) {\n      airline.airlineNameRu = airlineDto.airlineNameRu;\n    }\n    if (airlineDto.airlineNameUa) {\n      airline.airlineNameUa = airlineDto.airlineNameUa;\n    }\n    if (airlineDto.descriptionEng) {\n      airline.descriptionEng = airlineDto.descriptionEng;\n    }\n    if (airlineDto.descriptionRu) {\n      airline.descriptionRu = airlineDto.descriptionRu;\n    }\n    if (airlineDto.descriptionUa) {\n      airline.descriptionUa = airlineDto.descriptionUa;\n    }\n    await airline.save();\n\n    airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    return airline;\n  }\n\n  public async deleteAirline(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findByIdAndDelete(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airplane.html":{"url":"classes/Airplane.html","title":"class - Airplane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airplane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/entities/airplane.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '45', description: 'Amount Of Seat'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sections', description: 'Sections'})@Prop({trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type AirplaneDocument = Airplane & Document;\n\n@Schema()\nexport class Airplane {\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airplaneName: string;\n\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  @Prop({ required: true })\n  amountOfSeat: number;\n\n  @ApiProperty({ example: 'Sections', description: 'Sections' })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Section',\n  })\n  sections: Section[];\n}\nexport const AirplaneSchema = SchemaFactory.createForClass(Airplane);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirplanesController.html":{"url":"controllers/AirplanesController.html","title":"controller - AirplanesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirplanesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airplanes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airplaneDto: CreateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airplane'})@ApiResponse({status: 200, type: Airplane})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: CreateAirplaneDto})@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airplane'})@ApiResponse({status: 200, type: Airplane})@ApiNotFoundResponse({description: 'Airplane NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airplanes'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airplane data'})@ApiResponse({status: 200, type: Airplane})@ApiNotFoundResponse({description: 'Airplane NotFound'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airplane data'})@ApiResponse({status: 200, type: Airplane})@ApiNotFoundResponse({description: 'Airplane NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateAirplaneDto})@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\nimport { AirplanesService } from './airplanes.service';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Airplane } from './entities/airplane.entity';\n\n@ApiTags('Airplanes')\n@Controller('airplanes')\nexport class AirplanesController {\n  constructor(private readonly airplanesService: AirplanesService) {}\n\n  @ApiOperation({ summary: 'Create a Airplane' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: CreateAirplaneDto })\n  @Roles('admin')\n  @Post()\n  create(@Body() airplaneDto: CreateAirplaneDto) {\n    return this.airplanesService.createAirplane(airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airplanes' })\n  @ApiResponse({ status: 200, type: [Airplane] })\n  @Get()\n  findAll() {\n    return this.airplanesService.getAllAirplanes();\n  }\n\n  @ApiOperation({ summary: 'Get Airplane data' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @ApiNotFoundResponse({ description: 'Airplane NotFound' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airplanesService.getAirplaneById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airplane data' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @ApiNotFoundResponse({ description: 'Airplane NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateAirplaneDto })\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airplaneDto: UpdateAirplaneDto) {\n    return this.airplanesService.updateAirplaneData(id, airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airplane' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @ApiNotFoundResponse({ description: 'Airplane NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airplanesService.deleteAirplane(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirplanesModule.html":{"url":"modules/AirplanesModule.html","title":"module - AirplanesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirplanesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airplanes/airplanes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirplanesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { AirplanesController } from './airplanes.controller';\nimport { Airplane, AirplaneSchema } from './entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Airplane.name, schema: AirplaneSchema },\n    ]),\n  ],\n  controllers: [AirplanesController],\n  providers: [AirplanesService],\n  exports: [AirplanesService],\n})\nexport class AirplanesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirplanesService.html":{"url":"injectables/AirplanesService.html","title":"injectable - AirplanesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirplanesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                getAirplaneById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirplanes\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirplaneData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airplaneModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airplanes/airplanes.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirplane(airplaneDto: CreateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirplane(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirplaneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirplaneById(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirplanes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirplanes()\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirplaneData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirplaneData(airplaneId: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Airplane, AirplaneDocument } from './entities/airplane.entity';\n\n@Injectable()\nexport class AirplanesService {\n  constructor(\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n  ) {}\n\n  public async createAirplane(\n    airplaneDto: CreateAirplaneDto,\n  ): Promise {\n    try {\n      let airplane = await this.airplaneModel.create({ ...airplaneDto });\n      airplane = await this.airplaneModel\n        .findById(airplane._id)\n        .populate({ path: 'sections', select: '-__v' })\n        .select({ __v: false })\n        .exec();\n      return airplane;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirplanes(): Promise {\n    const airplanes = await this.airplaneModel\n      .find()\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplanes;\n  }\n\n  public async getAirplaneById(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n\n  public async updateAirplaneData(\n    airplaneId: ObjectId,\n    airplaneDto: UpdateAirplaneDto,\n  ): Promise {\n    let airplane = await this.airplaneModel.findById(airplaneId).exec();\n    if (!airplane) {\n      throw new BadRequestException('Airplane with this Id not found');\n    }\n\n    if (airplaneDto.airplaneName) {\n      airplane.airplaneName = airplaneDto.airplaneName;\n    }\n    await airplane.save();\n\n    airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplane;\n  }\n\n  public async deleteAirplane(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findByIdAndDelete(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airport.html":{"url":"classes/Airport.html","title":"class - Airport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/entities/airport.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                airportCountryUa\n                            \n                            \n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Optional\n                                airportNameRu\n                            \n                            \n                                airportNameUa\n                            \n                            \n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Optional\n                                airportTownRu\n                            \n                            \n                                airportTownUa\n                            \n                            \n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani', description: 'English airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляны', description: 'Russian airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'IEV', description: 'IATA'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirportDocument = Airport & Document;\n\n@Schema()\nexport class Airport {\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  @Prop({ required: true, unique: true, trim: true })\n  airportNameUa: string;\n\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  @Prop({ unique: true, trim: true })\n  airportNameEng?: string;\n\n  @ApiProperty({ example: 'Жуляны', description: 'Russian airport name' })\n  @Prop({ unique: true, trim: true })\n  airportNameRu?: string;\n\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  @Prop({ required: true, unique: true, trim: true })\n  IATA: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  @Prop({ required: true, trim: true })\n  airportCountryUa: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryRu?: string;\n\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  @Prop({ required: true, trim: true })\n  airportTownUa: string;\n\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownEng?: string;\n\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownRu?: string;\n}\nexport const AirportSchema = SchemaFactory.createForClass(Airport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirportsController.html":{"url":"controllers/AirportsController.html","title":"controller - AirportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airportDto: CreateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airport'})@ApiResponse({status: 200, type: Airport})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBadRequestResponse({description: 'BadRequest'})@ApiBody({type: CreateAirportDto})@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airport'})@ApiResponse({status: 200, type: Airport})@ApiNotFoundResponse({description: 'Airport NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airports'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airport data'})@ApiResponse({status: 200, type: Airport})@ApiBadRequestResponse({description: 'BadRequest'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airport data'})@ApiResponse({status: 200, type: Airport})@ApiNotFoundResponse({description: 'Airport NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateAirportDto})@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\nimport { AirportsService } from './airports.service';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Airport } from './entities/airport.entity';\n\n@ApiTags('Airports')\n@Controller('airports')\nexport class AirportsController {\n  constructor(private readonly airportsService: AirportsService) {}\n\n  @ApiOperation({ summary: 'Create a Airport' })\n  @ApiResponse({ status: 200, type: Airport })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiBody({ type: CreateAirportDto })\n  @Roles('admin')\n  @Post()\n  create(@Body() airportDto: CreateAirportDto) {\n    return this.airportsService.createAirport(airportDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airports' })\n  @ApiResponse({ status: 200, type: [Airport] })\n  @Get()\n  findAll() {\n    return this.airportsService.getAllAirports();\n  }\n\n  @ApiOperation({ summary: 'Get Airport data' })\n  @ApiResponse({ status: 200, type: Airport })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airportsService.getAirportById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airport data' })\n  @ApiResponse({ status: 200, type: Airport })\n  @ApiNotFoundResponse({ description: 'Airport NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateAirportDto })\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airportDto: UpdateAirportDto) {\n    return this.airportsService.updateAirportData(id, airportDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airport' })\n  @ApiResponse({ status: 200, type: Airport })\n  @ApiNotFoundResponse({ description: 'Airport NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airportsService.deleteAirport(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirportsModule.html":{"url":"modules/AirportsModule.html","title":"module - AirportsModule","body":"\n                   \n\n\n\n\n    Modules\n    AirportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AirportsModule_exports\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airports/airports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { AirportsController } from './airports.controller';\nimport { Airport, AirportSchema } from './entities/airport.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airport.name, schema: AirportSchema }]),\n  ],\n  controllers: [AirportsController],\n  providers: [AirportsService],\n  exports: [AirportsService],\n})\nexport class AirportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirportsService.html":{"url":"injectables/AirportsService.html","title":"injectable - AirportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirport\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirport\n                            \n                            \n                                    Public\n                                    Async\n                                getAirportById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirports\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirportData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airports/airports.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirport(airportDto: CreateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirport(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirportById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirportById(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirports()\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirportData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirportData(airportId: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Airport, AirportDocument } from './entities/airport.entity';\n\n@Injectable()\nexport class AirportsService {\n  constructor(\n    @InjectModel(Airport.name) private airportModel: Model,\n  ) {}\n\n  public async createAirport(airportDto: CreateAirportDto): Promise {\n    let airport = await this.airportModel\n      .findOne({\n        IATA: airportDto.IATA,\n      })\n      .exec();\n    if (airport) {\n      throw new HttpException(\n        'Airport with this IATA already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      airport = await this.airportModel.create({ ...airportDto });\n      airport = await this.airportModel\n        .findOne({\n          IATA: airportDto.IATA,\n        })\n        .select({ __v: false })\n        .exec();\n      return airport;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirports(): Promise {\n    const airports = await this.airportModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airports;\n  }\n\n  public async getAirportById(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n\n  public async updateAirportData(\n    airportId: ObjectId,\n    airportDto: UpdateAirportDto,\n  ): Promise {\n    let airport = await this.airportModel.findById(airportId).exec();\n    if (!airport) {\n      throw new BadRequestException('Airport with this Id not found');\n    }\n\n    if (airportDto.IATA) {\n      airport.IATA = airportDto.IATA;\n    }\n    if (airportDto.airportCountryEng) {\n      airport.airportCountryEng = airportDto.airportCountryEng;\n    }\n    if (airportDto.airportCountryUa) {\n      airport.airportCountryUa = airportDto.airportCountryUa;\n    }\n    if (airportDto.airportCountryRu) {\n      airport.airportCountryRu = airportDto.airportCountryRu;\n    }\n    if (airportDto.airportNameEng) {\n      airport.airportNameEng = airportDto.airportNameEng;\n    }\n    if (airportDto.airportNameUa) {\n      airport.airportNameUa = airportDto.airportNameUa;\n    }\n    if (airportDto.airportNameRu) {\n      airport.airportNameRu = airportDto.airportNameRu;\n    }\n    if (airportDto.airportTownEng) {\n      airport.airportTownEng = airportDto.airportTownEng;\n    }\n    if (airportDto.airportTownUa) {\n      airport.airportTownUa = airportDto.airportTownUa;\n    }\n    if (airportDto.airportTownRu) {\n      airport.airportTownRu = airportDto.airportTownRu;\n    }\n    await airport.save();\n\n    airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    return airport;\n  }\n\n  public async deleteAirport(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findByIdAndDelete(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Profile'})@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\nimport { AuthService } from './auth/auth.service';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\n\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Profile' })\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Request() req) {\n    return this.authService.getProfile(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAirlinesModule\n\nAirlinesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirlinesModule\n                        \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            SectionsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AirportsModule } from './airports/airports.module';\nimport { AirlinesModule } from './airlines/airlines.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { TicketsModule } from './tickets/tickets.module';\nimport { FilesModule } from './files/files.module';\nimport { AirplanesModule } from './airplanes/airplanes.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { SectionsModule } from './sections/sections.module';\nimport { RolesGuard } from './auth/guards/roles.guard';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n      cache: true,\n    }),\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        ttl: configService.get('CACHE_TTL'),\n      }),\n      inject: [ConfigService],\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('THROTTLE_TTL'),\n        limit: config.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    // ServeStaticModule.forRoot({\n    //   rootPath: join(__dirname, 'static'),\n    // }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGO_DB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n        useCreateIndex: true,\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    AirportsModule,\n    AirlinesModule,\n    FlightsModule,\n    TicketsModule,\n    FilesModule,\n    AirplanesModule,\n    SeatsModule,\n    SectionsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Log Out'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiOkResponse({description: 'Ok'})@UseGuards(JwtAuthGuard)@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign In'})@ApiBody({type: LoginUserDto})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiResponse({status: 200, type: undefined})@UseGuards(LocalAuthGuard)@Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign Up'})@ApiBadRequestResponse({description: 'BadRequest'})@ApiResponse({status: 200, type: undefined})@ApiBody({type: CreateUserDto})@Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Res,\n  Body,\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiOkResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\n\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { LoginUserDto } from 'src/users/dto/login-user.dto';\nimport { User } from 'src/users/entities/users.entity';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Sign In' })\n  @ApiBody({ type: LoginUserDto })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiResponse({ status: 200, type: [User] })\n  @UseGuards(LocalAuthGuard)\n  @Post('signin')\n  async signIn(@Request() req, @Res({ passthrough: true }) res: Response) {\n    const [resBody, jwt] = await this.authService.signIn(req.user);\n    res.cookie('access_token', jwt, {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return resBody;\n  }\n\n  @ApiOperation({ summary: 'Sign Up' })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiResponse({ status: 200, type: [User] })\n  @ApiBody({ type: CreateUserDto })\n  @Post('signup')\n  async signUp(@Body() userDto: CreateUserDto) {\n    return await this.authService.signUp(userDto);\n  }\n\n  @ApiOperation({ summary: 'Log Out' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiOkResponse({ description: 'Ok' })\n  @UseGuards(JwtAuthGuard)\n  @Post('logout')\n  async logOut(@Res({ passthrough: true }) res: Response) {\n    res.cookie('access_token', '', {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule,\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getProfile(userId: ObjectId) {\n    return this.usersService.getUserById(userId);\n  }\n\n  async signIn(user: any) {\n    const payload = { email: user.email, sub: user._id, role: user.role };\n    return [\n      {\n        userId: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        role: user.role,\n      },\n      this.jwtService.sign(payload),\n    ];\n  }\n\n  async signUp(userDto: CreateUserDto) {\n    let user = await this.usersService.getUserByEmail(userDto.email);\n    if (user) {\n      throw new HttpException(\n        'User with this email already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hashPassword = await bcrypt.hash(userDto.password, salt);\n    user = await this.usersService.createUser({\n      ...userDto,\n      password: hashPassword,\n    });\n    return user;\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.getUserByEmail(email);\n    const passwordEquals = await bcrypt.compare(pass, user.password);\n    if (user && passwordEquals) {\n      return user;\n    }\n    throw new UnauthorizedException({\n      message: 'Incorrect email or password',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangeUserPasswordDto.html":{"url":"classes/ChangeUserPasswordDto.html","title":"class - ChangeUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangeUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-user-password.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'B2a3#d1c*', description: 'New Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            oldPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class ChangeUserPasswordDto extends PartialType(CreateUserDto) {\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'B2a3#d1c*', description: 'New Password' })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirlineDto.html":{"url":"classes/CreateAirlineDto.html","title":"class - CreateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/create-airline.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                    Readonly\n                                airlineNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionRu\n                            \n                            \n                                    Readonly\n                                descriptionUa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateAirlineDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  readonly airlineNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  readonly airlineNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  readonly airlineNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  readonly descriptionUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  readonly descriptionEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  readonly descriptionRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirplaneDto.html":{"url":"classes/CreateAirplaneDto.html","title":"class - CreateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/create-airplane.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                    Readonly\n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@ApiProperty({example: '45', description: 'Amount Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayUnique()@IsNotEmpty()@ApiProperty({example: 'Sections', description: 'Sections'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class CreateAirplaneDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplaneName: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  amountOfSeat: number;\n\n  @IsArray()\n  @ArrayUnique()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Sections',\n    description: 'Sections',\n  })\n  readonly sections: ObjectId[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirportDto.html":{"url":"classes/CreateAirportDto.html","title":"class - CreateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/create-airport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                    Readonly\n                                airportCountryUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameRu\n                            \n                            \n                                    Readonly\n                                airportNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownRu\n                            \n                            \n                                    Readonly\n                                airportTownUa\n                            \n                            \n                                    Readonly\n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Zhulyani', description: 'English airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Жуляны', description: 'Russian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsUppercase()@Length(2, 4)@ApiProperty({example: 'IEV', description: 'IATA'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUppercase,\n  Length,\n} from 'class-validator';\n\nexport class CreateAirportDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  readonly airportNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  readonly airportNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Жуляны',\n    description: 'Russian airport name',\n  })\n  readonly airportNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsUppercase()\n  @Length(2, 4)\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  readonly IATA: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  readonly airportCountryUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  readonly airportCountryEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  readonly airportCountryRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  readonly airportTownUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  readonly airportTownEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  readonly airportTownRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/create-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airline\n                            \n                            \n                                    Readonly\n                                airplane\n                            \n                            \n                                    Readonly\n                                arrivalAirport\n                            \n                            \n                                    Readonly\n                                arrivalTime\n                            \n                            \n                                    Readonly\n                                baggage\n                            \n                            \n                                    Readonly\n                                carryOnBaggage\n                            \n                            \n                                    Readonly\n                                departureAirport\n                            \n                            \n                                    Readonly\n                                departureTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                exchange\n                            \n                            \n                                    Readonly\n                                flightName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                refund\n                            \n                            \n                                    Readonly\n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsMongoId()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '23', description: 'Baggage properties'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsNotEmpty()@ApiProperty({example: 'true', description: 'Hand luggage'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:79\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty({example: '0.7', description: 'Ticket exchange'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'PS-9065', description: 'Flight name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty({example: '0.5', description: 'Ticket return'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '200', description: 'Ticket taxa'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:67\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsMongoId,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class CreateFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  readonly flightName: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  readonly airline: ObjectId;\n\n  @IsMongoId()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplane: ObjectId;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  readonly departureAirport: ObjectId;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly departureTime: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  readonly arrivalAirport: ObjectId;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  readonly arrivalTime: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  readonly taxa: number;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  readonly baggage: number | null;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  readonly carryOnBaggage: boolean;\n\n  @IsOptional()\n  @ApiProperty({ example: '0.7', description: 'Ticket exchange' })\n  readonly exchange?: number | null;\n\n  @IsOptional()\n  @ApiProperty({ example: '0.5', description: 'Ticket return' })\n  readonly refund?: number | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/create-seat.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSeatDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSectionDto.html":{"url":"classes/CreateSectionDto.html","title":"class - CreateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/create-section.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                price\n                            \n                            \n                                    Readonly\n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)@ApiProperty({example: 'economy', description: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '1700', description: 'Section Price'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '90', description: 'Seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { Class } from '../entities/section.entity';\n\nexport class CreateSectionDto {\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  readonly price: number;\n\n  @IsNotEmpty()\n  @IsIn([Class.Business, Class.Economy])\n  @ApiProperty({ example: 'economy', description: 'Class' })\n  readonly class: Class;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  readonly seats: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/create-ticket.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                birthday\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Readonly\n                                citizenshipUa\n                            \n                            \n                                    Readonly\n                                document\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                flight\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                numberOfSeat\n                            \n                            \n                                    Readonly\n                                sex\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                user\n                            \n                            \n                                    Readonly\n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Ukraine', description: 'The English name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Украина', description: 'The Russian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(7, 9)@ApiProperty({example: 'RS123456', description: 'Document'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'PS-9065', description: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Efremov', description: 'Last Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty({example: '23', description: 'Number Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Sex)@ApiProperty({example: 'male', description: 'Sex'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'booked', description: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Type)@ApiProperty({example: 'adult', description: 'Type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'test@gmail.com', description: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:83\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { ObjectId } from 'mongoose';\nimport { Seat } from 'src/seats/entities/seat.entity';\nimport { Sex, Status, Type } from '../entities/ticket.entity';\n\nexport class CreateTicketDto {\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  readonly flight: ObjectId;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  readonly user: ObjectId;\n\n  @IsNotEmpty()\n  @IsEnum(Sex)\n  @ApiProperty({ example: 'male', description: 'Sex' })\n  readonly sex: Sex;\n\n  @IsNotEmpty()\n  @IsEnum(Type)\n  @ApiProperty({ example: 'adult', description: 'Type' })\n  readonly type: Type;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  readonly birthday: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  readonly citizenshipUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  readonly citizenshipEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  readonly citizenshipRu?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(7, 9)\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  readonly document: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  readonly validity: string;\n\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({ example: 'booked', description: 'Status' })\n  readonly status: Status;\n\n  @IsOptional()\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  readonly numberOfSeat?: Seat;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()@ApiProperty({example: 'test@gmail.com', description: 'E-mail'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Yefremov', description: 'Last name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsPhoneNumber()@ApiProperty({example: '380951234567', description: 'Phone number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsPhoneNumber,\n  IsString,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Yefremov', description: 'Last name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsPhoneNumber()\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  readonly phoneNumber: number;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  readonly email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\n\n@Module({\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFile(folder: Folder, file)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport path from 'path';\nimport fs from 'fs';\nimport * as uuid from 'uuid';\n\nexport enum Folder {\n  Airline = 'airline',\n}\n\n@Injectable()\nexport class FilesService {\n  async createFile(folder: Folder, file): Promise {\n    try {\n      const fileExtension = file.originalname.split('.').pop();\n      const fileName = uuid.v4() + '.' + fileExtension;\n      const filePath = path.resolve(__dirname, 'static', folder);\n      if (!fs.existsSync(filePath)) {\n        fs.mkdirSync(filePath, { recursive: true });\n      }\n      fs.writeFileSync(path.join(filePath, fileName), file.buffer);\n      return folder + '/' + fileName;\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while writing the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Flight.html":{"url":"classes/Flight.html","title":"class - Flight","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/entities/flights.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                airplane\n                            \n                            \n                                arrivalAirport\n                            \n                            \n                                arrivalTime\n                            \n                            \n                                baggage\n                            \n                            \n                                carryOnBaggage\n                            \n                            \n                                departureAirport\n                            \n                            \n                                departureTime\n                            \n                            \n                                    Optional\n                                exchange\n                            \n                            \n                                flightName\n                            \n                            \n                                    Optional\n                                refund\n                            \n                            \n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})@Prop({required: true, type: undefined, ref: 'Airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, type: undefined, ref: 'Airplane'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'true', description: 'Hand luggage'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '0.7', description: 'Ticket exchange'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '0.5', description: 'Ticket return'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '200', description: 'Ticket taxa'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:80\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Airport } from 'src/airports/entities/airport.entity';\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\n\nexport type FlightDocument = Flight & Document;\n\n@Schema()\nexport class Flight {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  @Prop({ required: true, unique: true, trim: true })\n  flightName: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airline',\n  })\n  airline: Airline | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airplane',\n  })\n  airplane: Airplane | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  departureAirport: Airport | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  @Prop({ required: true })\n  departureTime: string;\n\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  arrivalAirport: Airport | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  @Prop({ required: true })\n  arrivalTime: string;\n\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  @Prop({})\n  taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  @Prop({})\n  baggage: number | null;\n\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  @Prop({ required: true })\n  carryOnBaggage: boolean;\n\n  @ApiProperty({ example: '0.7', description: 'Ticket exchange' })\n  @Prop({})\n  exchange?: number | null;\n\n  @ApiProperty({ example: '0.5', description: 'Ticket return' })\n  @Prop({})\n  refund?: number | null;\n}\nexport const FlightSchema = SchemaFactory.createForClass(Flight);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                flights\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                search\n                            \n                            \n                                searchByRange\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(flightDto: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Flight'})@ApiResponse({status: 200, type: Flight})@ApiBadRequestResponse({description: 'BadRequest'})@ApiBody({type: CreateFlightDto})@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Flight'})@ApiResponse({status: 200, type: Flight})@ApiNotFoundResponse({description: 'Flight NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Flights'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:67\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Flight data'})@ApiResponse({status: 200, type: Flight})@ApiNotFoundResponse({description: 'Flight NotFound'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(flightDto: SearchFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search Flights'})@ApiResponse({status: 200, type: undefined})@ApiNotFoundResponse({description: 'Flight NotFound'})@ApiBadRequestResponse({description: 'BadRequest'})@ApiBody({type: SearchFlightDto})@Post('search')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            searchByRange\n                        \n                        \n                    \n                \n            \n            \n                \nsearchByRange(flightDto: SearchFlightByRangeDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search Flights by range'})@ApiNotFoundResponse({description: 'Flight NotFound'})@ApiBadRequestResponse({description: 'BadRequest'})@ApiResponse({status: 200, type: undefined})@ApiBody({type: SearchFlightByRangeDto})@Post('searchrange')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightByRangeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Flight data'})@ApiResponse({status: 200, type: Flight})@ApiNotFoundResponse({description: 'Flight NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateFlightDto})@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { SearchFlightByRangeDto } from './dto/search-flight-by-range.dto';\nimport { Flight } from './entities/flights.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Flights')\n@Controller('flights')\nexport class FlightsController {\n  constructor(private readonly flightsService: FlightsService) {}\n\n  @ApiOperation({ summary: 'Create a Flight' })\n  @ApiResponse({ status: 200, type: Flight })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiBody({ type: CreateFlightDto })\n  @Roles('admin')\n  @Post()\n  create(@Body() flightDto: CreateFlightDto) {\n    return this.flightsService.createFlight(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Search Flights' })\n  @ApiResponse({ status: 200, type: [Flight] })\n  @ApiNotFoundResponse({ description: 'Flight NotFound' })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiBody({ type: SearchFlightDto })\n  @Post('search')\n  search(@Body() flightDto: SearchFlightDto) {\n    return this.flightsService.searchFlights(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Search Flights by range' })\n  @ApiNotFoundResponse({ description: 'Flight NotFound' })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiResponse({ status: 200, type: [Flight] })\n  @ApiBody({ type: SearchFlightByRangeDto })\n  @Post('searchrange')\n  searchByRange(@Body() flightDto: SearchFlightByRangeDto) {\n    return this.flightsService.searchFlightsByRange(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Flights' })\n  @ApiResponse({ status: 200, type: [Flight] })\n  @Get()\n  findAll() {\n    return this.flightsService.getAllFlights();\n  }\n\n  @ApiOperation({ summary: 'Get Flight data' })\n  @ApiResponse({ status: 200, type: Flight })\n  @ApiNotFoundResponse({ description: 'Flight NotFound' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.flightsService.getFlightById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Flight data' })\n  @ApiResponse({ status: 200, type: Flight })\n  @ApiNotFoundResponse({ description: 'Flight NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateFlightDto })\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() flightDto: UpdateFlightDto) {\n    return this.flightsService.updateFlightData(id, flightDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Flight' })\n  @ApiResponse({ status: 200, type: Flight })\n  @ApiNotFoundResponse({ description: 'Flight NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.flightsService.deleteFlight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_FlightsModule_exports\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { Flight, FlightSchema } from './entities/flights.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Flight.name, schema: FlightSchema }]),\n  ],\n  controllers: [FlightsController],\n  providers: [FlightsService],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createFlight\n                            \n                            \n                                    Public\n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Public\n                                    Async\n                                getAllFlights\n                            \n                            \n                                    Public\n                                    Async\n                                getFlightById\n                            \n                            \n                                    Public\n                                    Async\n                                searchFlights\n                            \n                            \n                                    Public\n                                    Async\n                                searchFlightsByRange\n                            \n                            \n                                    Public\n                                    Async\n                                updateFlightData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(flightModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:19\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(flightDto: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:153\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllFlights()\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getFlightById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlightById(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            searchFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchFlights(flightDto: SearchFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:172\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            searchFlightsByRange\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchFlightsByRange(flightDto: SearchFlightByRangeDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:233\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightByRangeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateFlightData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlightData(flightId: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:91\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport Fuse from 'fuse.js';\nimport moment from 'moment';\n\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { SearchFlightByRangeDto } from './dto/search-flight-by-range.dto';\nimport { Flight, FlightDocument } from './entities/flights.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(\n    @InjectModel(Flight.name) private flightModel: Model,\n  ) {}\n\n  public async createFlight(flightDto: CreateFlightDto): Promise {\n    let flight = await this.flightModel\n      .findOne({\n        flightName: flightDto.flightName,\n      })\n      .exec();\n    if (flight) {\n      throw new BadRequestException('Flight with this name already exists');\n    }\n\n    try {\n      flight = await this.flightModel.create({ ...flightDto });\n      flight = await this.flightModel\n        .findOne({\n          flightName: flightDto.flightName,\n        })\n        .select({ __v: false })\n        .populate({ path: 'airline', select: '-__v' })\n        .populate({\n          path: 'airplane',\n          select: '-__v',\n          populate: { path: 'sections', select: '-__v' },\n        })\n        .populate({ path: 'departureAirport', select: '-__v' })\n        .populate({ path: 'arrivalAirport', select: '-__v' })\n        .exec();\n      return flight;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllFlights(): Promise {\n    const flights = await this.flightModel\n      .find()\n      .select({ __v: false })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flights;\n  }\n\n  public async getFlightById(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airplane', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n    return flight;\n  }\n\n  public async updateFlightData(\n    flightId: ObjectId,\n    flightDto: UpdateFlightDto,\n  ): Promise {\n    let flight = await this.flightModel.findById(flightId).exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    // if (flightDto.airline) {\n    //   flight.airline = flightDto.airline.toString();\n    // }\n    // if (flightDto.airplane) {\n    //   flight.airplane = flightDto.airplane.toString();\n    // }\n    // if (flightDto.arrivalAirport) {\n    //   flight.arrivalAirport = flightDto.arrivalAirport.toString();\n    // }\n    if (flightDto.arrivalTime) {\n      flight.arrivalTime = flightDto.arrivalTime;\n    }\n    if (flightDto.baggage) {\n      flight.baggage = flightDto.baggage;\n    }\n    if (flightDto.carryOnBaggage) {\n      flight.carryOnBaggage = flightDto.carryOnBaggage;\n    }\n    // if (flightDto.departureAirport) {\n    //   flight.departureAirport = flightDto.departureAirport.toString();\n    // }\n    if (flightDto.departureTime) {\n      flight.departureTime = flightDto.departureTime;\n    }\n    if (flightDto.exchange) {\n      flight.exchange = flightDto.exchange;\n    }\n    if (flightDto.flightName) {\n      flight.flightName = flightDto.flightName;\n    }\n    if (flightDto.refund) {\n      flight.refund = flightDto.refund;\n    }\n    if (flightDto.taxa) {\n      flight.taxa = flightDto.taxa;\n    }\n    await flight.save();\n\n    flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airplane', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async deleteFlight(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findByIdAndDelete(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airplane', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n    return flight;\n  }\n\n  public async searchFlights(flightDto: SearchFlightDto): Promise {\n    const initialFlights = await this.flightModel\n      .find({\n        departureTime: {\n          $gte: moment(flightDto.depTime)\n            .startOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n          $lte: moment(flightDto.depTime)\n            .endOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n        },\n      })\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    const optionsForDeparture = {\n      includeScore: true,\n      keys: [\n        'departureAirport.airportNameUa',\n        'departureAirport.airportNameEng',\n        'departureAirport.airportNameRu',\n        'departureAirport.IATA',\n        'departureAirport.airportTownUa',\n        'departureAirport.airportTownEng',\n        'departureAirport.airportTownRu',\n      ],\n    };\n\n    let fuse = new Fuse(initialFlights, optionsForDeparture);\n    let result = fuse.search(flightDto.departure).map((r) => r.item);\n    const optionsForArrival = {\n      includeScore: true,\n      keys: [\n        'arrivalAirport.airportNameUa',\n        'arrivalAirport.airportNameEng',\n        'arrivalAirport.airportNameRu',\n        'arrivalAirport.IATA',\n        'arrivalAirport.airportTownUa',\n        'arrivalAirport.airportTownEng',\n        'arrivalAirport.airportTownRu',\n      ],\n    };\n\n    fuse = new Fuse(result, optionsForArrival);\n    result = fuse.search(flightDto.arrival).map((r) => r.item);\n    return result;\n  }\n\n  public async searchFlightsByRange(\n    flightDto: SearchFlightByRangeDto,\n  ): Promise {\n    const initialFlights = await this.flightModel\n      .find({\n        departureTime: {\n          $gte: moment(flightDto.firstDepTime)\n            .startOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n          $lte: moment(flightDto.secondDepTime)\n            .endOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n        },\n      })\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    const optionsForDeparture = {\n      includeScore: true,\n      keys: [\n        'departureAirport.airportNameUa',\n        'departureAirport.airportNameEng',\n        'departureAirport.airportNameRu',\n        'departureAirport.IATA',\n        'departureAirport.airportTownUa',\n        'departureAirport.airportTownEng',\n        'departureAirport.airportTownRu',\n      ],\n    };\n\n    let fuse = new Fuse(initialFlights, optionsForDeparture);\n    let result = fuse.search(flightDto.departure).map((r) => r.item);\n    const optionsForArrival = {\n      includeScore: true,\n      keys: [\n        'arrivalAirport.airportNameUa',\n        'arrivalAirport.airportNameEng',\n        'arrivalAirport.airportNameRu',\n        'arrivalAirport.IATA',\n        'arrivalAirport.airportTownUa',\n        'arrivalAirport.airportTownEng',\n        'arrivalAirport.airportTownRu',\n      ],\n    };\n\n    fuse = new Fuse(result, optionsForArrival);\n    result = fuse.search(flightDto.arrival).map((r) => r.item);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\nimport { UsersService } from 'src/users/users.service';\n\nconst cookieExtractor = function (req) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n};\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private userService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: cookieExtractor,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.getUserByEmail(payload.email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles-auth.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    try {\n      const requiredRoles = this.reflector.getAllAndOverride(\n        ROLES_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      if (!requiredRoles) {\n        return true;\n      }\n\n      const req = context.switchToHttp().getRequest();\n      let token = null;\n      if (req && req.cookies) {\n        token = req.cookies['access_token'];\n      }\n\n      const user = this.jwtService.verify(token);\n      req.user = user;\n      return requiredRoles.some((role) => user.role?.includes(role));\n    } catch (e) {\n      throw new HttpException('No access', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFlightByRangeDto.html":{"url":"classes/SearchFlightByRangeDto.html","title":"class - SearchFlightByRangeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFlightByRangeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/search-flight-by-range.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                arrival\n                            \n                            \n                                    Readonly\n                                departure\n                            \n                            \n                                    Readonly\n                                firstDepTime\n                            \n                            \n                                    Readonly\n                                secondDepTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrival\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight-by-range.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight-by-range.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-15T15:35:00.000Z', description: 'First range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight-by-range.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            secondDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-18T15:35:00.000Z', description: 'Second range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight-by-range.dto.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class SearchFlightByRangeDto extends PartialType(CreateFlightDto) {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure',\n  })\n  readonly departure: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-15T15:35:00.000Z',\n    description: 'First range departure time',\n  })\n  readonly firstDepTime: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-18T15:35:00.000Z',\n    description: 'Second range departure time',\n  })\n  readonly secondDepTime: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival',\n  })\n  readonly arrival: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFlightDto.html":{"url":"classes/SearchFlightDto.html","title":"class - SearchFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/search-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                arrival\n                            \n                            \n                                    Readonly\n                                departure\n                            \n                            \n                                    Readonly\n                                depTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrival\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            depTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class SearchFlightDto extends PartialType(CreateFlightDto) {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure',\n  })\n  readonly departure: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly depTime: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival',\n  })\n  readonly arrival: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seat.html":{"url":"classes/Seat.html","title":"class - Seat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/entities/seat.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                number\n                            \n                            \n                                section\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1', description: 'Number of Seat'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Section', description: 'Section'})@Prop({required: true, trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'free', description: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type SeatDocument = Seat & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  Free = 'free',\n  NotAvailable = 'notAvailable',\n}\n\n@Schema()\nexport class Seat {\n  @ApiProperty({\n    example: 'Section',\n    description: 'Section',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Section',\n  })\n  section: Section | mongoose.Types.ObjectId;\n\n  @ApiProperty({ example: '1', description: 'Number of Seat' })\n  @Prop({ required: true, trim: true })\n  number: number;\n\n  @ApiProperty({ example: 'free', description: 'Status' })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Free })\n  status: Status;\n}\nexport const SeatSchema = SchemaFactory.createForClass(Seat);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                seats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Seat data'})@ApiResponse({status: 200, type: Seat})@ApiNotFoundResponse({description: 'Seat NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@UseGuards(JwtAuthGuard)@ApiBody({type: UpdateSeatDto})@Patch(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Patch, UseGuards } from '@nestjs/common';\nimport {\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\nimport { UpdateSeatDto } from './dto/update-seat.dto';\nimport { Seat } from './entities/seat.entity';\nimport { SeatsService } from './seats.service';\n\n@ApiTags('Seats')\n@Controller('seats')\nexport class SeatsController {\n  constructor(private readonly seatsService: SeatsService) {}\n\n  @ApiOperation({ summary: 'Update Seat data' })\n  @ApiResponse({ status: 200, type: Seat })\n  @ApiNotFoundResponse({ description: 'Seat NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @UseGuards(JwtAuthGuard)\n  @ApiBody({ type: UpdateSeatDto })\n  @Patch(':id/update')\n  update(@Param('id') id: ObjectId, @Body() seatDto: UpdateSeatDto) {\n    return this.seatsService.updateSeatData(id, seatDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SeatsModule_exports\n\n\n\n\nSeatsService \n\nSeatsService \n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { Seat, SeatSchema } from './entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SeatsController],\n  providers: [SeatsService],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateSeatData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSeatData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeatData(seatId: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seatId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { UpdateSeatDto } from './dto/update-seat.dto';\nimport { Seat, SeatDocument } from './entities/seat.entity';\n\n@Injectable()\nexport class SeatsService {\n  constructor(@InjectModel(Seat.name) private seatModel: Model) {}\n\n  public async updateSeatData(\n    seatId: ObjectId,\n    seatDto: UpdateSeatDto,\n  ): Promise {\n    let seat = await this.seatModel.findById(seatId).exec();\n    if (!seat) {\n      throw new HttpException(\n        'Seat with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (seatDto.status) {\n      seat.status = seatDto.status;\n    }\n\n    await seat.save();\n    seat = await this.seatModel.findById(seatId).select({ __v: false }).exec();\n    return seat;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Section.html":{"url":"classes/Section.html","title":"class - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/entities/section.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                price\n                            \n                            \n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'economy', description: 'Class'})@Prop({required: true, trim: true, enum: Class})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1700', description: 'Section Price'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '90', description: 'Seats'})@Prop({trim: true, type: undefined, ref: 'Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type SectionDocument = Section & Document;\n\nexport enum Class {\n  Business = 'business',\n  Economy = 'economy',\n}\n\n@Schema()\nexport class Section {\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  @Prop({ required: true, trim: true })\n  price: number;\n\n  @ApiProperty({ example: 'economy', description: 'Class' })\n  @Prop({ required: true, trim: true, enum: Class })\n  class: Class;\n\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Seat',\n  })\n  seats: Seat[];\n}\nexport const SectionSchema = SchemaFactory.createForClass(Section);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SectionsController.html":{"url":"controllers/SectionsController.html","title":"controller - SectionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SectionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sections\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(sectionDto: CreateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Section'})@ApiResponse({status: 200, type: Section})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: CreateSectionDto})@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Section'})@ApiResponse({status: 200, type: Section})@ApiNotFoundResponse({description: 'Section NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Sections'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Section data'})@ApiResponse({status: 200, type: Section})@ApiNotFoundResponse({description: 'Section NotFound'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Section data'})@ApiResponse({status: 200, type: Section})@ApiNotFoundResponse({description: 'Section NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateSectionDto})@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section } from './entities/section.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Sections')\n@Controller('sections')\nexport class SectionsController {\n  constructor(private readonly sectionsService: SectionsService) {}\n\n  @ApiOperation({ summary: 'Create a Section' })\n  @ApiResponse({ status: 200, type: Section })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: CreateSectionDto })\n  @Roles('admin')\n  @Post()\n  create(@Body() sectionDto: CreateSectionDto) {\n    return this.sectionsService.createSection(sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Sections' })\n  @ApiResponse({ status: 200, type: [Section] })\n  @Get()\n  findAll() {\n    return this.sectionsService.getAllSections();\n  }\n\n  @ApiOperation({ summary: 'Get Section data' })\n  @ApiResponse({ status: 200, type: Section })\n  @ApiNotFoundResponse({ description: 'Section NotFound' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.sectionsService.getSectionById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Section data' })\n  @ApiResponse({ status: 200, type: Section })\n  @ApiNotFoundResponse({ description: 'Section NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateSectionDto })\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() sectionDto: UpdateSectionDto) {\n    return this.sectionsService.updateSectionData(id, sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Section' })\n  @ApiResponse({ status: 200, type: Section })\n  @ApiNotFoundResponse({ description: 'Section NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.sectionsService.deleteSection(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SectionsModule.html":{"url":"modules/SectionsModule.html","title":"module - SectionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SectionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\n\nSectionsService \n\nSectionsService \n\n\n\nSectionsModule\n\nSectionsModule\n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sections/sections.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SectionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { SectionsController } from './sections.controller';\nimport { Section, SectionSchema } from './entities/section.entity';\nimport { Seat, SeatSchema } from 'src/seats/entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Section.name, schema: SectionSchema }]),\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SectionsController],\n  providers: [SectionsService],\n  exports: [SectionsService],\n})\nexport class SectionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SectionsService.html":{"url":"injectables/SectionsService.html","title":"injectable - SectionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SectionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createSection\n                            \n                            \n                                    Public\n                                    Async\n                                deleteSection\n                            \n                            \n                                    Public\n                                    Async\n                                getAllSections\n                            \n                            \n                                    Public\n                                    Async\n                                getSectionById\n                            \n                            \n                                    Public\n                                    Async\n                                updateSectionData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sectionModel: Model, seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sections/sections.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSection(sectionDto: CreateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSection(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllSections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllSections()\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getSectionById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionById(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSectionData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSectionData(sectionId: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section, SectionDocument } from './entities/section.entity';\nimport { Seat, SeatDocument } from 'src/seats/entities/seat.entity';\n\n@Injectable()\nexport class SectionsService {\n  constructor(\n    @InjectModel(Section.name) private sectionModel: Model,\n    @InjectModel(Seat.name) private seatModel: Model,\n  ) {}\n\n  public async createSection(sectionDto: CreateSectionDto): Promise {\n    try {\n      let section = await this.sectionModel.create({\n        price: sectionDto.price,\n        class: sectionDto.class,\n        seats: [],\n      });\n      for (let i = 1; i  {\n    const sections = await this.sectionModel\n      .find()\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return sections;\n  }\n\n  public async getSectionById(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findById(sectionId)\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n\n  public async updateSectionData(\n    sectionId: ObjectId,\n    sectionDto: UpdateSectionDto,\n  ): Promise {\n    let section = await this.sectionModel.findById(sectionId).exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (sectionDto.class) {\n      section.class = sectionDto.class;\n    }\n    if (sectionDto.price) {\n      section.price = sectionDto.price;\n    }\n\n    await section.save();\n    section = await this.sectionModel\n      .findById(sectionId)\n      .select({ __v: false })\n      .exec();\n    return section;\n  }\n\n  public async deleteSection(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findByIdAndDelete(sectionId)\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectSeatDto.html":{"url":"classes/SelectSeatDto.html","title":"class - SelectSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/select-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)@ApiProperty({example: 'Booked', description: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/select-seat.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class SelectSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsIn([\n    Status.Booked,\n    Status.Free,\n    Status.NotAvailable,\n    Status.Paid,\n    Status.Returned,\n  ])\n  @ApiProperty({ example: 'Booked', description: 'Class' })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ticket.html":{"url":"classes/Ticket.html","title":"class - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/entities/ticket.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthday\n                            \n                            \n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Optional\n                                citizenshipUa\n                            \n                            \n                                document\n                            \n                            \n                                firstName\n                            \n                            \n                                flight\n                            \n                            \n                                lastName\n                            \n                            \n                                numberOfSeat\n                            \n                            \n                                sex\n                            \n                            \n                                status\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                            \n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'RS123456', description: 'Document'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Dmitry', description: 'First Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight'})@Prop({required: true, type: undefined, ref: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Efremov', description: 'Last Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Number Of Seat'})@Prop({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'male', description: 'Sex'})@Prop({required: true, trim: true, enum: Sex})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'booked', description: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:100\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'adult', description: 'Type'})@Prop({required: true, trim: true, enum: Type})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'User'})@Prop({required: true, type: undefined, ref: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:96\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { User } from 'src/users/entities/users.entity';\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type TicketDocument = Ticket & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  NotAvailable = 'notAvailable',\n}\n\nexport enum Sex {\n  Male = 'male',\n  Female = 'female',\n}\n\nexport enum Type {\n  Adult = 'adult',\n  Child = 'child',\n  Baby = 'baby',\n  Disabled = 'disabled',\n}\n\n@Schema()\nexport class Ticket {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Flight',\n  })\n  flight: Flight | mongoose.Types.ObjectId;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n  })\n  user: User | mongoose.Types.ObjectId;\n\n  @ApiProperty({ example: 'male', description: 'Sex' })\n  @Prop({ required: true, trim: true, enum: Sex })\n  sex: Sex;\n\n  @ApiProperty({ example: 'adult', description: 'Type' })\n  @Prop({ required: true, trim: true, enum: Type })\n  type: Type;\n\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  @Prop({ required: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  @Prop({ required: true })\n  lastName: string;\n\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  @Prop({ required: true })\n  birthday: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  @Prop({ required: true, trim: true })\n  citizenshipUa?: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipRu?: string;\n\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  @Prop({ required: true, trim: true })\n  document: string;\n\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  @Prop({ required: true })\n  validity: string;\n\n  @ApiProperty({ example: 'booked', description: 'Status' })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Booked })\n  status: Status;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  @Prop({ default: null })\n  numberOfSeat: Seat | null;\n}\nexport const TicketSchema = SchemaFactory.createForClass(Ticket);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                findAll\n                            \n                            \n                                return\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(ticketDto: CreateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Ticket'})@ApiResponse({status: 200, type: Ticket})@ApiBody({type: CreateTicketDto})@ApiNotFoundResponse({description: 'Flight or User NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBadRequestResponse({description: 'BadRequest'})@UseGuards(JwtAuthGuard)@Post('reserve')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(req, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Ticket data'})@ApiResponse({status: 200, type: Ticket})@ApiNotFoundResponse({description: 'Flight NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Tickets'})@ApiResponse({status: 200, type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            return\n                        \n                        \n                    \n                \n            \n            \n                \nreturn(req, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Return Ticket'})@ApiResponse({status: 200, type: Ticket})@ApiNotFoundResponse({description: 'Flight or Airplane NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(req, id: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Ticket data'})@ApiResponse({status: 200, type: Ticket})@ApiNotFoundResponse({description: 'Flight or User NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateTicketDto})@UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Ticket } from './entities/ticket.entity';\nimport { TicketsService } from './tickets.service';\n\n@ApiTags('Tickets')\n@Controller('tickets')\nexport class TicketsController {\n  constructor(private readonly ticketsService: TicketsService) {}\n\n  @ApiOperation({ summary: 'Create a Ticket' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @ApiBody({ type: CreateTicketDto })\n  @ApiNotFoundResponse({ description: 'Flight or User NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @UseGuards(JwtAuthGuard)\n  @Post('reserve')\n  create(@Body() ticketDto: CreateTicketDto) {\n    return this.ticketsService.createTicket(ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Tickets' })\n  @ApiResponse({ status: 200, type: [Ticket] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.ticketsService.getAllTickets();\n  }\n\n  @ApiOperation({ summary: 'Get Ticket data' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @ApiNotFoundResponse({ description: 'Flight NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  find(@Request() req, @Param('id') id: ObjectId) {\n    return this.ticketsService.getTicketById(req.user._id, id);\n  }\n\n  @ApiOperation({ summary: 'Update Ticket data' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @ApiNotFoundResponse({ description: 'Flight or User NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateTicketDto })\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(\n    @Request() req,\n    @Param('id') id: ObjectId,\n    @Body() ticketDto: UpdateTicketDto,\n  ) {\n    return this.ticketsService.updateTicketData(req.user._id, id, ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Return Ticket' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @ApiNotFoundResponse({ description: 'Flight or Airplane NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  return(@Request() req, @Param('id') id: ObjectId) {\n    return this.ticketsService.returnTicket(req.user._id, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_imports\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tickets/tickets.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsModule } from 'src/airports/airports.module';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { User, UserSchema } from 'src/users/entities/users.entity';\nimport { Flight, FlightSchema } from 'src/flights/entities/flights.entity';\nimport { Ticket, TicketSchema } from './entities/ticket.entity';\nimport {\n  Airplane,\n  AirplaneSchema,\n} from 'src/airplanes/entities/airplane.entity';\nimport { TicketsController } from './tickets.controller';\nimport { TicketsService } from './tickets.service';\nimport { AirplanesModule } from 'src/airplanes/airplanes.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Ticket.name, schema: TicketSchema },\n      { name: Flight.name, schema: FlightSchema },\n      { name: Airplane.name, schema: AirplaneSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n    AirportsModule,\n    UsersModule,\n    FlightsModule,\n    AirplanesModule,\n  ],\n  controllers: [TicketsController],\n  providers: [TicketsService],\n  exports: [TicketsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTicket\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTickets\n                            \n                            \n                                    Public\n                                    Async\n                                getTicketById\n                            \n                            \n                                    Public\n                                    Async\n                                returnTicket\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicketData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketModel: Model, flightModel: Model, airplaneModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/tickets.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTicket(ticketDto: CreateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllTickets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTickets()\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getTicketById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTicketById(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            returnTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnTicket(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:126\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateTicketData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTicketData(userId: ObjectId, ticketId: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:102\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Status, Ticket, TicketDocument } from './entities/ticket.entity';\nimport { Flight, FlightDocument } from 'src/flights/entities/flights.entity';\nimport { User, UserDocument } from 'src/users/entities/users.entity';\nimport {\n  Airplane,\n  AirplaneDocument,\n} from 'src/airplanes/entities/airplane.entity';\n\n@Injectable()\nexport class TicketsService {\n  constructor(\n    @InjectModel(Ticket.name) private ticketModel: Model,\n    @InjectModel(Flight.name) private flightModel: Model,\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  public async createTicket(ticketDto: CreateTicketDto): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    const user = await this.userModel\n      .findById(ticketDto.user)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new BadRequestException('User with this name not found');\n    }\n\n    const ticket = await this.ticketModel.create({ ...ticketDto });\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    user.tickets.push(ticket._id);\n    await user.save();\n    airplane.amountOfSeat -= 1;\n    await airplane.save();\n    return ticket;\n  }\n\n  public async getAllTickets(): Promise {\n    const tickets = await this.ticketModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    return tickets;\n  }\n\n  public async getTicketById(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    const ticket = await this.ticketModel\n      .findById(ticketId)\n      .findOne({ user: userId.toString() })\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    if (!ticket) {\n      throw new BadRequestException('Ticket with this id not found');\n    }\n    return ticket;\n  }\n\n  public async updateTicketData(\n    userId: ObjectId,\n    ticketId: ObjectId,\n    ticketDto: UpdateTicketDto,\n  ): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new BadRequestException('User with this name not found');\n    }\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    return ticket;\n  }\n\n  public async returnTicket(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    let ticket = await this.ticketModel.findById(ticketId).exec();\n    const flight = await this.flightModel.findById(ticket.flight).exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    ticket = await this.ticketModel.findByIdAndDelete(ticketId).exec();\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .findOne({ user: userId.toString() })\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    ticket.status = Status.Returned;\n    await ticket.save();\n    airplane.amountOfSeat += 1;\n    await airplane.save();\n    return ticket;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirlineDto.html":{"url":"classes/UpdateAirlineDto.html","title":"class - UpdateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/update-airline.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirlineDto } from './create-airline.dto';\n\nexport class UpdateAirlineDto extends PartialType(CreateAirlineDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirplaneDto.html":{"url":"classes/UpdateAirplaneDto.html","title":"class - UpdateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/update-airplane.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirplaneDto } from './create-airplane.dto';\n\nexport class UpdateAirplaneDto extends PartialType(CreateAirplaneDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirportDto.html":{"url":"classes/UpdateAirportDto.html","title":"class - UpdateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/update-airport.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirportDto } from './create-airport.dto';\n\nexport class UpdateAirportDto extends PartialType(CreateAirportDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/update-flight.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class UpdateFlightDto extends PartialType(CreateFlightDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/update-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)@ApiProperty({example: 'Booked', description: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/update-seat.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class UpdateSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsIn([\n    Status.Booked,\n    Status.Free,\n    Status.NotAvailable,\n    Status.Paid,\n    Status.Returned,\n  ])\n  @ApiProperty({ example: 'Booked', description: 'Class' })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSectionDto.html":{"url":"classes/UpdateSectionDto.html","title":"class - UpdateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/update-section.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateSectionDto } from './create-section.dto';\n\nexport class UpdateSectionDto extends PartialType(CreateSectionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/update-ticket.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTicketDto } from './create-ticket.dto';\n\nexport class UpdateTicketDto extends PartialType(CreateTicketDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDataDto.html":{"url":"classes/UpdateUserDataDto.html","title":"class - UpdateUserDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-data.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDataDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                role\n                            \n                            \n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'E-mail'})@Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Іван', description: 'First name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Шевченко', description: 'Last name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'A1b2@c3d!', description: 'Password'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '380951234567', description: 'Phone number'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user', description: 'Role'})@Prop({required: true, trim: true, enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Ticket[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'ticket', description: 'Tickets'})@Prop({trim: true, type: undefined, ref: 'Ticket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Ticket } from 'src/tickets/entities/ticket.entity';\n\nexport type UserDocument = User & Document;\n\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n\n@Schema()\nexport class User {\n  @ApiProperty({ example: 'Іван', description: 'First name' })\n  @Prop({ required: true, trim: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Шевченко', description: 'Last name' })\n  @Prop({ required: true, trim: true })\n  lastName: string;\n\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  @Prop({ required: true })\n  phoneNumber: number;\n\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  @Prop({ required: true })\n  password: string;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @ApiProperty({ example: 'user', description: 'Role' })\n  @Prop({ required: true, trim: true, enum: Role, default: Role.User })\n  role: Role;\n\n  @ApiProperty({\n    example: 'ticket',\n    description: 'Tickets',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Ticket',\n  })\n  tickets: Ticket[];\n}\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \nchangePassword(req, userDto: ChangeUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Change User password'})@ApiResponse({status: 200, type: User})@ApiNotFoundResponse({description: 'User NotFound'})@ApiBadRequestResponse({description: 'Password mismatch'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: ChangeUserPasswordDto})@UseGuards(JwtAuthGuard)@Patch('/changepassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete User'})@ApiResponse({status: 200, type: User})@ApiNotFoundResponse({description: 'User NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@UseGuards(JwtAuthGuard)@Delete('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Users'})@ApiResponse({status: 200, type: undefined})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Get()@Roles('admin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get User data'})@ApiResponse({status: 200, type: User})@ApiNotFoundResponse({description: 'User NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@Get(':id')@Roles('admin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateData\n                        \n                        \n                    \n                \n            \n            \n                \nupdateData(req, userDto: UpdateUserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update User data'})@ApiResponse({status: 200, type: User})@ApiNotFoundResponse({description: 'User NotFound'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateUserDataDto})@UseGuards(JwtAuthGuard)@Patch('/update')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiNotFoundResponse,\n  ApiOperation,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { UsersService } from './users.service';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User } from './entities/users.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOperation({ summary: 'Get data all Users' })\n  @ApiResponse({ status: 200, type: [User] })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Get()\n  @Roles('admin')\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @ApiOperation({ summary: 'Get User data' })\n  @ApiResponse({ status: 200, type: User })\n  @ApiNotFoundResponse({ description: 'User NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @Get(':id')\n  @Roles('admin')\n  findOne(@Param('id') id: ObjectId) {\n    return this.usersService.getUserById(id);\n  }\n\n  @ApiOperation({ summary: 'Update User data' })\n  @ApiResponse({ status: 200, type: User })\n  @ApiNotFoundResponse({ description: 'User NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateUserDataDto })\n  @UseGuards(JwtAuthGuard)\n  @Patch('/update')\n  updateData(@Request() req, @Body() userDto: UpdateUserDataDto) {\n    return this.usersService.updateUserData(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Change User password' })\n  @ApiResponse({ status: 200, type: User })\n  @ApiNotFoundResponse({ description: 'User NotFound' })\n  @ApiBadRequestResponse({ description: 'Password mismatch' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: ChangeUserPasswordDto })\n  @UseGuards(JwtAuthGuard)\n  @Patch('/changepassword')\n  changePassword(@Request() req, @Body() userDto: ChangeUserPasswordDto) {\n    return this.usersService.changeUserPassword(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Delete User' })\n  @ApiResponse({ status: 200, type: User })\n  @ApiNotFoundResponse({ description: 'User NotFound' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @UseGuards(JwtAuthGuard)\n  @Delete('')\n  delete(@Request() req) {\n    return this.usersService.deleteUser(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './entities/users.entity';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getUserById\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(userId: ObjectId, userDto: ChangeUserPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUserData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserData(userId: ObjectId, userDto: UpdateUserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User, UserDocument } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  public async createUser(userDto: CreateUserDto): Promise {\n    try {\n      let user = await this.userModel.create({ ...userDto });\n      user = await this.userModel\n        .findOne({ email: userDto.email })\n        .select({ password: false, __v: false })\n        .exec();\n      return user;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllUsers(): Promise {\n    const users = await this.userModel\n      .find()\n      .select({ password: false, __v: false })\n      .exec();\n    return users;\n  }\n\n  public async getUserById(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async updateUserData(\n    userId: ObjectId,\n    userDto: UpdateUserDataDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (userDto.email) {\n      user.email = userDto.email;\n    }\n\n    if (userDto.firstName) {\n      user.firstName = userDto.firstName;\n    }\n\n    if (userDto.lastName) {\n      user.lastName = userDto.lastName;\n    }\n\n    if (userDto.phoneNumber) {\n      user.phoneNumber = userDto.phoneNumber;\n    }\n\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n\n    return user;\n  }\n\n  public async changeUserPassword(\n    userId: ObjectId,\n    userDto: ChangeUserPasswordDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const passwordEquals = await bcrypt.compare(\n      userDto.oldPassword,\n      user.password,\n    );\n    const newPasswordEquals = await bcrypt.compare(\n      userDto.newPassword,\n      user.password,\n    );\n\n    if (!passwordEquals) {\n      throw new HttpException('Password mismatch', HttpStatus.BAD_REQUEST);\n    } else if (newPasswordEquals) {\n      throw new HttpException(\n        'New and old passwords must not match',\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const salt = await bcrypt.genSalt();\n      const hashPassword = await bcrypt.hash(userDto.newPassword, salt);\n      user.password = hashPassword;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async deleteUser(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findByIdAndDelete(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async getUserByEmail(email: string): Promise {\n    const user = await this.userModel.findOne({ email: email }).exec();\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/airlines/airlines.controller.ts\n            \n            controller\n            AirlinesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airlines/airlines.service.ts\n            \n            injectable\n            AirlinesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/create-airline.dto.ts\n            \n            class\n            CreateAirlineDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/update-airline.dto.ts\n            \n            class\n            UpdateAirlineDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            class\n            Airline\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            variable\n            AirlineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.controller.ts\n            \n            controller\n            AirplanesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.service.ts\n            \n            injectable\n            AirplanesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airplanes/dto/create-airplane.dto.ts\n            \n            class\n            CreateAirplaneDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/dto/update-airplane.dto.ts\n            \n            class\n            UpdateAirplaneDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            class\n            Airplane\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            variable\n            AirplaneSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/airports.controller.ts\n            \n            controller\n            AirportsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airports/airports.service.ts\n            \n            injectable\n            AirportsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airports/dto/create-airport.dto.ts\n            \n            class\n            CreateAirportDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/dto/update-airport.dto.ts\n            \n            class\n            UpdateAirportDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            class\n            Airport\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            variable\n            AirportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            variable\n            cookieExtractor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/flights/dto/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/dto/search-flight-by-range.dto.ts\n            \n            class\n            SearchFlightByRangeDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/flights/dto/search-flight.dto.ts\n            \n            class\n            SearchFlightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/flights/dto/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            class\n            Flight\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            variable\n            FlightSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/select-seat.dto.ts\n            \n            class\n            SelectSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/dto/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            variable\n            SeatSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sections/dto/create-section.dto.ts\n            \n            class\n            CreateSectionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/dto/update-section.dto.ts\n            \n            class\n            UpdateSectionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            class\n            Section\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            variable\n            SectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/sections.controller.ts\n            \n            controller\n            SectionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sections/sections.service.ts\n            \n            injectable\n            SectionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tickets/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            class\n            Ticket\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            variable\n            TicketSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/change-user-password.dto.ts\n            \n            class\n            ChangeUserPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-data.dto.ts\n            \n            class\n            UpdateUserDataDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            - : 0.0.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/throttler : ^1.1.4\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/multer : ^1.4.5\n        \n            bcrypt : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            cache-manager : ^3.4.3\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.5\n        \n            cross-env : ^7.0.3\n        \n            csurf : ^1.11.0\n        \n            fuse.js : ^6.4.6\n        \n            helmet : ^4.6.0\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.12.9\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Class   (src/.../section.entity.ts)\n                        \n                        \n                            Folder   (src/.../files.service.ts)\n                        \n                        \n                            Role   (src/.../users.entity.ts)\n                        \n                        \n                            Sex   (src/.../ticket.entity.ts)\n                        \n                        \n                            Status   (src/.../seat.entity.ts)\n                        \n                        \n                            Status   (src/.../ticket.entity.ts)\n                        \n                        \n                            Type   (src/.../ticket.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/sections/entities/section.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Class\n                    \n                \n                        \n                            \n                                 Business\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 Economy\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/files/files.service.ts\n    \n        \n            \n                \n                    \n                        \n                        Folder\n                    \n                \n                        \n                            \n                                 Airline\n                            \n                        \n                        \n                            \n                                Value : airline\n                            \n                        \n            \n        \n\n    src/users/entities/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Type\n                    \n                \n                        \n                            \n                                 Adult\n                            \n                        \n                        \n                            \n                                Value : adult\n                            \n                        \n                        \n                            \n                                 Child\n                            \n                        \n                        \n                            \n                                Value : child\n                            \n                        \n                        \n                            \n                                 Baby\n                            \n                        \n                        \n                            \n                                Value : baby\n                            \n                        \n                        \n                            \n                                 Disabled\n                            \n                        \n                        \n                            \n                                Value : disabled\n                            \n                        \n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 Free\n                            \n                        \n                        \n                            \n                                Value : free\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AirlinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirplanesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SectionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_exports\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nSectionsService \n\nSectionsService \n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    29 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineDocument   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneDocument   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportDocument   (src/.../airport.entity.ts)\n                        \n                        \n                            FlightDocument   (src/.../flights.entity.ts)\n                        \n                        \n                            SeatDocument   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionDocument   (src/.../section.entity.ts)\n                        \n                        \n                            TicketDocument   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirlineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airplanes/entities/airplane.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirplaneDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airports/entities/airport.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirportDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/flights/entities/flights.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FlightDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/seats/entities/seat.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SeatDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/sections/entities/section.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tickets/entities/ticket.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TicketDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/entities/users.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineSchema   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneSchema   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportSchema   (src/.../airport.entity.ts)\n                        \n                        \n                            cookieExtractor   (src/.../jwt.strategy.ts)\n                        \n                        \n                            FlightSchema   (src/.../flights.entity.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            Roles   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            SeatSchema   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionSchema   (src/.../section.entity.ts)\n                        \n                        \n                            TicketSchema   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirlineSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airline)\n                        \n                    \n\n\n            \n        \n\n    src/airplanes/entities/airplane.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirplaneSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airplane)\n                        \n                    \n\n\n            \n        \n\n    src/airports/entities/airport.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airport)\n                        \n                    \n\n\n            \n        \n\n    src/auth/strategies/jwt.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cookieExtractor\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (req) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n                        \n                    \n\n\n            \n        \n\n    src/flights/entities/flights.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FlightSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Flight)\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles-auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...role: string[]) => SetMetadata(ROLES_KEY, role)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'role'\n                        \n                    \n\n\n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SeatSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Seat)\n                        \n                    \n\n\n            \n        \n\n    src/sections/entities/section.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Section)\n                        \n                    \n\n\n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TicketSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Ticket)\n                        \n                    \n\n\n            \n        \n\n    src/users/entities/users.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
