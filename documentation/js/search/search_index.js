var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Airline.html",[0,0.2,1,1.729]],["body/classes/Airline.html",[0,0.155,1,3.29,2,0.752,3,0.108,4,0.096,5,0.096,6,2.207,7,0.366,8,1.609,9,1.479,10,4.666,11,4.666,12,4.203,13,4.666,14,4.666,15,4.666,16,4.744,17,0.874,18,0.015,19,2.003,20,1.671,21,3.596,22,3.249,23,3.666,24,4.254,25,3.696,26,1.857,27,3.696,28,0.9,29,4.524,30,3.217,31,4.142,32,1.013,33,3.072,34,3.696,35,3.072,36,5.147,37,4.524,38,3.949,39,3.072,40,3.931,41,3.931,42,3.878,43,5.739,44,3.931,45,4.524,46,3.072,47,3.072,48,3.072,49,3.072,50,3.072,51,0.211,52,3.89,53,1.741,54,1.705,55,0.809,56,2.492,57,0.536,58,2.382,59,0.809,60,0.189,61,2.405,62,2.428,63,2.981,64,0.904,65,2.207,66,2.67,67,0.005,68,0.008,69,0.005]],["title/controllers/AirlinesController.html",[70,1.256,71,2.846]],["body/controllers/AirlinesController.html",[0,0.137,1,3.172,3,0.096,4,0.085,5,0.085,7,0.324,9,1.176,16,4.851,17,0.974,18,0.015,19,1.314,20,1.466,25,2.573,26,1.835,28,0.893,32,0.889,51,0.272,57,0.473,59,0.715,60,0.096,67,0.005,68,0.007,69,0.005,70,0.861,71,2.962,72,0.861,73,2.36,74,1.43,75,1.214,76,2.402,77,3.518,78,3.271,79,1.97,80,3.325,81,2.715,82,3.737,83,6.308,84,3.001,85,2.715,86,2.422,87,2.715,88,2.933,89,2.75,90,2.769,91,3.112,92,3.533,93,2.962,94,2.715,95,2.715,96,2.715,97,1.639,98,5.481,99,1.763,100,1.81,101,2.609,102,2.715,103,3.556,104,4.125,105,2.798,106,2.75,107,1.507,108,1.81,109,2.715,110,3.501,111,2.715,112,1.694,113,1.81,114,2.715,115,1.694,116,2.715,117,2.715,118,2.715,119,2.715,120,2.715,121,2.715,122,1.694,123,3.994,124,1.507,125,2.125,126,2.715,127,2.715,128,2.715,129,2.422,130,2.498,131,1.507,132,1.507,133,4.988,134,2.715,135,0.455,136,2.715,137,2.36,138,2.125,139,2.626,140,2.626,141,2.715,142,2.79,143,2.422,144,2.79,145,3.092,146,3.154,147,3.159,148,3.271,149,1.36,150,3.159,151,2.79,152,3.112,153,2.36,154,2.125,155,1.185,156,3.228,157,1.045,158,1.43,159,1.43,160,1.507,161,2.715,162,2.715,163,1.239,164,0.966,165,3.001,166,2.066,167,2.498,168,2.626,169,3.001,170,2.929,171,4.125,172,4.125,173,1.578,174,2.715,175,2.715,176,1.92,177,1.594,178,1.694,179,2.715,180,1.694,181,2.36,182,2.715,183,1.694,184,1.81,185,2.715]],["title/modules/AirlinesModule.html",[186,1.083,187,2.642]],["body/modules/AirlinesModule.html",[0,0.25,1,2.168,3,0.175,4,0.156,5,0.156,18,0.014,28,0.677,51,0.3,53,1.913,55,1.309,60,0.175,65,4.519,67,0.009,68,0.011,69,0.009,71,4.959,72,1.995,135,0.833,152,5.046,153,4.318,154,3.889,186,1.887,187,5.292,188,2.077,189,2.077,190,2.266,191,2.266,192,2.077,193,3.15,194,3.15,195,4.318,196,4.318,197,4.318,198,4.318,199,4.773,200,2.87,201,2.266,202,2.168,203,4.969,204,3.152,205,2.616,206,4.969,207,4.969,208,2.758,209,4.969]],["title/injectables/AirlinesService.html",[152,2.472,210,0.836]],["body/injectables/AirlinesService.html",[0,0.142,1,3.395,3,0.099,4,0.088,5,0.088,7,0.335,9,1.283,12,3.986,16,5.111,17,0.759,18,0.015,25,2.641,28,0.871,32,0.948,51,0.26,55,0.74,59,0.74,60,0.099,61,2.199,64,1.789,67,0.005,68,0.007,69,0.005,75,1.246,79,2.432,82,3.537,97,1.789,98,5.554,99,1.789,101,2.632,105,1.96,123,3.78,135,0.471,152,2.641,154,2.199,155,1.226,156,3.313,157,1.082,173,1.602,176,1.96,210,0.893,211,1.082,212,2.442,213,4.188,214,2.904,215,5.093,216,4.233,217,4.233,218,5.669,219,5.093,220,1.931,221,2.81,222,3.147,223,4.138,224,2.81,225,4.233,226,2.81,227,2.81,228,3.246,229,4.233,230,2.81,231,5.669,232,4.233,233,2.81,234,2.81,235,2.81,236,2.81,237,2.904,238,1.342,239,1.56,240,2.199,241,2.81,242,2.81,243,2.022,244,3.379,245,6.391,246,5.093,247,3.547,248,2.789,249,2.563,250,2.018,251,2.018,252,3.177,253,2.35,254,4.926,255,2.81,256,2.81,257,3.571,258,3.375,259,3.046,260,2.486,261,2.822,262,2.822,263,1.56,264,2.81,265,2.827,266,2.81,267,4.233,268,2.81,269,4.233,270,2.81,271,4.233,272,2.81,273,4.233,274,2.81,275,4.233,276,2.81,277,4.233,278,2.81,279,2.81,280,2.81,281,2.81,282,2.81]],["title/classes/Airplane.html",[0,0.2,283,1.808]],["body/classes/Airplane.html",[0,0.222,2,1.078,3,0.155,4,0.138,5,0.138,7,0.525,8,2.07,17,0.942,18,0.014,19,1.533,20,1.595,21,3.432,26,1.747,28,0.6,30,3.142,31,3.618,32,0.967,38,3.881,51,0.283,52,3.849,53,2.24,54,2.445,55,1.16,56,2.466,57,0.768,58,3.065,59,1.717,60,0.23,62,2.318,63,3.231,64,1.296,67,0.008,68,0.01,69,0.008,283,3.289,284,3.164,285,5.665,286,5.102,287,4.35,288,4.18,289,4.18,290,4.18,291,2.937,292,4.405,293,2.655,294,5.058,295,5.058,296,3.828,297,4.405,298,3.443,299,4.405,300,2.586,301,3.631,302,4.405,303,3.164,304,3.164,305,1.922,306,2.748,307,2.937,308,3.828]],["title/controllers/AirplanesController.html",[70,1.256,309,2.846]],["body/controllers/AirplanesController.html",[0,0.144,3,0.101,4,0.089,5,0.089,7,0.34,9,1.206,17,0.981,18,0.015,19,1.354,20,1.498,26,1.847,28,0.909,32,0.908,51,0.269,57,0.498,59,0.752,60,0.101,67,0.005,68,0.007,69,0.005,70,0.905,72,0.905,74,1.503,75,1.26,76,2.291,77,3.595,78,3.355,79,2.045,80,3.171,84,3.066,86,2.515,88,2.255,89,1.903,90,2.854,91,3.208,92,3.579,93,3.076,97,1.681,99,1.801,100,1.903,101,2.642,103,3.611,105,2.829,106,3.428,107,1.584,108,1.903,110,3.171,112,1.781,113,1.903,115,1.781,122,1.781,124,2.378,125,2.234,129,2.515,130,2.145,131,1.584,132,1.584,135,0.478,139,2.707,140,2.707,142,2.862,143,2.515,144,2.862,145,3.171,146,3.224,147,3.22,148,3.355,149,1.43,150,3.22,151,2.862,155,1.246,157,1.099,158,1.503,159,1.503,160,1.584,163,1.302,164,1.015,165,3.066,166,1.43,167,2.575,168,2.707,169,3.066,170,3.019,173,1.613,176,1.979,177,1.676,178,1.781,180,1.781,183,1.781,184,1.903,283,3.352,309,3.076,310,2.48,311,3.722,312,2.854,313,3.82,314,2.854,315,2.854,316,2.48,317,2.854,318,2.854,319,5.587,320,2.854,321,5.141,322,2.854,323,2.854,324,2.854,325,2.234,326,2.05,327,2.854,328,4.082,329,2.854,330,2.854,331,3.208,332,2.48,333,2.234,334,3.352,335,2.854,336,2.854,337,2.48,338,1.903,339,2.854,340,2.854,341,2.854,342,1.903,343,2.854,344,2.854]],["title/modules/AirplanesModule.html",[186,1.083,345,2.472]],["body/modules/AirplanesModule.html",[0,0.258,3,0.18,4,0.16,5,0.16,18,0.014,28,0.698,51,0.297,53,1.971,55,1.349,60,0.18,67,0.009,68,0.011,69,0.009,72,2.033,135,0.858,186,1.913,188,2.141,189,2.141,190,2.336,191,2.336,192,2.141,193,3.194,194,3.194,200,2.925,201,2.336,202,2.235,204,2.565,205,2.696,208,2.842,283,2.336,307,4.276,309,5.029,331,5.066,332,4.45,333,4.008,345,4.88,346,4.45,347,4.45,348,4.45,349,5.121,350,5.121,351,4.45]],["title/injectables/AirplanesService.html",[210,0.836,331,2.472]],["body/injectables/AirplanesService.html",[0,0.156,3,0.11,4,0.097,5,0.097,7,0.37,9,1.339,17,0.791,18,0.015,28,0.865,32,0.984,51,0.26,55,0.819,59,0.819,60,0.11,64,1.59,67,0.005,68,0.008,69,0.005,75,1.342,97,1.867,99,1.867,101,2.697,105,2.081,135,0.521,155,1.356,157,1.196,173,1.671,176,2.081,210,0.963,211,1.196,213,4.261,214,2.955,220,2.081,222,3.306,228,3.327,237,2.581,238,1.484,239,1.725,243,1.484,244,3.207,247,3.521,248,2.599,249,2.388,252,1.939,253,1.725,257,4.282,258,4.048,259,3.177,260,1.825,261,2.072,262,2.072,263,1.725,265,2.532,283,3.525,287,3.725,304,2.232,311,3.964,313,3.716,319,5.763,328,3.971,331,2.846,333,2.432,334,3.571,352,2.7,353,5.406,354,4.562,355,4.562,356,5.956,357,5.406,358,3.107,359,3.107,360,3.964,361,3.107,362,3.107,363,4.562,364,3.107,365,5.956,366,4.562,367,3.107,368,3.107,369,3.107,370,3.107,371,2.7,372,2.7,373,3.107,374,5.513,375,3.107,376,4.556,377,4.23,378,4.562,379,3.107,380,3.107,381,4.562,382,3.107,383,2.7,384,3.107]],["title/classes/Airport.html",[0,0.2,385,2.086]],["body/classes/Airport.html",[0,0.15,2,0.727,3,0.105,4,0.093,5,0.093,7,0.354,8,1.57,9,1.564,17,0.913,18,0.014,19,2.065,20,1.766,21,3.799,23,2.45,26,1.849,27,4.071,28,1.038,30,3.268,31,4.259,32,1.07,34,4.071,38,4.351,51,0.207,52,4.064,53,1.699,54,1.649,55,0.783,56,2.603,57,0.518,58,2.324,59,0.783,60,0.186,62,2.566,63,3.235,64,0.874,67,0.005,68,0.008,69,0.005,291,1.981,385,4.088,386,2.134,387,4.576,388,4.576,389,4.576,390,4.576,391,4.576,392,4.576,393,4.576,394,4.576,395,4.576,396,4.562,397,5.67,398,4.414,399,2.972,400,2.972,401,4.687,402,2.582,403,2.972,404,3.836,405,4.414,406,2.972,407,2.972,408,2.972,409,3.836,410,4.414,411,2.972,412,2.972,413,2.972,414,2.972,415,3.836,416,2.972,417,2.972,418,2.326,419,4.576,420,2.134,421,2.582]],["title/controllers/AirportsController.html",[70,1.256,422,2.846]],["body/controllers/AirportsController.html",[0,0.143,3,0.1,4,0.089,5,0.089,7,0.339,9,1.204,17,0.98,18,0.015,19,1.352,20,1.497,26,1.846,28,0.908,32,0.907,51,0.269,57,0.496,59,0.75,60,0.1,67,0.005,68,0.007,69,0.005,70,0.903,72,0.903,74,1.499,75,1.258,76,2.288,77,3.591,78,3.35,79,2.041,80,3.167,84,3.063,86,2.51,88,3.004,89,1.898,90,2.849,91,3.202,92,3.576,93,3.07,97,1.679,99,1.799,100,1.898,101,2.641,103,3.608,105,2.827,106,2.85,107,2.373,108,1.898,110,3.167,112,1.776,113,1.898,115,1.776,122,1.776,124,2.373,129,2.51,130,2.141,131,1.58,132,1.58,135,0.477,139,2.703,140,2.703,142,2.858,143,2.51,144,2.858,145,3.167,146,3.22,147,3.217,148,3.35,149,1.426,150,3.217,151,2.858,155,1.242,157,1.096,158,1.499,159,1.499,160,1.58,163,1.299,164,1.012,165,3.063,166,2.141,167,2.571,168,2.703,169,3.063,170,3.014,173,1.611,176,1.976,177,1.672,178,1.776,180,1.776,183,1.776,184,1.898,325,2.228,326,2.045,338,1.898,342,1.898,385,3.867,422,3.07,423,2.474,424,3.715,425,2.847,426,3.815,427,2.847,428,2.847,429,2.847,430,2.847,431,5.581,432,2.847,433,5.133,434,2.847,435,2.847,436,2.847,437,2.847,438,4.077,439,2.228,440,1.776,441,2.847,442,2.847,443,3.202,444,2.474,445,2.228,446,3.346,447,2.847,448,2.847,449,2.847,450,2.847,451,2.847,452,2.847,453,2.847]],["title/modules/AirportsModule.html",[186,1.083,454,2.472]],["body/modules/AirportsModule.html",[0,0.259,3,0.181,4,0.161,5,0.161,18,0.014,28,0.701,51,0.297,53,1.981,55,1.355,60,0.181,67,0.009,68,0.011,69,0.009,72,2.039,135,0.862,186,1.918,188,2.151,189,2.151,190,2.347,191,2.347,192,2.151,193,3.201,194,3.201,200,2.934,201,2.347,202,2.245,204,2.577,205,2.709,208,2.856,385,2.709,420,4.619,422,5.04,443,5.069,444,4.471,445,4.027,454,4.885,455,4.471,456,4.471,457,4.471,458,5.145,459,5.145,460,5.145]],["title/injectables/AirportsService.html",[210,0.836,443,2.472]],["body/injectables/AirportsService.html",[0,0.147,3,0.103,4,0.092,5,0.092,7,0.349,9,1.306,17,0.772,18,0.015,28,0.843,32,0.963,51,0.255,55,0.771,59,0.771,60,0.103,64,1.536,67,0.005,68,0.008,69,0.005,75,1.284,79,2.084,97,1.821,99,1.821,101,2.659,105,2.009,135,0.491,155,1.278,157,1.127,173,1.63,176,2.009,210,0.921,211,1.127,213,4.218,214,2.925,220,1.991,222,3.211,228,3.279,237,2.955,238,1.398,239,1.625,243,1.398,244,3.222,247,3.602,248,2.701,249,2.481,250,2.103,251,2.103,252,2.723,253,1.625,257,3.634,258,3.435,259,3.1,260,1.719,261,1.952,262,1.952,263,1.625,265,2.897,385,4.119,396,4.085,418,2.291,424,3.793,426,3.61,431,5.378,438,3.857,443,2.723,445,2.291,446,3.416,461,2.544,462,4.365,463,4.365,464,4.365,465,5.786,466,5.219,467,2.928,468,2.928,469,4.365,470,4.365,471,2.928,472,4.365,473,2.928,474,5.786,475,4.365,476,2.928,477,2.928,478,2.928,479,2.928,480,2.928,481,6.49,482,5.786,483,2.928,484,4.365,485,2.928,486,2.928,487,4.365,488,2.928,489,4.365,490,2.928,491,4.365,492,2.928,493,4.365,494,2.928,495,4.365,496,2.928,497,4.365,498,2.928,499,4.365,500,2.928,501,4.365,502,2.928,503,4.365,504,2.928,505,2.928,506,2.928]],["title/controllers/AppController.html",[70,1.256,507,2.846]],["body/controllers/AppController.html",[0,0.244,3,0.17,4,0.151,5,0.151,7,0.576,9,1.021,17,0.851,18,0.014,20,1.184,26,1.695,28,0.659,32,0.717,51,0.292,57,0.843,60,0.17,67,0.008,68,0.011,69,0.008,70,1.961,72,1.533,75,1.82,84,2.422,92,3.098,97,1.423,99,1.423,103,3.257,135,0.811,142,3.098,144,3.098,146,3.257,147,3.098,149,2.422,150,3.098,151,3.098,163,2.206,165,2.422,166,2.422,167,2.422,168,2.546,169,2.422,173,1.274,214,2.625,507,4.442,508,4.202,509,5.374,510,4.836,511,4.836,512,4.836,513,4.836,514,4.202,515,4.836,516,4.836,517,3.632,518,3.224,519,3.785,520,4.836,521,2.116,522,4.836,523,2.684,524,4.836,525,3.224,526,4.836,527,4.836,528,3.224,529,4.836,530,4.836,531,4.836]],["title/modules/AppModule.html",[186,1.083,532,2.846]],["body/modules/AppModule.html",[0,0.172,3,0.12,4,0.107,5,0.107,18,0.015,30,2.496,51,0.311,55,0.9,60,0.12,67,0.006,68,0.008,69,0.006,72,1.549,135,0.572,186,1.559,187,4.568,188,1.428,189,1.428,190,1.558,191,1.558,192,1.428,193,2.602,194,1.558,199,4.274,200,2.228,201,1.558,202,1.49,204,3.299,205,1.798,214,1.88,259,1.711,345,4.274,454,4.274,507,4.096,532,5.822,533,2.968,534,2.968,535,2.968,536,4.274,537,4.274,538,4.568,539,4.568,540,4.568,541,4.023,542,4.568,543,3.415,544,4.885,545,3.415,546,5.409,547,5.748,548,2.453,549,4.885,550,3.415,551,2.968,552,5.703,553,4.885,554,2.673,555,3.415,556,3.415,557,2.968,558,3.415,559,3.415,560,3.415,561,3.415,562,3.415,563,3.415,564,3.415,565,3.415,566,3.415,567,3.508,568,3.415,569,2.968,570,2.968,571,2.968,572,2.968,573,3.415,574,4.956,575,4.885,576,3.415,577,4.956,578,3.415,579,3.415,580,3.415,581,3.415,582,3.415,583,3.415,584,3.415,585,3.415,586,3.415,587,3.415,588,3.415,589,3.415,590,5.703,591,5.703]],["title/injectables/AppService.html",[210,0.836,542,2.642]],["body/injectables/AppService.html",[0,0.311,3,0.218,4,0.194,5,0.194,18,0.014,51,0.243,60,0.218,67,0.011,68,0.012,69,0.011,135,1.037,210,1.517,211,2.381,542,4.792,592,5.374]],["title/controllers/AuthController.html",[70,1.256,593,2.846]],["body/controllers/AuthController.html",[0,0.17,3,0.119,4,0.106,5,0.106,7,0.403,9,1.197,17,0.914,18,0.015,20,1.389,26,1.728,28,0.773,30,2.738,32,0.842,51,0.288,57,0.59,60,0.119,64,0.995,67,0.006,68,0.008,69,0.006,70,1.073,72,1.073,74,1.781,75,1.428,84,2.842,86,3.853,88,3.264,92,3.421,93,2.43,97,1.669,99,1.669,112,2.111,129,1.987,130,1.695,135,0.567,138,2.648,139,2.987,140,2.987,142,2.43,143,3.639,144,1.695,147,3.104,149,1.695,150,3.104,151,2.43,163,1.543,165,2.842,166,2.842,167,1.695,169,2.842,173,1.494,202,1.476,214,2.82,244,2.213,517,2.849,518,2.256,519,3.149,521,1.941,523,1.878,525,3.235,528,2.256,593,3.485,594,2.94,595,3.383,596,4.852,597,4.217,598,4.217,599,3.383,600,7.034,601,4.852,602,3.383,603,3.383,604,3.383,605,3.383,606,3.383,607,7.034,608,3.383,609,6.198,610,3.383,611,4.852,612,3.383,613,3.383,614,3.383,615,3.383,616,2.94,617,3.642,618,3.383,619,3.383,620,3.383,621,3.485,622,2.648,623,2.256,624,2.43,625,3.235,626,3.485,627,2.648,628,3.383,629,2.43,630,3.383,631,3.383,632,3.383,633,3.383,634,3.383,635,3.383,636,4.852,637,4.852,638,3.798,639,3.383,640,4.852,641,4.852,642,4.852,643,4.852,644,4.852,645,3.383,646,3.383,647,3.383,648,3.383,649,3.383,650,3.383]],["title/modules/AuthModule.html",[186,1.083,536,2.472]],["body/modules/AuthModule.html",[0,0.227,3,0.159,4,0.141,5,0.141,18,0.015,51,0.306,60,0.159,67,0.008,68,0.01,69,0.008,72,1.873,135,0.755,186,1.801,188,1.884,189,1.884,190,2.055,191,2.055,192,1.884,193,3.007,194,3.007,200,2.695,201,2.055,202,1.966,204,2.959,214,1.734,519,4.427,536,4.945,541,3.469,546,5.133,547,5.476,548,3.236,557,3.915,569,3.915,570,3.915,571,3.915,574,3.915,577,3.915,593,4.734,622,3.526,651,3.915,652,3.915,653,3.915,654,4.97,655,4.97,656,4.505,657,5.133,658,5.907,659,2.811,660,5.907,661,3.236,662,4.505,663,4.505,664,4.505,665,4.505,666,4.505,667,3.915,668,4.505,669,4.505,670,4.505]],["title/injectables/AuthService.html",[210,0.836,519,2.2]],["body/injectables/AuthService.html",[0,0.183,3,0.128,4,0.114,5,0.114,7,0.434,9,1.424,17,0.841,18,0.015,19,1.842,28,0.919,32,1.001,51,0.275,59,0.958,60,0.128,64,1.985,67,0.006,68,0.009,69,0.006,75,1.503,97,1.985,99,1.884,101,2.368,135,0.61,173,1.687,210,1.078,211,1.4,214,2.966,220,2.33,228,2.33,237,2.44,238,1.737,243,2.44,244,3.19,248,2.23,249,2.049,250,2.613,251,2.613,252,2.27,509,4.44,519,2.836,521,2.549,597,4.44,598,4.44,616,4.44,617,3.554,621,3.669,624,2.613,625,2.426,661,2.613,671,3.161,672,5.109,673,3.638,674,3.882,675,6.242,676,3.638,677,5.109,678,3.638,679,3.999,680,5.109,681,3.638,682,3.638,683,5.109,684,5.905,685,3.638,686,4.497,687,3.999,688,3.999,689,3.638,690,3.638,691,3.161,692,4.44,693,3.638,694,5.109,695,3.669,696,5.109,697,2.27,698,3.161,699,2.27,700,3.161,701,2.613,702,3.161,703,3.638,704,3.638,705,4.44,706,3.161,707,4.44,708,3.638,709,3.638,710,2.69,711,3.638,712,4.44,713,3.638,714,3.161,715,3.638,716,3.638]],["title/classes/ChangeUserPasswordDto.html",[0,0.2,717,2.642]],["body/classes/ChangeUserPasswordDto.html",[0,0.316,2,1.208,3,0.174,4,0.154,5,0.154,7,0.588,8,2.228,17,0.782,18,0.014,19,1.907,20,1.533,26,1.708,32,0.929,51,0.246,56,2.448,57,0.86,60,0.174,62,2.228,67,0.009,68,0.011,69,0.009,164,2.716,249,2.512,521,2.355,710,3.813,717,4.177,718,5.982,719,4.288,720,6.884,721,6.884,722,5.444,723,6.292,724,6.292,725,5.667,726,5.444,727,6.265,728,4.935,729,4.903,730,4.935,731,3.448,732,3.821,733,4.288,734,2.357,735,5.444,736,5.444]],["title/classes/CreateAirlineDto.html",[0,0.2,82,2.472]],["body/classes/CreateAirlineDto.html",[0,0.234,1,3.338,2,0.778,3,0.112,4,0.1,5,0.171,7,0.379,8,2.141,9,1.493,10,4.76,11,4.76,12,4.288,13,4.76,14,4.76,15,4.76,16,4.325,17,0.9,18,0.015,19,1.998,20,1.69,22,3.332,23,3.711,24,4.325,25,3.757,26,1.849,27,3.757,28,0.911,32,1.024,34,3.757,36,5.233,40,4.032,41,4.032,42,3.926,43,5.81,44,4.032,51,0.182,56,2.516,57,0.554,60,0.112,62,2.377,67,0.006,68,0.008,69,0.006,82,2.895,164,2.822,300,1.867,731,2.744,732,3.832,734,1.519,737,6.149,738,2.489,739,4.032,740,3.18,741,3.18,742,2.764,743,3.18,744,4.64,745,3.18,746,3.18,747,3.18,748,3.18,749,3.18,750,3.18,751,4.269,752,2.12,753,3.934,754,5.478,755,3.18,756,3.18]],["title/classes/CreateAirplaneDto.html",[0,0.2,313,2.472]],["body/classes/CreateAirplaneDto.html",[0,0.307,2,1.158,3,0.167,4,0.148,5,0.148,7,0.564,8,2.168,17,0.842,18,0.014,19,1.606,20,1.652,26,1.782,28,0.831,32,1.001,51,0.265,56,2.535,57,0.825,60,0.167,62,2.4,67,0.008,68,0.011,69,0.008,164,2.686,283,2.782,285,5.864,286,5.282,287,4.512,288,4.38,289,4.38,290,4.38,293,2.782,294,5.299,295,5.299,298,3.222,303,3.398,305,2.661,313,3.804,731,3.57,732,3.385,734,2.259,742,4.111,752,3.154,753,3.398,757,6.194,758,3.703,759,4.731,760,4.731,761,4.731,762,4.731,763,4.731,764,6.098,765,5.299,766,4.38]],["title/classes/CreateAirportDto.html",[0,0.2,426,2.472]],["body/classes/CreateAirportDto.html",[0,0.227,2,0.75,3,0.108,4,0.096,5,0.096,7,0.365,8,1.605,9,1.574,17,0.907,18,0.014,19,2.073,20,1.779,23,2.506,26,1.856,27,4.116,28,1.063,32,1.078,34,4.116,51,0.177,56,2.621,57,0.534,60,0.108,62,2.585,67,0.005,68,0.008,69,0.005,164,2.877,385,4.106,387,4.659,388,4.659,389,4.659,390,4.659,391,4.659,392,4.659,393,4.659,394,4.659,395,4.659,396,4.936,397,5.733,401,4.739,404,3.923,409,3.923,415,3.923,419,5.733,426,2.817,731,3.159,732,4.091,734,1.463,739,5.733,751,4.549,752,2.043,753,5.134,767,6.405,768,2.398,769,3.064,770,3.064,771,4.659,772,3.064,773,3.064,774,3.064,775,3.064,776,3.064,777,3.064,778,3.064,779,3.064,780,3.064,781,3.064,782,4.515,783,2.662,784,3.064,785,3.064]],["title/classes/CreateFlightDto.html",[0,0.2,786,2.472]],["body/classes/CreateFlightDto.html",[0,0.215,1,2.992,2,0.698,3,0.1,4,0.089,5,0.089,7,0.34,8,2.03,9,1.205,17,0.917,18,0.014,19,1.693,20,1.798,21,1.501,22,3.073,23,2.375,24,3.073,25,2.67,26,1.867,28,0.876,30,1.716,32,1.09,51,0.24,56,2.579,57,0.497,60,0.1,62,2.613,67,0.005,68,0.007,69,0.005,164,2.889,173,1.127,283,3.127,288,3.073,289,3.073,290,3.073,293,3.127,385,3.692,731,3.577,732,3.169,734,1.361,751,3.425,766,3.073,786,2.67,787,6.456,788,2.047,789,3.69,790,4.464,791,5.317,792,4.464,793,3.69,794,4.021,795,5.317,796,4.021,797,4.464,798,5.317,799,4.464,800,2.851,801,2.851,802,2.851,803,3.349,804,4.469,805,2.851,806,4.464,807,4.469,808,4.469,809,3.718,810,4.469,811,2.851,812,4.009,813,3.073,814,2.851,815,3.349,816,2.851,817,3.718,818,3.718,819,2.851,820,3.349,821,4.469,822,2.851,823,3.718,824,2.851,825,3.718,826,3.718,827,3.383,828,2.851,829,3.073,830,3.073,831,2.043,832,2.851,833,3.718,834,2.851,835,2.477,836,3.718,837,2.851,838,3.425,839,4.279,840,5.317,841,2.477,842,2.047,843,2.477]],["title/classes/CreateSeatDto.html",[0,0.2,844,2.846]],["body/classes/CreateSeatDto.html",[0,0.316,2,1.535,3,0.221,4,0.196,5,0.196,18,0.013,60,0.221,67,0.011,68,0.013,69,0.011,844,5.205,845,5.452,846,4.91]],["title/classes/CreateSectionDto.html",[0,0.2,847,2.472]],["body/classes/CreateSectionDto.html",[0,0.408,2,1.158,3,0.167,4,0.148,5,0.148,7,0.564,8,2.168,17,0.842,18,0.014,20,1.652,26,1.782,32,1.001,51,0.265,56,2.535,57,0.825,60,0.167,62,2.4,67,0.008,68,0.011,69,0.008,164,2.797,293,3.251,298,2.912,731,3.57,734,2.259,766,4.847,835,5.299,847,3.804,848,6.194,849,3.703,850,5.774,851,4.603,852,4.731,853,4.773,854,3.385,855,3.581,856,4.731,857,5.299,858,4.731,859,5.299,860,4.731,861,3.398,862,3.398,863,4.111]],["title/classes/CreateTicketDto.html",[0,0.2,864,2.472]],["body/classes/CreateTicketDto.html",[0,0.203,2,0.643,3,0.093,4,0.082,5,0.082,7,0.313,8,1.43,9,1.314,17,0.984,18,0.014,19,1.979,20,1.807,23,2.232,26,1.872,27,2.509,28,0.953,32,1.095,34,2.509,51,0.244,56,2.566,57,0.458,58,3.108,60,0.093,62,2.625,67,0.005,68,0.007,69,0.005,164,2.894,293,1.835,305,2.576,401,2.888,521,2.287,623,1.751,697,3.049,699,3.049,725,2.056,731,3.614,732,3.803,734,1.254,751,3.651,783,2.283,799,3.495,806,4.758,813,2.888,825,2.283,829,2.888,830,2.888,831,3.192,838,3.651,840,4.247,854,3.456,855,3.656,861,1.887,864,2.509,865,6.475,866,2.056,867,5.129,868,4.247,869,4.247,870,4.247,871,4.247,872,5.647,873,4.501,874,5.129,875,3.495,876,4.758,877,4.758,878,2.627,879,4.022,880,5.41,881,2.627,882,2.627,883,2.627,884,2.627,885,2.627,886,3.495,887,2.627,888,3.148,889,2.681,890,2.627,891,2.627,892,3.495,893,2.888,894,2.627,895,2.627,896,2.627,897,3.148,898,2.627,899,2.283,900,2.681,901,2.627,902,2.627,903,3.148,904,2.627,905,2.888,906,2.627,907,2.627,908,3.495,909,2.627,910,1.887,911,1.751,912,1.887,913,2.627,914,2.627,915,2.627,916,2.283]],["title/classes/CreateUserDto.html",[0,0.2,617,2.2]],["body/classes/CreateUserDto.html",[0,0.283,2,1.022,3,0.147,4,0.131,5,0.131,7,0.498,8,1.997,17,0.884,18,0.014,19,1.996,20,1.734,26,1.83,28,0.925,32,1.051,51,0.22,56,2.594,57,0.728,60,0.147,62,2.519,67,0.007,68,0.01,69,0.007,164,2.85,293,3.097,617,3.118,624,5.24,686,4.232,697,3.96,699,3.96,701,4.559,710,3.73,722,3.629,723,4.881,724,4.881,725,4.397,726,3.629,729,4.397,731,3.654,732,3.768,733,3.629,734,1.994,735,3.629,736,3.629,752,2.784,888,4.397,889,3.745,893,4.034,905,4.034,917,3.269,918,4.176,919,4.034,920,4.881,921,4.176,922,5.617,923,4.176,924,5.617,925,4.176,926,4.176,927,4.176,928,4.881,929,4.881,930,4.176,931,5.617,932,5.617,933,5.617]],["title/modules/FilesModule.html",[186,1.083,199,2.472]],["body/modules/FilesModule.html",[0,0.278,3,0.195,4,0.173,5,0.173,18,0.014,51,0.264,60,0.195,67,0.01,68,0.012,69,0.01,135,0.926,186,1.979,188,2.31,189,2.31,190,2.52,191,2.52,192,2.31,193,3.304,194,3.304,199,4.959,200,3.065,201,2.52,202,2.411,223,5.115,934,4.801,935,4.801,936,4.801,937,5.524,938,5.524]],["title/injectables/FilesService.html",[210,0.836,223,2.472]],["body/injectables/FilesService.html",[0,0.22,1,2.527,3,0.154,4,0.137,5,0.231,7,0.521,9,1.222,17,0.722,18,0.015,28,0.789,30,1.752,32,0.859,51,0.271,60,0.204,64,2.034,67,0.008,68,0.01,69,0.008,75,1.703,97,1.703,99,1.703,135,0.732,173,1.151,210,1.222,211,1.682,214,2.845,223,3.612,228,3.153,237,3.101,238,2.087,240,5.901,248,2.527,249,2.321,253,3.214,254,5.642,260,3.399,377,3.86,854,2.425,919,4.158,939,3.42,940,5.789,941,5.789,942,5.789,943,4.369,944,5.789,945,4.369,946,6.493,947,5.789,948,5.031,949,5.789,950,4.369,951,4.369,952,5.789,953,5.031,954,4.369,955,4.369,956,4.369,957,4.369,958,4.369,959,5.789,960,5.789,961,4.369,962,5.789,963,4.369,964,4.369,965,4.369]],["title/classes/Flight.html",[0,0.2,831,1.892]],["body/classes/Flight.html",[0,0.136,1,3.075,2,0.662,3,0.095,4,0.085,5,0.085,7,0.322,8,1.77,9,1.173,17,0.97,18,0.014,19,1.659,20,1.778,21,3.711,22,2.954,23,2.283,24,2.954,25,2.566,26,1.855,28,0.678,30,3.174,31,3.496,32,1.078,38,2.742,51,0.257,52,4.08,53,1.583,54,1.502,55,0.713,56,2.547,57,0.472,58,2.166,59,1.311,60,0.175,62,2.583,63,3.745,64,0.796,67,0.005,68,0.007,69,0.005,173,0.713,283,3.215,288,2.954,289,2.954,290,2.954,291,3.318,293,3.077,300,3.265,301,4.209,306,3.469,385,3.772,402,3.574,789,3.574,790,4.324,791,5.197,792,4.324,793,3.574,794,3.895,795,4.831,796,3.895,797,4.324,798,4.831,803,3.219,804,4.352,807,4.352,808,4.352,809,3.574,810,3.219,812,3.929,813,2.954,815,3.219,817,3.574,818,2.351,820,3.219,821,4.352,823,3.574,826,3.574,827,3.316,829,2.954,830,2.954,831,2.856,833,3.574,836,3.574,838,3.318,841,2.351,842,1.943,843,2.351,966,1.943,967,2.705,968,2.705,969,2.705,970,4.113,971,2.705,972,2.705,973,2.705,974,2.705,975,2.705,976,2.705,977,2.705,978,3.574,979,2.705,980,2.705,981,2.705,982,2.705,983,2.705,984,2.705,985,2.705,986,1.943,987,1.804,988,2.351]],["title/controllers/FlightsController.html",[70,1.256,989,2.846]],["body/controllers/FlightsController.html",[0,0.132,3,0.092,4,0.082,5,0.082,7,0.312,9,1.244,17,0.984,18,0.015,19,1.284,20,1.522,26,1.848,28,0.91,32,0.922,51,0.269,57,0.456,59,0.689,60,0.092,67,0.005,68,0.007,69,0.005,70,0.83,72,0.83,74,1.378,75,1.18,76,2.192,77,3.46,78,3.209,79,1.915,80,3.034,84,3.114,86,3.209,88,3.274,89,1.745,90,2.707,91,1.633,92,3.611,97,1.734,99,1.829,100,1.745,101,2.584,103,3.515,105,2.775,106,2.674,107,2.226,108,1.745,110,3.034,112,1.633,113,1.745,115,1.633,122,1.633,124,2.226,129,2.355,130,2.009,131,1.453,132,1.453,135,0.439,139,2.878,140,2.878,142,2.738,143,2.863,144,2.738,145,3.034,146,3.103,147,3.241,148,3.209,149,1.311,150,3.241,151,2.738,155,1.142,157,1.007,158,1.378,159,1.378,160,1.453,163,1.194,164,0.931,165,3.114,166,2.442,167,2.442,168,2.567,169,3.114,170,2.863,173,1.638,176,1.877,177,1.537,178,1.633,180,1.633,183,1.633,184,1.745,325,2.048,326,1.88,338,1.745,342,1.745,439,2.048,440,1.633,786,3.677,831,3.485,989,2.88,990,2.274,991,4.237,992,5.466,993,2.617,994,2.617,995,2.617,996,2.88,997,2.617,998,2.274,999,2.617,1000,5.802,1001,2.617,1002,4.876,1003,2.617,1004,2.617,1005,2.617,1006,2.617,1007,2.617,1008,3.929,1009,2.617,1010,2.617,1011,2.617,1012,2.617,1013,2.617,1014,2.617,1015,3.929,1016,2.617,1017,2.274,1018,2.617,1019,3.042,1020,2.274,1021,2.048,1022,3.816,1023,2.274,1024,2.617,1025,2.617,1026,2.617,1027,2.617,1028,2.617,1029,2.617,1030,2.617,1031,2.617,1032,2.617,1033,2.617]],["title/modules/FlightsModule.html",[186,1.083,537,2.472]],["body/modules/FlightsModule.html",[0,0.259,3,0.181,4,0.161,5,0.161,18,0.014,28,0.701,51,0.297,53,1.981,55,1.355,60,0.181,67,0.009,68,0.011,69,0.009,72,2.039,135,0.862,186,1.918,188,2.151,189,2.151,190,2.347,191,2.347,192,2.151,193,3.201,194,3.201,200,2.934,201,2.347,202,2.245,204,2.577,205,2.709,208,2.856,537,4.885,831,2.457,987,4.288,989,5.04,1019,5.069,1020,4.471,1021,4.027,1034,4.471,1035,4.471,1036,4.471,1037,5.145,1038,5.145,1039,4.471]],["title/injectables/FlightsService.html",[210,0.836,1019,2.472]],["body/injectables/FlightsService.html",[0,0.149,1,2.293,3,0.063,4,0.056,5,0.056,7,0.213,9,1.109,17,0.656,18,0.015,19,0.471,28,0.758,30,1.187,32,0.825,42,1.051,51,0.237,55,0.471,59,0.471,60,0.063,64,1.83,67,0.008,68,0.005,69,0.003,75,0.871,79,1.414,97,1.546,99,1.546,101,2.3,105,1.458,135,0.3,155,0.781,157,0.689,173,1.384,176,1.458,210,0.625,211,0.689,213,3.932,214,2.727,220,1.351,222,2.444,228,2.973,237,2.102,238,0.855,239,0.993,243,0.855,244,2.837,247,3.088,248,2.129,249,2.231,250,1.285,251,1.285,252,1.117,253,0.993,257,4.619,258,4.367,259,2.632,260,1.051,261,1.193,262,1.193,263,1.644,265,2.103,283,2.397,287,3.086,371,1.555,376,5.573,377,5.174,786,2.747,789,3.774,793,3.774,794,1.401,796,2.318,831,3.414,851,3.279,986,1.285,991,3.292,1000,4.567,1008,2.935,1015,2.935,1019,1.848,1021,1.401,1022,2.965,1023,1.555,1040,1.555,1041,2.961,1042,2.961,1043,4.403,1044,2.961,1045,2.961,1046,3.788,1047,1.79,1048,1.79,1049,2.573,1050,2.961,1051,1.79,1052,2.961,1053,1.79,1054,4.403,1055,1.79,1056,2.961,1057,1.79,1058,2.961,1059,1.79,1060,1.79,1061,1.79,1062,3.788,1063,1.555,1064,2.573,1065,1.555,1066,4.834,1067,4.403,1068,1.79,1069,1.79,1070,2.961,1071,1.79,1072,2.961,1073,1.79,1074,2.961,1075,1.79,1076,2.961,1077,1.79,1078,2.961,1079,1.79,1080,2.961,1081,1.79,1082,2.961,1083,1.79,1084,2.961,1085,1.79,1086,2.961,1087,1.79,1088,2.961,1089,1.79,1090,1.79,1091,2.961,1092,1.79,1093,2.961,1094,1.79,1095,1.79,1096,1.79,1097,2.573,1098,1.79,1099,2.961,1100,1.79,1101,1.555,1102,1.79,1103,1.79,1104,2.961,1105,2.961,1106,2.961,1107,2.961,1108,1.79,1109,1.79,1110,1.79,1111,1.401,1112,3.788,1113,1.79,1114,1.79,1115,1.79,1116,1.79,1117,2.961,1118,2.961,1119,4.403,1120,2.961,1121,2.961,1122,1.79,1123,1.79,1124,1.79,1125,1.79,1126,2.961,1127,2.961,1128,2.961,1129,1.79,1130,1.79,1131,1.79,1132,1.79,1133,1.79,1134,1.79,1135,1.79,1136,1.79,1137,1.79,1138,2.961,1139,2.961,1140,1.79,1141,1.79,1142,1.79,1143,1.79,1144,1.79,1145,1.79,1146,1.79,1147,1.79,1148,1.79]],["title/injectables/JwtAuthGuard.html",[210,0.836,523,2.2]],["body/injectables/JwtAuthGuard.html",[0,0.305,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,60,0.213,67,0.011,68,0.012,69,0.011,135,1.013,210,1.497,211,2.328,523,3.937,659,3.773,1149,4.032,1150,4.733,1151,5.255,1152,2.639,1153,6.047]],["title/injectables/JwtStrategy.html",[210,0.836,654,2.642]],["body/injectables/JwtStrategy.html",[0,0.235,3,0.164,4,0.146,5,0.146,7,0.555,9,1.275,17,0.753,18,0.015,28,0.823,32,0.896,51,0.288,60,0.164,64,1.777,67,0.008,68,0.011,69,0.008,75,1.777,97,1.777,99,1.371,135,0.781,173,1.591,210,1.275,211,1.794,214,2.579,220,2.755,243,2.884,244,2.126,248,2.034,249,1.868,259,2.334,517,3.546,521,2.292,547,5.993,548,3.347,638,3.647,654,4.026,659,2.907,667,4.049,674,3.934,687,4.726,691,4.049,812,2.907,1152,2.034,1154,3.647,1155,5.248,1156,4.66,1157,4.66,1158,6.039,1159,6.039,1160,4.66,1161,4.049,1162,4.049,1163,3.647,1164,4.66,1165,4.726,1166,3.647,1167,5.244,1168,3.647,1169,3.647,1170,4.049,1171,4.049,1172,4.66,1173,4.66,1174,4.66,1175,4.66]],["title/injectables/LocalAuthGuard.html",[210,0.836,629,2.846]],["body/injectables/LocalAuthGuard.html",[0,0.305,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,60,0.213,67,0.011,68,0.012,69,0.011,135,1.013,210,1.497,211,2.328,629,5.094,659,3.773,1150,4.733,1151,5.255,1152,2.639,1176,5.255,1177,6.047]],["title/injectables/LocalStrategy.html",[210,0.836,655,2.642]],["body/injectables/LocalStrategy.html",[0,0.249,3,0.174,4,0.155,5,0.155,7,0.589,9,1.324,17,0.783,18,0.014,19,2.013,28,0.855,32,0.931,51,0.284,60,0.174,64,1.455,67,0.009,68,0.011,69,0.009,75,1.846,97,1.846,99,1.455,135,0.829,163,2.256,173,1.303,210,1.324,211,1.904,214,2.653,220,2.256,228,2.862,244,2.256,248,2.159,249,1.983,519,4.242,521,2.357,622,3.871,655,4.183,659,3.086,686,4.183,687,4.911,710,3.816,1152,2.159,1155,5.452,1161,4.298,1162,4.298,1163,3.871,1170,4.298,1171,4.298,1178,4.298,1179,4.946,1180,4.946,1181,6.274,1182,4.946,1183,4.298,1184,4.946,1185,4.946]],["title/classes/LoginUserDto.html",[0,0.2,626,2.846]],["body/classes/LoginUserDto.html",[0,0.299,2,1.452,3,0.209,4,0.186,5,0.186,18,0.014,51,0.275,57,1.034,60,0.209,64,1.745,67,0.01,68,0.012,69,0.01,76,2.378,617,3.292,625,3.955,626,5.037,627,4.642,697,3.701,699,3.701,701,4.26,917,4.642,1152,2.589,1186,5.154,1187,3.693,1188,5.154]],["title/guards/RolesGuard.html",[567,2.846,1189,3.101]],["body/guards/RolesGuard.html",[0,0.225,3,0.157,4,0.14,5,0.14,7,0.532,9,1.24,17,0.733,18,0.015,28,0.801,30,1.792,32,0.872,51,0.284,60,0.157,64,1.932,67,0.008,68,0.01,69,0.008,75,1.729,97,1.729,99,1.315,135,0.749,160,2.48,163,2.038,173,1.548,210,1.24,220,2.038,228,2.68,237,2.134,238,2.134,243,2.134,248,1.95,249,1.792,253,2.48,260,2.624,517,3.45,521,2.01,554,3.497,567,4.22,661,3.209,675,6.463,812,2.788,815,4.599,919,3.209,1167,4.599,1168,3.497,1169,3.497,1190,4.468,1191,3.883,1192,7.245,1193,4.468,1194,7.581,1195,4.468,1196,4.468,1197,6.974,1198,4.468,1199,5.876,1200,6.565,1201,3.883,1202,4.599,1203,4.468,1204,4.468,1205,5.876,1206,4.468,1207,4.468,1208,4.468,1209,4.468,1210,4.468,1211,4.468,1212,4.468,1213,4.468,1214,4.468,1215,4.468]],["title/classes/SearchFlightDto.html",[0,0.2,1008,2.642]],["body/classes/SearchFlightDto.html",[0,0.383,2,0.916,3,0.132,4,0.117,5,0.117,7,0.446,8,1.854,9,1.1,17,0.881,18,0.014,19,1.945,20,1.728,26,1.827,30,1.501,32,1.047,51,0.235,56,2.51,57,0.653,60,0.132,62,2.51,67,0.007,68,0.009,69,0.007,164,2.846,293,2.378,298,2.489,303,2.689,731,3.627,732,3.784,734,1.788,751,3.476,752,2.497,753,3.744,765,4.53,766,3.744,771,4.53,788,2.689,803,4.08,804,5.336,807,5.075,808,5.075,810,5.075,820,4.08,821,5.871,838,3.476,851,3.252,861,2.689,863,3.254,889,3.476,1008,3.476,1097,5.211,1216,6.293,1217,6.817,1218,5.997,1219,3.745,1220,3.745,1221,5.213,1222,3.745,1223,4.08,1224,3.745,1225,3.745,1226,5.213,1227,3.745,1228,3.745,1229,3.745,1230,5.213,1231,6.485,1232,3.745,1233,3.745,1234,5.213,1235,5.213,1236,3.745,1237,5.213,1238,5.997,1239,3.745,1240,3.745,1241,3.745,1242,3.745]],["title/classes/Seat.html",[0,0.2,305,1.729]],["body/classes/Seat.html",[0,0.209,2,1.016,3,0.146,4,0.13,5,0.13,7,0.495,8,1.99,17,0.909,18,0.014,20,1.549,21,3.332,26,1.718,30,3.159,31,4.043,32,0.939,42,3.286,51,0.278,52,3.759,53,2.154,54,2.305,55,1.094,56,2.408,57,0.724,58,2.946,59,1.667,60,0.239,62,2.251,63,3.513,64,1.222,67,0.007,68,0.01,69,0.007,293,3.395,296,3.608,298,3.734,300,3.286,301,3.491,303,2.982,305,2.956,306,2.591,854,3.924,855,3.286,873,4.946,900,3.731,1243,2.768,1244,4.152,1245,4.152,1246,4.152,1247,5.885,1248,3.608,1249,4.019,1250,4.152,1251,2.982,1252,4.38,1253,4.38,1254,4.38,1255,4.152,1256,2.768,1257,3.608]],["title/controllers/SeatsController.html",[70,1.256,1258,2.846]],["body/controllers/SeatsController.html",[0,0.22,3,0.154,4,0.137,5,0.137,7,0.522,9,0.924,17,0.863,18,0.014,20,1.072,26,1.744,28,0.597,32,0.65,51,0.296,57,0.763,59,1.153,60,0.154,67,0.008,68,0.01,69,0.008,70,1.388,72,1.388,74,2.305,75,1.706,80,3.84,84,2.193,88,3.052,90,2.43,92,2.904,97,1.288,99,1.288,101,2.559,103,3.052,105,2.232,107,2.43,110,2.43,122,2.731,124,2.43,130,2.904,131,2.43,132,2.43,135,0.734,139,3.052,140,3.052,142,2.904,144,2.904,145,3.218,146,3.052,147,2.904,149,2.193,150,2.904,151,2.904,157,1.685,163,1.997,164,1.557,165,2.193,166,2.193,167,2.193,168,2.305,169,2.193,173,1.153,176,1.685,305,3.019,342,2.919,440,2.731,518,2.919,523,2.43,525,2.919,528,2.919,851,2.731,996,3.144,1149,2.919,1258,4.164,1259,3.805,1260,6.012,1261,4.798,1262,4.378,1263,4.378,1264,4.378,1265,4.378,1266,4.055,1267,3.805,1268,3.144,1269,3.427,1270,4.378,1271,4.378,1272,4.378,1273,4.378]],["title/modules/SeatsModule.html",[186,1.083,538,2.642]],["body/modules/SeatsModule.html",[0,0.259,3,0.181,4,0.161,5,0.161,18,0.014,28,0.701,51,0.297,53,1.981,55,1.355,60,0.181,67,0.009,68,0.011,69,0.009,72,2.039,135,0.862,186,1.918,188,2.151,189,2.151,190,2.347,191,2.347,192,2.151,193,3.201,194,3.201,200,2.934,201,2.347,202,2.245,204,2.577,205,2.709,208,2.856,305,2.245,538,5.221,1256,4.288,1258,5.04,1266,5.069,1267,4.471,1268,3.695,1274,4.471,1275,4.471,1276,4.471,1277,5.145,1278,5.145,1279,4.471]],["title/injectables/SeatsService.html",[210,0.836,1266,2.472]],["body/injectables/SeatsService.html",[0,0.236,3,0.165,4,0.146,5,0.146,7,0.558,9,1.278,17,0.755,18,0.014,28,0.825,32,0.898,51,0.289,55,1.233,59,1.233,60,0.165,67,0.008,68,0.011,69,0.008,75,1.782,97,1.782,99,1.377,101,2.626,105,1.801,135,0.784,157,1.801,173,1.233,176,1.801,210,1.278,211,1.801,213,3.726,214,2.584,220,2.135,222,3.94,228,2.762,237,2.892,238,2.235,239,2.598,243,2.235,244,3.062,247,2.598,248,2.042,249,1.876,258,2.598,259,2.344,265,2.598,305,3.287,1251,3.361,1260,5.834,1261,4.733,1266,3.778,1268,3.361,1269,3.663,1280,4.067,1281,6.713,1282,4.68,1283,4.68,1284,5.262,1285,4.68,1286,4.68,1287,6.056,1288,4.68,1289,4.68,1290,6.056,1291,4.68,1292,4.68,1293,4.68]],["title/classes/Section.html",[0,0.2,298,1.892]],["body/classes/Section.html",[0,0.403,2,1.042,3,0.15,4,0.133,5,0.133,7,0.507,8,2.024,17,0.935,18,0.014,20,1.569,21,3.375,26,1.731,30,3.122,31,3.958,32,0.951,51,0.28,52,3.798,53,2.191,54,2.364,55,1.122,56,2.433,57,0.742,58,2.996,59,1.688,60,0.241,62,2.279,63,3.159,64,1.253,67,0.007,68,0.01,69,0.007,293,2.596,298,3.405,300,2.5,301,3.55,305,3.112,306,2.657,850,5.355,851,4.269,853,5.355,854,3.958,855,3.342,857,4.945,859,4.945,911,2.839,1223,4.454,1294,2.839,1295,4.258,1296,4.258,1297,4.258,1298,4.258,1299,4.258,1300,4.258,1301,3.333,1302,3.058,1303,3.7]],["title/controllers/SectionsController.html",[70,1.256,1304,2.846]],["body/controllers/SectionsController.html",[0,0.144,3,0.1,4,0.089,5,0.089,7,0.34,9,1.205,17,0.98,18,0.015,19,1.353,20,1.498,26,1.847,28,0.908,32,0.908,51,0.269,57,0.497,59,0.751,60,0.1,67,0.005,68,0.007,69,0.005,70,0.904,72,0.904,74,1.501,75,1.259,76,2.289,77,3.593,78,3.353,79,2.043,80,3.169,84,3.065,86,2.513,88,2.253,90,2.852,92,3.577,97,1.68,99,1.8,100,1.901,101,2.642,103,3.61,105,2.828,107,2.375,108,1.901,110,3.169,112,1.779,113,1.901,115,1.779,122,1.779,124,2.375,129,2.513,130,2.143,131,1.582,132,1.582,135,0.478,139,2.705,140,2.705,142,2.86,143,2.513,144,2.86,145,3.169,146,3.222,147,3.218,148,3.353,149,1.428,150,3.218,151,2.86,155,1.244,157,1.097,158,1.501,159,1.501,160,1.582,163,1.3,164,1.014,165,3.065,166,1.428,167,2.573,168,2.705,169,3.065,170,3.016,173,1.612,176,1.977,177,1.674,178,1.779,180,1.779,183,1.779,184,1.901,287,2.513,298,3.508,316,2.477,326,2.047,337,2.477,338,1.901,342,1.901,440,1.779,847,3.817,862,2.047,996,2.047,998,2.477,1017,2.477,1304,3.073,1305,2.477,1306,2.851,1307,2.851,1308,4.279,1309,2.851,1310,2.851,1311,5.584,1312,2.851,1313,4.279,1314,3.718,1315,3.718,1316,2.851,1317,2.851,1318,2.851,1319,2.851,1320,2.851,1321,4.08,1322,2.851,1323,2.851,1324,2.851,1325,2.851,1326,3.205,1327,2.477,1328,3.349,1329,2.851,1330,2.851,1331,2.851,1332,2.851,1333,2.851,1334,2.851,1335,2.851]],["title/modules/SectionsModule.html",[186,1.083,539,2.642]],["body/modules/SectionsModule.html",[0,0.252,3,0.176,4,0.157,5,0.157,18,0.014,28,0.861,51,0.301,53,2.433,55,1.318,60,0.176,67,0.009,68,0.011,69,0.009,72,2.004,135,0.839,186,1.893,188,2.092,189,2.092,190,2.282,191,2.282,192,2.092,193,3.16,194,3.16,200,2.883,201,2.282,202,2.183,204,2.506,205,2.634,208,3.508,298,2.389,305,2.183,539,5.189,862,3.593,911,3.336,1256,4.214,1279,4.347,1302,4.539,1304,4.975,1326,5.05,1327,4.347,1336,4.347,1337,4.347,1338,4.347,1339,5.003,1340,5.003,1341,5.003]],["title/injectables/SectionsService.html",[210,0.836,1326,2.472]],["body/injectables/SectionsService.html",[0,0.235,3,0.113,4,0.1,5,0.1,7,0.381,9,1.355,17,0.801,18,0.015,28,0.875,32,0.994,42,1.878,51,0.271,55,0.843,59,0.843,60,0.113,64,1.617,67,0.006,68,0.008,69,0.006,75,1.371,97,1.889,99,1.889,101,2.716,105,2.116,135,0.536,155,1.396,157,1.231,173,1.591,176,2.116,210,0.984,211,1.231,213,4.25,214,2.948,220,2.126,222,3.839,228,3.297,237,2.884,238,1.528,239,1.776,243,2.225,244,3.155,247,3.352,248,2.399,249,2.204,253,1.776,257,3.934,258,3.719,259,3.025,263,1.776,265,3.051,287,2.736,298,3.683,305,1.396,376,3.347,377,3.107,847,3.768,850,2.504,851,3.429,862,2.297,911,2.133,1251,2.297,1284,4.776,1301,2.504,1311,5.248,1321,4.026,1326,2.907,1328,3.647,1342,2.78,1343,4.66,1344,4.66,1345,5.497,1346,4.66,1347,5.497,1348,3.199,1349,3.199,1350,4.66,1351,4.66,1352,3.199,1353,4.66,1354,3.199,1355,6.039,1356,3.199,1357,4.66,1358,3.199,1359,3.199,1360,3.199,1361,3.199,1362,3.199,1363,3.199,1364,5.497,1365,5.497,1366,6.039,1367,4.66,1368,3.199,1369,3.199,1370,3.199,1371,3.199,1372,3.199]],["title/classes/Ticket.html",[0,0.2,827,2.086]],["body/classes/Ticket.html",[0,0.119,2,0.579,3,0.083,4,0.074,5,0.074,7,0.282,8,1.318,9,1.092,17,0.989,18,0.015,19,1.94,20,1.767,21,3.705,23,2.057,26,1.85,27,2.312,28,0.88,30,3.205,31,3.905,32,1.071,34,2.312,51,0.245,52,4.051,53,1.427,54,1.312,55,0.623,56,2.537,57,0.412,58,3.14,59,1.204,60,0.21,62,2.568,63,3.843,64,0.696,67,0.004,68,0.006,69,0.004,291,2.471,293,1.691,300,3.039,301,3.229,305,2.259,306,2.312,401,2.662,521,2.271,623,1.576,697,2.852,699,2.852,812,2.852,813,2.662,827,2.407,829,2.662,830,2.662,831,3.17,838,3.048,854,4.051,855,3.502,867,4.498,868,3.973,869,3.973,870,3.973,871,3.973,872,5.584,873,4.451,874,4.498,875,3.221,876,4.498,877,4.498,880,3.973,886,3.221,888,2.901,889,2.471,892,3.221,893,2.662,897,4.051,900,3.451,903,4.051,905,2.662,908,3.221,910,1.698,911,1.576,978,3.221,1248,2.054,1249,3.283,1252,2.901,1253,2.901,1254,2.901,1373,1.576,1374,2.364,1375,2.364,1376,3.706,1377,2.364,1378,2.364,1379,2.364,1380,2.364,1381,2.364,1382,2.364,1383,2.364,1384,2.364,1385,2.364,1386,2.364,1387,2.364,1388,2.364,1389,2.364,1390,2.364,1391,2.364,1392,2.364,1393,2.364,1394,2.364,1395,2.364,1396,2.364,1397,2.364,1398,1.85,1399,3.221,1400,3.221,1401,3.221,1402,3.221,1403,2.364,1404,1.698,1405,2.054]],["title/controllers/TicketsController.html",[70,1.256,1406,2.846]],["body/controllers/TicketsController.html",[0,0.135,3,0.094,4,0.084,5,0.084,7,0.319,9,1.167,17,0.972,18,0.015,19,1.302,20,1.457,26,1.859,28,0.889,32,0.883,51,0.27,57,0.466,59,0.705,60,0.094,67,0.005,68,0.007,69,0.005,70,0.848,72,0.848,74,1.409,75,1.2,76,1.635,77,1.571,78,3.246,80,3.303,84,2.981,86,2.395,88,2.911,90,3.303,91,3.084,92,3.52,97,1.627,99,1.751,101,2.599,103,3.54,105,2.941,106,2.719,107,2.743,110,3.069,124,2.264,129,1.571,130,2.043,131,1.485,132,1.485,135,0.448,139,2.602,140,2.602,142,3.141,143,2.395,144,3.141,145,3.069,146,3.134,147,3.141,148,3.246,149,1.34,150,3.141,151,3.141,155,1.168,157,1.03,158,1.409,159,1.409,160,1.485,163,1.22,164,0.951,165,2.981,166,2.769,167,2.981,168,3.134,169,2.981,170,1.571,173,1.814,176,1.903,177,1.571,180,1.669,181,4.295,183,1.669,263,2.264,338,1.784,439,2.094,440,1.669,517,3.682,518,1.784,523,1.485,525,1.784,528,3.686,827,3.815,864,3.713,912,1.921,996,1.921,1149,1.784,1406,2.929,1407,2.325,1408,3.192,1409,2.675,1410,4.078,1411,2.675,1412,2.675,1413,2.675,1414,2.675,1415,2.675,1416,2.675,1417,2.675,1418,5.449,1419,2.675,1420,4.943,1421,2.675,1422,2.675,1423,2.675,1424,2.325,1425,2.325,1426,2.675,1427,2.675,1428,2.675,1429,2.675,1430,2.675,1431,2.675,1432,3.968,1433,2.675,1434,2.675,1435,2.675,1436,3.084,1437,2.325,1438,3.192,1439,2.675,1440,2.675,1441,2.675,1442,2.675,1443,2.675,1444,2.675,1445,2.675,1446,2.675,1447,2.675,1448,2.675]],["title/modules/TicketsModule.html",[186,1.083,540,2.642]],["body/modules/TicketsModule.html",[0,0.213,3,0.149,4,0.132,5,0.132,18,0.015,28,0.93,51,0.31,53,2.625,55,1.113,60,0.149,67,0.007,68,0.01,69,0.007,72,1.795,135,0.708,186,1.745,188,1.766,189,1.766,190,1.927,191,1.927,192,1.766,193,2.912,194,2.912,200,2.582,201,1.927,202,1.844,204,2.836,205,2.225,208,2.345,283,1.927,307,3.775,345,4.567,351,3.671,454,4.567,521,1.445,537,4.567,540,5.351,541,4.298,623,2.817,827,2.225,831,2.018,842,3.034,910,3.034,912,3.034,987,3.775,1039,3.671,1404,4.066,1406,4.586,1436,4.928,1437,3.671,1449,3.671,1450,3.671,1451,3.671,1452,4.225,1453,4.225,1454,4.225,1455,4.225,1456,4.225,1457,4.225,1458,4.225,1459,3.775,1460,4.225,1461,3.671]],["title/injectables/TicketsService.html",[210,0.836,1436,2.472]],["body/injectables/TicketsService.html",[0,0.118,1,1.025,3,0.083,4,0.074,5,0.074,7,0.28,9,1.183,17,0.699,18,0.015,28,0.764,32,0.882,42,2.673,51,0.26,55,0.619,59,0.619,60,0.083,64,2.067,67,0.004,68,0.006,69,0.004,75,1.085,79,1.122,97,1.649,99,1.649,101,2.784,105,2.48,135,0.394,155,1.025,157,0.904,173,1.476,176,2.48,210,0.778,211,0.904,213,4.046,214,2.806,220,1.682,222,3.954,228,3.092,237,3.164,238,1.122,239,1.304,243,2.463,244,3.356,247,3.576,248,2.811,249,2.583,257,4.419,258,4.178,259,3.395,263,1.304,265,3.576,283,2.938,286,1.838,287,2.673,304,1.687,360,3.956,372,2.041,374,3.204,376,4.963,377,4.608,383,3.204,521,2.319,623,1.566,679,4.868,710,1.942,789,1.687,793,1.687,827,3.639,831,3.354,842,1.687,864,3.218,873,1.465,910,1.687,912,1.687,986,1.687,1049,3.956,1065,2.041,1066,3.204,1101,2.041,1111,1.838,1398,1.838,1408,2.886,1418,4.87,1432,3.439,1436,2.301,1438,2.886,1462,2.041,1463,3.687,1464,5.158,1465,4.553,1466,4.553,1467,4.553,1468,2.349,1469,3.956,1470,2.349,1471,3.687,1472,3.687,1473,2.349,1474,2.349,1475,2.349,1476,6.625,1477,2.349,1478,2.349,1479,2.349,1480,2.349,1481,2.349,1482,1.687,1483,2.349,1484,2.349,1485,3.687,1486,3.204,1487,2.349,1488,2.349,1489,3.687,1490,2.349,1491,2.041,1492,3.687,1493,3.687,1494,2.349,1495,2.041,1496,3.687,1497,2.349,1498,2.349,1499,2.349,1500,2.349]],["title/classes/UpdateAirlineDto.html",[0,0.2,123,2.642]],["body/classes/UpdateAirlineDto.html",[0,0.305,2,1.48,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.054,60,0.213,67,0.011,68,0.012,69,0.011,76,2.425,82,3.773,123,4.729,156,4.733,738,4.733,1152,2.639,1187,3.184,1501,5.255,1502,6.047]],["title/classes/UpdateAirplaneDto.html",[0,0.2,328,2.642]],["body/classes/UpdateAirplaneDto.html",[0,0.305,2,1.48,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.054,60,0.213,67,0.011,68,0.012,69,0.011,76,2.425,313,3.773,328,4.729,334,4.733,758,4.733,1152,2.639,1187,3.184,1503,5.255,1504,6.047]],["title/classes/UpdateAirportDto.html",[0,0.2,438,2.642]],["body/classes/UpdateAirportDto.html",[0,0.305,2,1.48,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.054,60,0.213,67,0.011,68,0.012,69,0.011,76,2.425,426,3.773,438,4.729,446,4.733,768,4.733,1152,2.639,1187,3.184,1505,5.255,1506,6.047]],["title/classes/UpdateFlightDto.html",[0,0.2,1015,2.642]],["body/classes/UpdateFlightDto.html",[0,0.305,2,1.48,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.054,60,0.213,67,0.011,68,0.012,69,0.011,76,2.425,786,3.773,788,4.343,1015,4.729,1022,4.733,1152,2.639,1187,3.184,1507,5.255,1508,6.047]],["title/classes/UpdateSeatDto.html",[0,0.2,1261,2.642]],["body/classes/UpdateSeatDto.html",[0,0.374,2,1.293,3,0.186,4,0.165,5,0.165,7,0.63,8,2.325,17,0.659,18,0.014,20,1.293,26,1.542,32,0.784,51,0.291,56,2.325,57,0.921,60,0.186,62,1.878,67,0.009,68,0.011,69,0.009,76,2.118,164,2.525,731,3.275,734,2.523,844,3.794,846,4.135,854,3.629,855,3.839,861,3.794,873,5.037,899,4.591,900,4.359,916,4.591,1152,2.305,1187,2.782,1261,4.359,1268,3.794,1269,4.135,1509,5.682,1510,5.283,1511,5.283]],["title/classes/UpdateSectionDto.html",[0,0.2,1321,2.642]],["body/classes/UpdateSectionDto.html",[0,0.305,2,1.48,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.054,60,0.213,67,0.011,68,0.012,69,0.011,76,2.425,847,3.773,849,4.733,1152,2.639,1187,3.184,1321,4.729,1328,4.733,1512,5.255,1513,6.047]],["title/classes/UpdateTicketDto.html",[0,0.2,1432,2.642]],["body/classes/UpdateTicketDto.html",[0,0.305,2,1.48,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.054,60,0.213,67,0.011,68,0.012,69,0.011,76,2.425,864,3.773,866,4.733,1152,2.639,1187,3.184,1432,4.729,1438,4.733,1514,5.255,1515,6.047]],["title/classes/UpdateUserDataDto.html",[0,0.2,1516,2.642]],["body/classes/UpdateUserDataDto.html",[0,0.3,2,1.456,3,0.21,4,0.186,5,0.186,18,0.014,51,0.276,57,1.037,60,0.21,64,1.75,67,0.01,68,0.012,69,0.01,76,2.385,521,2.035,617,3.301,625,3.965,710,3.132,1152,2.596,1186,5.168,1187,3.699,1188,5.168,1516,4.683,1517,5.168,1518,5.168]],["title/classes/User.html",[0,0.2,521,1.356]],["body/classes/User.html",[0,0.173,2,0.842,3,0.121,4,0.108,5,0.108,7,0.41,8,1.747,17,0.942,18,0.015,19,1.904,20,1.73,21,3.723,26,1.828,28,0.67,30,3.221,31,3.924,32,1.049,38,3.275,51,0.259,52,4.013,53,1.891,54,1.911,55,0.907,56,2.571,57,0.6,58,2.587,59,1.509,60,0.22,62,2.514,63,3.813,64,1.013,67,0.006,68,0.009,69,0.006,291,3.275,293,2.613,300,2.885,301,3.065,306,2.147,521,2.419,686,3.819,695,5.526,697,3.574,699,3.574,701,4.114,710,3.289,729,3.845,827,3.478,854,3.667,855,2.885,889,3.275,893,3.528,905,3.528,919,3.528,920,2.991,928,4.269,929,4.269,1249,3.528,1408,5.376,1459,2.295,1482,2.472,1519,2.295,1520,3.442,1521,3.442,1522,3.442,1523,3.442,1524,3.442,1525,3.442,1526,3.442,1527,3.442,1528,3.442,1529,3.442,1530,3.442,1531,3.442,1532,3.442,1533,4.269,1534,3.442,1535,2.991]],["title/controllers/UsersController.html",[70,1.256,1536,2.846]],["body/controllers/UsersController.html",[0,0.143,3,0.1,4,0.089,5,0.089,7,0.339,9,1.204,17,0.962,18,0.015,19,0.75,20,1.497,26,1.854,28,0.833,32,0.907,51,0.275,57,0.496,59,0.75,60,0.1,67,0.005,68,0.007,69,0.005,70,0.903,72,0.903,74,1.499,75,1.258,77,3.771,78,3.35,79,2.041,80,2.373,84,3.063,88,3.004,89,1.898,90,2.373,91,1.776,92,3.576,97,1.679,99,1.799,101,2.11,103,3.759,105,2.196,107,2.373,110,3.167,115,1.776,124,2.373,125,2.228,130,2.571,131,1.58,132,1.58,135,0.477,139,2.703,140,2.703,142,3.217,144,2.571,145,3.167,146,3.382,147,3.217,148,2.51,149,1.426,150,3.217,151,3.217,157,1.096,158,1.499,159,1.499,160,1.58,163,1.299,164,1.012,165,3.063,166,2.571,167,3.063,168,2.251,169,3.063,170,2.51,173,1.611,176,1.976,177,1.672,178,1.776,440,1.776,514,2.474,517,3.771,518,1.898,521,2.587,523,1.58,525,1.898,528,3.422,621,4.922,674,2.849,710,1.499,717,4.077,1149,1.898,1314,2.474,1315,2.474,1424,2.474,1425,2.474,1516,4.077,1536,3.07,1537,2.474,1538,3.715,1539,4.275,1540,4.275,1541,2.847,1542,4.275,1543,2.847,1544,4.275,1545,4.275,1546,2.847,1547,2.847,1548,2.847,1549,2.847,1550,2.847,1551,2.847,1552,2.847,1553,2.847,1554,2.847,1555,2.847,1556,2.847,1557,2.847,1558,2.847,1559,2.847,1560,2.847,1561,2.847,1562,2.847,1563,2.474,1564,2.228,1565,2.474,1566,2.474,1567,2.474,1568,2.847,1569,2.847,1570,2.847,1571,2.847,1572,2.847,1573,2.847,1574,2.847,1575,2.847,1576,2.847,1577,2.847,1578,2.847,1579,2.847]],["title/modules/UsersModule.html",[186,1.083,541,2.327]],["body/modules/UsersModule.html",[0,0.254,3,0.178,4,0.158,5,0.158,18,0.014,28,0.687,51,0.301,53,1.939,55,1.327,60,0.178,67,0.009,68,0.011,69,0.009,72,2.012,135,0.844,186,1.899,188,2.106,189,2.106,190,2.298,191,2.298,192,2.106,193,3.17,194,3.17,200,2.895,201,2.298,202,2.199,204,2.523,205,2.653,208,2.796,521,1.723,536,3.96,541,4.577,657,5.516,674,4.498,1459,4.232,1461,4.378,1536,4.991,1563,4.378,1564,3.943,1580,4.378,1581,4.378,1582,4.378,1583,5.038,1584,5.038,1585,5.038]],["title/injectables/UsersService.html",[210,0.836,674,2.2]],["body/injectables/UsersService.html",[0,0.127,3,0.089,4,0.079,5,0.079,7,0.301,9,1.349,17,0.798,18,0.015,19,1.257,28,0.871,32,0.98,51,0.259,55,0.666,59,0.666,60,0.089,64,1.943,67,0.004,68,0.007,69,0.004,75,1.149,79,1.208,97,1.881,99,1.881,101,2.679,105,2.066,135,0.424,155,1.104,157,0.973,173,1.684,176,2.066,210,0.824,211,0.973,213,4.274,214,2.964,220,1.154,222,2.979,228,3.342,237,2.929,238,1.208,239,1.404,243,1.208,244,3.404,247,3.548,248,2.79,249,2.648,252,2.977,253,1.404,257,3.601,258,3.404,259,3.582,260,1.485,261,1.686,262,1.686,263,1.404,265,2.979,521,2.687,617,2.979,621,4.742,625,1.686,674,2.168,679,4.8,686,3.579,688,3.057,692,2.198,698,2.198,700,2.198,702,2.198,705,3.394,706,2.198,707,3.394,710,3.229,712,3.394,714,4.147,717,3.579,1111,1.979,1469,3.394,1482,1.816,1486,5.329,1491,3.394,1495,4.147,1516,3.579,1538,3.394,1564,1.979,1565,2.198,1566,2.198,1567,2.198,1586,2.198,1587,4.772,1588,3.906,1589,3.906,1590,5.368,1591,3.906,1592,3.906,1593,4.772,1594,2.529,1595,2.529,1596,2.529,1597,2.529,1598,3.906,1599,2.529,1600,3.906,1601,2.529,1602,2.529,1603,3.906,1604,2.529,1605,3.906,1606,2.529,1607,2.529,1608,2.529,1609,2.529,1610,2.529,1611,4.772,1612,3.906,1613,3.906,1614,3.906,1615,3.906,1616,3.906,1617,2.529,1618,3.906,1619,2.529,1620,2.529,1621,2.529,1622,2.529,1623,2.529,1624,2.529,1625,2.529,1626,2.529]],["title/coverage.html",[1627,4.243]],["body/coverage.html",[0,0.402,1,1.239,5,0.089,6,3.064,17,0.354,18,0.014,65,2.039,67,0.005,68,0.007,69,0.005,70,2.262,71,2.039,73,2.467,82,1.772,123,1.893,152,1.772,158,1.495,159,2.247,186,0.776,192,1.187,210,1.595,212,2.467,223,1.772,249,1.139,283,1.295,284,3.064,298,1.356,305,1.239,307,1.893,309,2.039,310,2.467,313,1.772,328,1.893,331,1.772,352,2.467,385,1.495,386,3.064,420,2.039,422,2.039,423,2.467,426,1.772,438,1.893,443,1.772,461,2.467,507,2.039,508,2.467,519,1.576,521,1.753,523,1.576,542,1.893,567,2.039,592,2.467,593,2.039,594,2.467,617,1.576,624,2.039,626,2.039,627,2.222,629,2.039,654,1.893,655,1.893,671,2.467,674,1.576,717,1.893,718,2.467,719,2.467,737,2.467,738,3.339,757,2.467,758,3.339,767,2.467,768,3.339,786,1.772,787,2.467,788,3.681,827,1.495,831,1.356,844,2.039,845,2.467,846,3.339,847,1.772,848,2.467,849,3.339,864,1.772,865,2.467,866,3.339,917,3.339,939,2.222,966,3.064,987,1.893,989,2.039,990,2.467,1008,1.893,1015,1.893,1019,1.772,1040,2.467,1149,1.893,1150,3.339,1154,3.339,1165,2.222,1166,2.222,1176,2.467,1178,2.467,1189,2.222,1191,2.467,1202,2.222,1216,2.467,1243,2.845,1256,1.893,1258,2.039,1259,2.467,1261,1.893,1266,1.772,1280,2.467,1294,2.845,1302,2.039,1304,2.039,1305,2.467,1321,1.893,1326,1.772,1342,2.467,1373,2.845,1404,2.039,1406,2.039,1407,2.467,1432,1.893,1436,1.772,1459,1.893,1462,2.467,1501,2.467,1503,2.467,1505,2.467,1507,2.467,1509,2.467,1512,2.467,1514,2.467,1516,1.893,1517,2.467,1518,2.467,1519,2.845,1536,2.039,1537,2.467,1586,2.467,1627,2.222,1628,2.84,1629,2.84,1630,2.84,1631,8.322,1632,6.847,1633,6.656,1634,5.698,1635,7.936,1636,7.341,1637,6.416,1638,4.267,1639,5.125,1640,3.708,1641,6.416,1642,4.267,1643,3.339,1644,4.267,1645,2.84,1646,2.84,1647,2.84]],["title/dependencies.html",[189,1.994,1648,3.303]],["body/dependencies.html",[0,0.309,18,0.015,55,1.257,57,0.832,59,1.257,67,0.008,68,0.011,69,0.008,130,2.39,135,0.8,137,4.147,138,4.8,189,1.995,548,3.428,551,4.147,554,3.735,572,4.147,638,3.735,659,2.977,661,3.428,688,3.735,734,2.279,948,4.147,953,4.147,1063,4.147,1064,4.147,1163,5.304,1183,4.147,1201,4.147,1649,4.772,1650,6.776,1651,4.772,1652,4.772,1653,4.772,1654,4.772,1655,4.772,1656,4.772,1657,4.772,1658,4.772,1659,4.772,1660,4.772,1661,4.772,1662,6.776,1663,4.772,1664,4.772,1665,6.132,1666,4.772,1667,4.772,1668,4.772,1669,4.772,1670,4.772,1671,4.772,1672,4.772,1673,4.772,1674,4.772,1675,4.772,1676,4.772,1677,4.772,1678,4.772,1679,4.772,1680,4.772,1681,4.772,1682,4.772,1683,4.772,1684,4.772,1685,4.772,1686,4.772,1687,4.772,1688,4.772,1689,4.772,1690,4.772,1691,4.772,1692,4.772,1693,4.772,1694,4.772,1695,4.772,1696,4.772,1697,4.772,1698,4.772]],["title/miscellaneous/enumerations.html",[1699,1.833,1700,4.144]],["body/miscellaneous/enumerations.html",[0,0.314,1,2.718,7,0.583,17,0.777,18,0.014,67,0.009,68,0.011,69,0.009,240,4.875,521,2.131,695,4.474,853,4.875,872,4.875,873,4.502,897,4.875,900,4.812,903,4.875,939,3.828,1223,4.875,1243,3.261,1247,5.413,1252,5.648,1253,5.648,1254,5.648,1294,3.261,1373,3.261,1399,5.413,1400,5.413,1401,5.413,1402,5.413,1519,3.261,1533,5.413,1699,2.715,1700,4.25,1701,3.828,1702,4.89,1703,3.828,1704,5.365,1705,3.828,1706,7.182]],["title/miscellaneous/functions.html",[1699,1.833,1707,4.144]],["body/miscellaneous/functions.html",[7,0.754,18,0.013,67,0.011,68,0.013,69,0.011,192,3.206,1643,4.953,1699,3.513,1707,5.499,1708,5.499]],["title/index.html",[7,0.394,1709,3.303,1710,3.303]],["body/index.html",[4,0.159,18,0.014,26,1.2,67,0.009,68,0.011,69,0.009,1627,3.98,1711,5.085,1712,5.085,1713,6.385,1714,5.085,1715,5.085,1716,5.085,1717,5.085,1718,5.085,1719,5.085,1720,6.979,1721,5.085,1722,5.085,1723,5.085,1724,5.085,1725,7.811,1726,5.085,1727,5.085,1728,5.085,1729,7.696,1730,5.085,1731,5.085,1732,6.385,1733,5.085,1734,5.085,1735,5.085,1736,5.085,1737,6.385,1738,6.385,1739,5.085,1740,5.085,1741,5.085,1742,6.385,1743,6.385,1744,5.085,1745,5.085,1746,5.085,1747,5.085,1748,5.085,1749,4.419,1750,5.085,1751,5.085,1752,5.085,1753,5.085,1754,5.085,1755,5.085,1756,5.085,1757,5.085,1758,5.085,1759,5.085,1760,5.085,1761,5.085,1762,5.085,1763,5.085,1764,5.085,1765,5.085,1766,5.085,1767,5.085]],["title/modules.html",[188,2.266]],["body/modules.html",[18,0.012,67,0.01,68,0.012,69,0.01,187,3.702,188,2.321,199,3.464,345,3.464,454,3.464,532,3.988,536,3.464,537,3.464,538,3.702,539,3.702,540,3.702,541,3.26,1749,7.101,1768,8.172,1769,8.172,1770,8.172]],["title/overview.html",[1771,4.71]],["body/overview.html",[2,0.87,18,0.014,42,2.087,67,0.006,68,0.009,69,0.006,72,1.127,152,4.452,186,0.971,187,4.86,188,1.486,189,1.486,190,1.621,191,1.621,192,1.486,193,1.621,194,1.621,195,3.089,196,3.089,197,3.089,198,3.089,199,4.452,200,2.293,201,1.621,202,1.551,211,1.368,223,4.452,331,4.452,345,4.452,346,3.089,347,3.089,348,3.089,443,4.452,454,4.452,455,3.089,456,3.089,457,3.089,519,3.961,532,5.818,533,3.089,534,3.089,535,3.089,536,4.689,537,4.452,538,4.629,539,4.629,540,5.194,541,4.19,542,3.888,651,3.089,652,3.089,653,3.089,654,3.888,655,3.888,674,3.961,934,3.089,935,3.089,936,3.089,1019,4.452,1034,3.089,1035,3.089,1036,3.089,1189,2.782,1266,4.452,1274,3.089,1275,3.089,1276,3.089,1326,4.452,1336,3.089,1337,3.089,1338,3.089,1436,4.452,1449,3.089,1450,3.089,1451,3.089,1580,3.089,1581,3.089,1582,3.089,1771,3.089,1772,3.555,1773,3.555,1774,3.555,1775,3.555]],["title/miscellaneous/typealiases.html",[1699,1.833,1776,4.769]],["body/miscellaneous/typealiases.html",[6,4.203,7,0.697,17,0.73,18,0.012,61,5.445,67,0.01,68,0.012,69,0.01,284,4.203,304,4.996,386,4.203,418,5.445,966,4.203,986,4.996,1243,3.901,1251,4.996,1294,3.901,1301,5.445,1373,3.901,1398,5.445,1482,4.996,1519,3.901,1699,3.248,1701,4.58,1703,4.58,1704,4.58,1705,4.58,1777,5.852,1778,5.085,1779,5.085,1780,5.085,1781,5.085]],["title/miscellaneous/variables.html",[1699,1.833,1782,4.144]],["body/miscellaneous/variables.html",[6,3.413,7,0.566,17,0.763,18,0.014,19,1.611,65,4.392,66,4.129,67,0.008,68,0.011,69,0.008,158,3.22,159,2.502,173,1.252,186,1.671,284,3.413,307,4.077,308,4.129,386,3.413,420,4.392,421,4.129,517,3.591,695,4.857,812,2.964,966,3.413,987,4.077,988,4.129,1154,3.719,1165,4.786,1166,3.719,1167,5.293,1168,3.719,1169,3.719,1202,4.786,1243,3.168,1249,5.74,1256,4.077,1257,4.129,1294,3.168,1302,4.392,1303,4.129,1373,3.168,1404,4.392,1405,4.129,1459,4.077,1519,3.168,1535,4.129,1640,5.876,1643,3.719,1699,2.637,1701,3.719,1703,3.719,1704,3.719,1705,3.719,1706,6.945,1708,4.129,1778,4.129,1779,4.129,1780,4.129,1781,4.129,1782,4.129,1783,4.751,1784,6.115,1785,4.751]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":833,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0.6.3",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":826,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0/1",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1638,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1639,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1641,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":808,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["08",{"_index":876,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["1",{"_index":42,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["1.1.4",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1773,"title":{},"body":{"overview.html":{}}}],["11",{"_index":1772,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1774,"title":{},"body":{"overview.html":{}}}],["15t15:35:00.000z",{"_index":1230,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["16t15:35:00.000z",{"_index":823,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["1700",{"_index":857,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["18t15:35:00.000z",{"_index":1234,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["1992",{"_index":43,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["2.1.4",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":836,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["2000",{"_index":875,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2016",{"_index":908,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2021",{"_index":807,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["21t09:15:00.000z",{"_index":809,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["23",{"_index":813,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["27",{"_index":1775,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1226,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["3.0.2",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["3.4.3",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["31t00:00:00.000z",{"_index":877,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["380951234567",{"_index":928,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["4",{"_index":785,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4)@apiproperty({example",{"_index":780,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4.0.0",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":294,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["5.0.1",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["5.12.9",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["6.4.6",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":290,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["8,12",{"_index":736,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8,12}$')@apiproperty({example",{"_index":726,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8.3.2",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":725,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["9)@apiproperty({example",{"_index":885,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["90",{"_index":859,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["9065",{"_index":830,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["__v",{"_index":258,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["a.airplane.amountofseat",{"_index":1116,"title":{},"body":{"injectables/FlightsService.html":{}}}],["a.airplane.sections.foreach((s",{"_index":1118,"title":{},"body":{"injectables/FlightsService.html":{}}}],["a1b2@c3d",{"_index":729,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["add(3",{"_index":1104,"title":{},"body":{"injectables/FlightsService.html":{}}}],["admin",{"_index":1533,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["adult",{"_index":903,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["aerospatiale/alenia",{"_index":288,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airline",{"_index":1,"title":{"classes/Airline.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["airline'})@apicreatedresponse({description",{"_index":85,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@apiokresponse({description",{"_index":102,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@prop({required",{"_index":37,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({trim",{"_index":45,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({unique",{"_index":29,"title":{},"body":{"classes/Airline.html":{}}}],["airline.airlinenameeng",{"_index":268,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameru",{"_index":270,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptioneng",{"_index":272,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionru",{"_index":274,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionua",{"_index":276,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.dto",{"_index":156,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{}}}],["airline.dto.ts",{"_index":738,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["airline.dto.ts:12",{"_index":743,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:21",{"_index":740,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:30",{"_index":741,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:40",{"_index":748,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:50",{"_index":745,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:60",{"_index":746,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:71",{"_index":750,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.logo",{"_index":280,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.name",{"_index":209,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airline.save",{"_index":281,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedocument",{"_index":61,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"miscellaneous/typealiases.html":{}}}],["airlinedto",{"_index":98,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameeng",{"_index":267,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameru",{"_index":269,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameua",{"_index":246,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptioneng",{"_index":271,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionru",{"_index":273,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionua",{"_index":275,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlineid",{"_index":231,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinemodel",{"_index":225,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinenameeng",{"_index":10,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameru",{"_index":11,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameua",{"_index":12,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["airlines",{"_index":25,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airlines'})@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airlines.controller",{"_index":206,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airlines.service",{"_index":153,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{}}}],["airlines/airlines.module",{"_index":560,"title":{},"body":{"modules/AppModule.html":{}}}],["airlineschema",{"_index":65,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airlinescontroller",{"_index":71,"title":{"controllers/AirlinesController.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"coverage.html":{}}}],["airlinesmodule",{"_index":187,"title":{"modules/AirlinesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["airlinesservice",{"_index":152,"title":{"injectables/AirlinesService.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"coverage.html":{},"overview.html":{}}}],["airline})@apibadrequestresponse({description",{"_index":87,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@apiparam({name",{"_index":104,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@apitoomanyrequestsresponse({description",{"_index":118,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airplane",{"_index":283,"title":{"classes/Airplane.html":{}},"body":{"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["airplane'})@apicreatedresponse({description",{"_index":314,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane'})@apiokresponse({description",{"_index":320,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane.airplanename",{"_index":382,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplane.amountofseat",{"_index":1492,"title":{},"body":{"injectables/TicketsService.html":{}}}],["airplane.dto",{"_index":334,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{}}}],["airplane.dto.ts",{"_index":758,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["airplane.dto.ts:21",{"_index":759,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:26",{"_index":761,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:35",{"_index":763,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.name",{"_index":351,"title":{},"body":{"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{}}}],["airplane.save",{"_index":383,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanedocument",{"_index":304,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["airplanedto",{"_index":319,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanedto.airplanename",{"_index":381,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplaneid",{"_index":365,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplanemodel",{"_index":360,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanename",{"_index":285,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["airplanes",{"_index":311,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanes'})@apiokresponse({description",{"_index":323,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplanes.controller",{"_index":350,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["airplanes.service",{"_index":332,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{}}}],["airplanes/airplanes.module",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["airplaneschema",{"_index":307,"title":{},"body":{"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airplanescontroller",{"_index":309,"title":{"controllers/AirplanesController.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"coverage.html":{}}}],["airplanesmodule",{"_index":345,"title":{"modules/AirplanesModule.html":{}},"body":{"modules/AirplanesModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airplanesservice",{"_index":331,"title":{"injectables/AirplanesService.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"coverage.html":{},"overview.html":{}}}],["airplane})@apibadrequestresponse({description",{"_index":315,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@apiparam({name",{"_index":321,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airport",{"_index":385,"title":{"classes/Airport.html":{}},"body":{"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"coverage.html":{}}}],["airport'})@apicreatedresponse({description",{"_index":427,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@apiokresponse({description",{"_index":432,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@prop({required",{"_index":402,"title":{},"body":{"classes/Airport.html":{},"classes/Flight.html":{}}}],["airport'})@prop({trim",{"_index":398,"title":{},"body":{"classes/Airport.html":{}}}],["airport.airportcountryeng",{"_index":488,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryru",{"_index":492,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryua",{"_index":490,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameeng",{"_index":494,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameru",{"_index":498,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameua",{"_index":496,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttowneng",{"_index":500,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownru",{"_index":504,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownua",{"_index":502,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.dto",{"_index":446,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{}}}],["airport.dto.ts",{"_index":768,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["airport.dto.ts:16",{"_index":775,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:25",{"_index":773,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:34",{"_index":774,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:41",{"_index":781,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:50",{"_index":772,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:59",{"_index":769,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:68",{"_index":770,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:77",{"_index":778,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:86",{"_index":776,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:95",{"_index":777,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.iata",{"_index":486,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.name",{"_index":460,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airport.save",{"_index":505,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportcountryeng",{"_index":387,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryru",{"_index":388,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryua",{"_index":389,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportdocument",{"_index":418,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"miscellaneous/typealiases.html":{}}}],["airportdto",{"_index":431,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airportdto.airportcountryeng",{"_index":487,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryru",{"_index":491,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryua",{"_index":489,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameeng",{"_index":493,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameru",{"_index":497,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameua",{"_index":495,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttowneng",{"_index":499,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownru",{"_index":503,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownua",{"_index":501,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.iata",{"_index":482,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportid",{"_index":474,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportmodel",{"_index":469,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportnameeng",{"_index":390,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameru",{"_index":391,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameua",{"_index":392,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airports",{"_index":424,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airports'})@apiokresponse({description",{"_index":435,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airports.controller",{"_index":459,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airports.service",{"_index":444,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{}}}],["airports/airports.module",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["airportschema",{"_index":420,"title":{},"body":{"classes/Airport.html":{},"modules/AirportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airportscontroller",{"_index":422,"title":{"controllers/AirportsController.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"coverage.html":{}}}],["airportsmodule",{"_index":454,"title":{"modules/AirportsModule.html":{}},"body":{"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airportsservice",{"_index":443,"title":{"injectables/AirportsService.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"coverage.html":{},"overview.html":{}}}],["airporttowneng",{"_index":393,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownru",{"_index":394,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownua",{"_index":395,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airport})@apibadrequestresponse({description",{"_index":428,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@apiparam({name",{"_index":433,"title":{},"body":{"controllers/AirportsController.html":{}}}],["aliases",{"_index":1777,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":250,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["amazing",{"_index":1750,"title":{},"body":{"index.html":{}}}],["amount",{"_index":295,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["amountofseat",{"_index":286,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"injectables/TicketsService.html":{}}}],["apibadrequestresponse",{"_index":139,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":140,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":141,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apiconsumes('multipart/form",{"_index":172,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apicookieauth",{"_index":142,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":143,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["apiforbiddenresponse",{"_index":144,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":145,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":146,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":147,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":84,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":148,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":56,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["apiproperty({example",{"_index":21,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["apiproperty({type",{"_index":749,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["apipropertyoptional",{"_index":838,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{}}}],["apipropertyoptional({example",{"_index":978,"title":{},"body":{"classes/Flight.html":{},"classes/Ticket.html":{}}}],["apiresponse",{"_index":1325,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags",{"_index":149,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags('airlines",{"_index":161,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apitags('airplanes",{"_index":335,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["apitags('airports",{"_index":447,"title":{},"body":{"controllers/AirportsController.html":{}}}],["apitags('app",{"_index":526,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('authentication",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('flights",{"_index":1024,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('seats",{"_index":1270,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('sections",{"_index":1329,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags('tickets",{"_index":1439,"title":{},"body":{"controllers/TicketsController.html":{}}}],["apitags('users",{"_index":1568,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":150,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":151,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":1727,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":556,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":555,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":552,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":553,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":507,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1719,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":532,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":542,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr",{"_index":1113,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arr.push(a",{"_index":1121,"title":{},"body":{"injectables/FlightsService.html":{}}}],["array.from(new",{"_index":1124,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arraynotempty",{"_index":1237,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["arrayunique",{"_index":764,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["arrival",{"_index":804,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["arrivalairport",{"_index":789,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["arrivalairport.airportnameeng",{"_index":1141,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameru",{"_index":1142,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameua",{"_index":1140,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttowneng",{"_index":1145,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownru",{"_index":1146,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownua",{"_index":1144,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.iata",{"_index":1143,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivaltime",{"_index":790,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["async",{"_index":214,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["atr",{"_index":289,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["auth",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":662,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":160,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"guards/RolesGuard.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.decorator.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":525,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1150,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":520,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":524,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/roles.guard",{"_index":568,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":593,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1151,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1153,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1177,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":536,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1760,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":519,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":244,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["b2a3#d1c",{"_index":727,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["baby",{"_index":1401,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["backers",{"_index":1751,"title":{},"body":{"index.html":{}}}],["bad",{"_index":88,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["badrequest",{"_index":337,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/SectionsController.html":{}}}],["badrequest'})@apiunauthorizedresponse({description",{"_index":316,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/SectionsController.html":{}}}],["badrequestexception",{"_index":371,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{}}}],["badrequestexception('airplane",{"_index":380,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["badrequestexception('flight",{"_index":1068,"title":{},"body":{"injectables/FlightsService.html":{}}}],["baggage",{"_index":791,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["bcrypt",{"_index":688,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1616,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(pass",{"_index":713,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.newpassword",{"_index":1624,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.password",{"_index":708,"title":{},"body":{"injectables/AuthService.html":{}}}],["binary",{"_index":756,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["birthday",{"_index":867,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["birthday'})@prop({required",{"_index":1374,"title":{},"body":{"classes/Ticket.html":{}}}],["body",{"_index":130,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["booked",{"_index":900,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":815,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":192,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":1122,"title":{},"body":{"injectables/FlightsService.html":{}}}],["browse",{"_index":1770,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1768,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1714,"title":{},"body":{"index.html":{}}}],["business",{"_index":1223,"title":{},"body":{"classes/SearchFlightDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["cache",{"_index":572,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":544,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":545,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.registerasync",{"_index":573,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":1192,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1196,"title":{},"body":{"guards/RolesGuard.html":{}}}],["carryonbaggage",{"_index":792,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["catch",{"_index":260,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":1542,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":1539,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(@request",{"_index":1576,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1541,"title":{},"body":{"controllers/UsersController.html":{}}}],["changeuserpassword",{"_index":1587,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassword(userid",{"_index":1596,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassworddto",{"_index":717,"title":{"classes/ChangeUserPasswordDto.html":{}},"body":{"classes/ChangeUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changeuserpassworddto})@apitoomanyrequestsresponse({description",{"_index":1546,"title":{},"body":{"controllers/UsersController.html":{}}}],["child",{"_index":1400,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["citizenship",{"_index":880,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenship'})@prop({required",{"_index":1379,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenship'})@prop({trim",{"_index":1376,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenshipeng",{"_index":868,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipru",{"_index":869,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipua",{"_index":870,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["class",{"_index":0,"title":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["class'})@prop({required",{"_index":1295,"title":{},"body":{"classes/Section.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_airlinesmodule",{"_index":195,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_exports",{"_index":197,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_imports",{"_index":196,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_providers",{"_index":198,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule",{"_index":346,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_exports",{"_index":347,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_providers",{"_index":348,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airportsmodule",{"_index":455,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_exports",{"_index":457,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_providers",{"_index":456,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":533,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":534,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":535,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":651,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":652,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":653,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":934,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":936,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":935,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_flightsmodule",{"_index":1034,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_exports",{"_index":1036,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_providers",{"_index":1035,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule",{"_index":1274,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_exports",{"_index":1276,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_providers",{"_index":1275,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule",{"_index":1336,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_exports",{"_index":1337,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_providers",{"_index":1338,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":1449,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":1451,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":1452,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":1450,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1580,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1581,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1582,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compression",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":579,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_limit",{"_index":582,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":580,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":546,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":569,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":547,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache_ttl",{"_index":576,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":670,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":667,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('mongo_db_uri",{"_index":585,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":64,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":220,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(seat.name",{"_index":1288,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1609,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(airlinemodel",{"_index":221,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["constructor(airplanemodel",{"_index":358,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["constructor(airportmodel",{"_index":467,"title":{},"body":{"injectables/AirportsService.html":{}}}],["constructor(authservice",{"_index":1179,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(flightmodel",{"_index":1047,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(jwtservice",{"_index":1193,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(private",{"_index":163,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["constructor(seatmodel",{"_index":1282,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(sectionmodel",{"_index":1348,"title":{},"body":{"injectables/SectionsService.html":{}}}],["constructor(ticketmodel",{"_index":1468,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(usermodel",{"_index":1594,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":1156,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersservice",{"_index":673,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":1199,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1208,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1207,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1209,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('airlines",{"_index":162,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["controller('airplanes",{"_index":336,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["controller('airports",{"_index":448,"title":{},"body":{"controllers/AirportsController.html":{}}}],["controller('auth",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('flights",{"_index":1025,"title":{},"body":{"controllers/FlightsController.html":{}}}],["controller('seats",{"_index":1271,"title":{},"body":{"controllers/SeatsController.html":{}}}],["controller('sections",{"_index":1330,"title":{},"body":{"controllers/SectionsController.html":{}}}],["controller('tickets",{"_index":1440,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":1569,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":72,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["cookieextractor",{"_index":1165,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":1217,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["country",{"_index":397,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["coverage",{"_index":1627,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":76,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["create(@body",{"_index":338,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["create(airlinedto",{"_index":81,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["create(airplanedto",{"_index":312,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["create(airportdto",{"_index":425,"title":{},"body":{"controllers/AirportsController.html":{}}}],["create(flightdto",{"_index":993,"title":{},"body":{"controllers/FlightsController.html":{}}}],["create(sectiondto",{"_index":1306,"title":{},"body":{"controllers/SectionsController.html":{}}}],["create(ticketdto",{"_index":1409,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createairline",{"_index":215,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairline(airlinedto",{"_index":226,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairlinedto",{"_index":82,"title":{"classes/CreateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["createairlinedto})@apicookieauth()@roles('admin')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":94,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["createairplane",{"_index":353,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplane(airplanedto",{"_index":361,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplanedto",{"_index":313,"title":{"classes/CreateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["createairplanedto})@apicookieauth()@roles('admin')@post",{"_index":317,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["createairport",{"_index":462,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairport(airportdto",{"_index":470,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairportdto",{"_index":426,"title":{"classes/CreateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["createairportdto})@apicookieauth()@roles('admin')@post",{"_index":429,"title":{},"body":{"controllers/AirportsController.html":{}}}],["created",{"_index":86,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["created'})@apitoomanyrequestsresponse({description",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{}}}],["createfile",{"_index":940,"title":{},"body":{"injectables/FilesService.html":{}}}],["createfile(folder",{"_index":942,"title":{},"body":{"injectables/FilesService.html":{}}}],["createflight",{"_index":1041,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflight(flightdto",{"_index":1050,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflightdto",{"_index":786,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["createflightdto})@apitoomanyrequestsresponse({description",{"_index":997,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createseatdto",{"_index":844,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["createsection",{"_index":1343,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsection(sectiondto",{"_index":1351,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsectiondto",{"_index":847,"title":{"classes/CreateSectionDto.html":{}},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["createsectiondto})@apitoomanyrequestsresponse({description",{"_index":1309,"title":{},"body":{"controllers/SectionsController.html":{}}}],["createticket",{"_index":1463,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticket(ticketdto",{"_index":1472,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticketdto",{"_index":864,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createticketdto})@apiunauthorizedresponse({description",{"_index":1413,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createuser",{"_index":1588,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(userdto",{"_index":1598,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":617,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@post('signup",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["data",{"_index":110,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data')@patch(':id",{"_index":127,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data')@post",{"_index":95,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data'})@apinotfoundresponse({description",{"_index":116,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data'})@apiokresponse({description",{"_index":124,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data.dto",{"_index":1565,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.dto.ts",{"_index":1518,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["declarations",{"_index":191,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":20,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles",{"_index":1203,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":1249,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":77,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":183,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["delete(@param('id",{"_index":184,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(@request",{"_index":1578,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":100,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(req",{"_index":1549,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteairline",{"_index":216,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairline(airlineid",{"_index":229,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairplane",{"_index":354,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairplane(airplaneid",{"_index":363,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairport",{"_index":463,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteairport(airportid",{"_index":472,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deletefile",{"_index":941,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletefile(filepath",{"_index":944,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteflight",{"_index":1042,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deleteflight(flightid",{"_index":1052,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deletesection",{"_index":1344,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deletesection(sectionid",{"_index":1353,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deleteuser",{"_index":1589,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1600,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleting",{"_index":965,"title":{},"body":{"injectables/FilesService.html":{}}}],["departure",{"_index":821,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["departureairport",{"_index":793,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["departureairport.airportnameeng",{"_index":1130,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameru",{"_index":1131,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameua",{"_index":1129,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttowneng",{"_index":1134,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownru",{"_index":1135,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownua",{"_index":1133,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.iata",{"_index":1132,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departuretime",{"_index":794,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["dependencies",{"_index":189,"title":{"dependencies.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":26,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["descriptioneng",{"_index":13,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionru",{"_index":14,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionua",{"_index":15,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["development",{"_index":1728,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1402,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["dmitry",{"_index":888,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{}}}],["document",{"_index":58,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["document'})@prop({required",{"_index":1381,"title":{},"body":{"classes/Ticket.html":{}}}],["documentation",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["dto/change",{"_index":1566,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":155,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["dto/search",{"_index":1023,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dto/update",{"_index":157,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":919,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["e2e",{"_index":1739,"title":{},"body":{"index.html":{}}}],["each",{"_index":1221,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["economy",{"_index":853,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1715,"title":{},"body":{"index.html":{}}}],["efremov",{"_index":892,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["email",{"_index":686,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["endof('day",{"_index":1110,"title":{},"body":{"injectables/FlightsService.html":{}}}],["english",{"_index":27,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["entities/airlines.entity",{"_index":154,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{}}}],["entities/airplane.entity",{"_index":333,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{}}}],["entities/airport.entity",{"_index":445,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{}}}],["entities/flights.entity",{"_index":1021,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{}}}],["entities/seat.entity",{"_index":1268,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["entities/section.entity",{"_index":862,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{}}}],["entities/ticket.entity",{"_index":912,"title":{},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/users.entity",{"_index":1564,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":854,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1700,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":855,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["env",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["envfilepath",{"_index":570,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["err",{"_index":261,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":959,"title":{},"body":{"injectables/FilesService.html":{}}}],["example",{"_index":62,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["exchange",{"_index":795,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["exchange'})@prop",{"_index":979,"title":{},"body":{"classes/Flight.html":{}}}],["exec",{"_index":247,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":1197,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exists",{"_index":251,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["expiresin",{"_index":669,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":60,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":194,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":138,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":83,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["extends",{"_index":1152,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["false",{"_index":259,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["female",{"_index":1399,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":958,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname.split('.').pop",{"_index":950,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileextension",{"_index":949,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":136,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["filename",{"_index":254,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{}}}],["filepath",{"_index":946,"title":{},"body":{"injectables/FilesService.html":{}}}],["files.service",{"_index":938,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":563,"title":{},"body":{"modules/AppModule.html":{}}}],["files/files.service",{"_index":241,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["filesmodule",{"_index":199,"title":{"modules/FilesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":223,"title":{"injectables/FilesService.html":{}},"body":{"injectables/AirlinesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":263,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["find(@request",{"_index":1444,"title":{},"body":{"controllers/TicketsController.html":{}}}],["find(req",{"_index":1419,"title":{},"body":{"controllers/TicketsController.html":{}}}],["findall",{"_index":78,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(airlineid",{"_index":264,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyid(airplane._id",{"_index":375,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airplaneid",{"_index":378,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airportid",{"_index":484,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyid(flight.airplane",{"_index":1489,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(flightid",{"_index":1070,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyid(sectionid",{"_index":1367,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyid(ticketdto.flight",{"_index":1485,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketdto.user",{"_index":1487,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketid",{"_index":1494,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(userid",{"_index":1495,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["findbyidanddelete(airlineid",{"_index":282,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyidanddelete(airplaneid",{"_index":384,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyidanddelete(airportid",{"_index":506,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyidanddelete(flightid",{"_index":1096,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyidanddelete(sectionid",{"_index":1372,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyidanddelete(userid",{"_index":1625,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":79,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":178,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":115,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["first",{"_index":889,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["firstdeptime",{"_index":1218,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["firstname",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["flagship",{"_index":44,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["flight",{"_index":831,"title":{"classes/Flight.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["flight'})@apicreatedresponse({description",{"_index":994,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@apiokresponse({description",{"_index":1001,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@prop({required",{"_index":1384,"title":{},"body":{"classes/Ticket.html":{}}}],["flight.airline",{"_index":1073,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.airplane",{"_index":1075,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivalairport",{"_index":1077,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivaltime",{"_index":1079,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.baggage",{"_index":1081,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.carryonbaggage",{"_index":1083,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departureairport",{"_index":1085,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departuretime",{"_index":1087,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.dto",{"_index":1022,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts",{"_index":788,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:19",{"_index":832,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:25",{"_index":1228,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:27",{"_index":800,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:34",{"_index":1232,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:35",{"_index":802,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:43",{"_index":822,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:44",{"_index":1236,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:51",{"_index":824,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:53",{"_index":1219,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:59",{"_index":805,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:63",{"_index":1224,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":811,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:72",{"_index":837,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:73",{"_index":1227,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:78",{"_index":814,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:83",{"_index":819,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:87",{"_index":828,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:91",{"_index":834,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.exchange",{"_index":1089,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.flightname",{"_index":1090,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.name",{"_index":1039,"title":{},"body":{"modules/FlightsModule.html":{},"modules/TicketsModule.html":{}}}],["flight.refund",{"_index":1092,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.save",{"_index":1095,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.taxa",{"_index":1094,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdocument",{"_index":986,"title":{},"body":{"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["flightdto",{"_index":1000,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flightdto.airline",{"_index":1072,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane",{"_index":1074,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport",{"_index":1076,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivaltime",{"_index":1078,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.baggage",{"_index":1080,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.carryonbaggage",{"_index":1082,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.class",{"_index":1112,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.class.length",{"_index":1115,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.count",{"_index":1117,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport",{"_index":1084,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departuretime",{"_index":1086,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.exchange",{"_index":1088,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.firstdeptime",{"_index":1098,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.flightname",{"_index":1067,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.refund",{"_index":1091,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.seconddeptime",{"_index":1099,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.taxa",{"_index":1093,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightid",{"_index":1054,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightmodel",{"_index":1049,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["flightname",{"_index":796,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["flights",{"_index":991,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apicreatedresponse({description",{"_index":1009,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights'})@apiokresponse({description",{"_index":1004,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":1038,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.service",{"_index":1020,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":561,"title":{},"body":{"modules/AppModule.html":{}}}],["flightschema",{"_index":987,"title":{},"body":{"classes/Flight.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["flightscontroller",{"_index":989,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":537,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["flightsservice",{"_index":1019,"title":{"injectables/FlightsService.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"coverage.html":{},"overview.html":{}}}],["flight})@apibadrequestresponse({description",{"_index":995,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@apiparam({name",{"_index":1002,"title":{},"body":{"controllers/FlightsController.html":{}}}],["folder",{"_index":240,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{}}}],["folder.airline",{"_index":279,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["forbidden",{"_index":168,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apibadrequestresponse({description",{"_index":1414,"title":{},"body":{"controllers/TicketsController.html":{}}}],["forbidden'})@apibody({type",{"_index":996,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["forbidden'})@apiparam({name",{"_index":1314,"title":{},"body":{"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apitoomanyrequestsresponse({description",{"_index":91,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apiunauthorizedresponse({description",{"_index":513,"title":{},"body":{"controllers/AppController.html":{}}}],["format",{"_index":755,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["forwardref",{"_index":657,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":176,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apibadrequestresponse({description",{"_index":125,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/UsersController.html":{}}}],["found'})@apiokresponse({description",{"_index":117,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["found'})@apiparam({name",{"_index":1319,"title":{},"body":{"controllers/SectionsController.html":{}}}],["found'})@apitoomanyrequestsresponse({description",{"_index":325,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":107,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["framework",{"_index":1713,"title":{},"body":{"index.html":{}}}],["free",{"_index":1247,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/enumerations.html":{}}}],["fs",{"_index":947,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.existssync(filepath",{"_index":954,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.mkdirsync(filepath",{"_index":955,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.unlinksync(pathtofile",{"_index":964,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.writefilesync(path.join(filepath",{"_index":957,"title":{},"body":{"injectables/FilesService.html":{}}}],["function",{"_index":1166,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1707,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuse",{"_index":1062,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(flights",{"_index":1136,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(result",{"_index":1147,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.js",{"_index":1063,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["fuse.search(flightdto.arrival).map((r",{"_index":1148,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.search(flightdto.departure).map((r",{"_index":1137,"title":{},"body":{"injectables/FlightsService.html":{}}}],["get(':id",{"_index":177,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":529,"title":{},"body":{"controllers/AppController.html":{}}}],["getairlinebyid",{"_index":217,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairlinebyid(airlineid",{"_index":232,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairplanebyid",{"_index":355,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairplanebyid(airplaneid",{"_index":366,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairportbyid",{"_index":464,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getairportbyid(airportid",{"_index":475,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallairlines",{"_index":218,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getallairplanes",{"_index":356,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getallairports",{"_index":465,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallflights",{"_index":1043,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getallsections",{"_index":1345,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getalltickets",{"_index":1464,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getallusers",{"_index":1590,"title":{},"body":{"injectables/UsersService.html":{}}}],["getflightbyid",{"_index":1044,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getflightbyid(flightid",{"_index":1056,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getprofile",{"_index":509,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":530,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":510,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(userid",{"_index":677,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsectionbyid",{"_index":1346,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getsectionbyid(sectionid",{"_index":1357,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getticketbyid",{"_index":1465,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getticketbyid(userid",{"_index":1475,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getting",{"_index":1709,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":1591,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1603,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1592,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":1605,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1746,"title":{},"body":{"index.html":{}}}],["gte",{"_index":1101,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["guard",{"_index":1189,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1190,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{}}}],["hand",{"_index":817,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["hashpassword",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["helmet",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1757,"title":{},"body":{"index.html":{}}}],["hours",{"_index":1105,"title":{},"body":{"injectables/FlightsService.html":{}}}],["httpexception",{"_index":237,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('forbidden",{"_index":1214,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpexception('password",{"_index":1620,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception(err",{"_index":262,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1764,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":238,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":252,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":1215,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpstatus.internal_server_error",{"_index":962,"title":{},"body":{"injectables/FilesService.html":{}}}],["httpstatus.not_found",{"_index":265,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["iata",{"_index":396,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{}}}],["iata'})@prop({required",{"_index":416,"title":{},"body":{"classes/Airport.html":{}}}],["id",{"_index":105,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["iev",{"_index":415,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["ignoreexpiration",{"_index":1173,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":1204,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":204,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apibadrequestresponse({description",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["includescore",{"_index":1127,"title":{},"body":{"injectables/FlightsService.html":{}}}],["incorrect",{"_index":716,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["initialflights",{"_index":1100,"title":{},"body":{"injectables/FlightsService.html":{}}}],["initialflights.foreach((a",{"_index":1114,"title":{},"body":{"injectables/FlightsService.html":{}}}],["inject",{"_index":577,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":210,"title":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":211,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":239,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(airline.name",{"_index":242,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["injectmodel(airplane.name",{"_index":372,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(airport.name",{"_index":480,"title":{},"body":{"injectables/AirportsService.html":{}}}],["injectmodel(flight.name",{"_index":1065,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(seat.name",{"_index":1362,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(section.name",{"_index":1361,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(ticket.name",{"_index":1483,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectmodel(user.name",{"_index":1484,"title":{},"body":{"injectables/TicketsService.html":{}}}],["installation",{"_index":1724,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1726,"title":{},"body":{"index.html":{}}}],["international",{"_index":24,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["isarray",{"_index":765,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/SearchFlightDto.html":{}}}],["isarray()@arrayunique()@isnotempty()@apiproperty({example",{"_index":762,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isboolean",{"_index":839,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isboolean()@isnotempty()@apiproperty({example",{"_index":816,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isdatestring",{"_index":1238,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isemail",{"_index":931,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":861,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(class",{"_index":863,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{}}}],["isenum(sex",{"_index":913,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(status",{"_index":916,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(type",{"_index":914,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ismongoid",{"_index":840,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["ismongoid()@isnotempty()@apiproperty({example",{"_index":801,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isnotempty",{"_index":731,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@isarray()@isenum(class",{"_index":1220,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isemail()@apiproperty({example",{"_index":918,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isenum(class)@apiproperty({example",{"_index":852,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["isnotempty()@isenum(sex)@apiproperty({example",{"_index":896,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(status)@apiproperty({example",{"_index":899,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@isenum(type)@apiproperty({example",{"_index":902,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@ismongoid()@apiproperty({example",{"_index":799,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({example",{"_index":760,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isnotempty()@isnumber()@min(1)@max(9)@apiproperty({example",{"_index":1225,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isphonenumber()@apiproperty({example",{"_index":927,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":806,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isstring()@isdatestring()@apiproperty({example",{"_index":1229,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isstring()@isuppercase()@length(2",{"_index":779,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["isnotempty()@isstring()@matches('^(?=.*?[a",{"_index":722,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@maxlength(200)@apiproperty({example",{"_index":747,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["isnotempty()@isstring()@maxlength(50)@apiproperty({example",{"_index":771,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@maxlength(20)@isstring()@apiproperty({example",{"_index":922,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":766,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({example",{"_index":835,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isoptional",{"_index":751,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/SearchFlightDto.html":{}}}],["isoptional()@apipropertyoptional({example",{"_index":825,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@isnotempty()@isstring()@isdatestring()@apipropertyoptional({example",{"_index":1233,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isoptional()@isstring()@apipropertyoptional({example",{"_index":879,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isoptional()@isstring()@maxlength(200)@apiproperty({example",{"_index":744,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["isoptional()@isstring()@maxlength(50)@apiproperty({example",{"_index":739,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{}}}],["isphonenumber",{"_index":932,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":732,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":907,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@length(7",{"_index":884,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@maxlength(50)@apiproperty({example",{"_index":742,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{}}}],["isuppercase",{"_index":782,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["join",{"_index":1753,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":523,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1172,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":660,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":665,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":675,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":654,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1761,"title":{},"body":{"index.html":{}}}],["keys",{"_index":1128,"title":{},"body":{"injectables/FlightsService.html":{}}}],["kiev",{"_index":409,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["last",{"_index":893,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lastname",{"_index":699,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lax",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["legend",{"_index":190,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":783,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["length(2",{"_index":784,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["length(7",{"_index":915,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["license",{"_index":1767,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1743,"title":{},"body":{"index.html":{}}}],["limit",{"_index":581,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1183,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":629,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":655,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":626,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto})@apitoomanyrequestsresponse({description",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["logo",{"_index":16,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["logo'})@prop({required",{"_index":49,"title":{},"body":{"classes/Airline.html":{}}}],["logout",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["lte",{"_index":1108,"title":{},"body":{"injectables/FlightsService.html":{}}}],["luggage",{"_index":818,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["luggage'})@prop({required",{"_index":974,"title":{},"body":{"classes/Flight.html":{}}}],["mail",{"_index":920,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["mail'})@prop({required",{"_index":1520,"title":{},"body":{"classes/User.html":{}}}],["male",{"_index":897,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":92,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["match",{"_index":1111,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":733,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matches('^(?=.*?[a",{"_index":735,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matching",{"_index":68,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1239,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["max(9",{"_index":1242,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["maxlength",{"_index":752,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["maxlength(20",{"_index":933,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(200",{"_index":754,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["maxlength(50",{"_index":753,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/SearchFlightDto.html":{}}}],["message",{"_index":715,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":75,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1240,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["min(1",{"_index":1241,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["miscellaneous",{"_index":1699,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1621,"title":{},"body":{"injectables/UsersService.html":{}}}],["mit",{"_index":1742,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1732,"title":{},"body":{"index.html":{}}}],["model",{"_index":222,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":186,"title":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":188,"title":{"modules.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1064,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["moment(flightdto.firstdeptime",{"_index":1102,"title":{},"body":{"injectables/FlightsService.html":{}}}],["moment(seconddeptime",{"_index":1109,"title":{},"body":{"injectables/FlightsService.html":{}}}],["mongoose",{"_index":59,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":306,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":205,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":208,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":583,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1756,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1762,"title":{},"body":{"index.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name'})@prop({required",{"_index":291,"title":{},"body":{"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["name'})@prop({unique",{"_index":405,"title":{},"body":{"classes/Airport.html":{}}}],["nest",{"_index":1720,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1766,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":135,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":548,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":554,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":661,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":55,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":659,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":137,"title":{},"body":{"controllers/AirlinesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":57,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":551,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":249,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":720,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["newpasswordequals",{"_index":1618,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":1712,"title":{},"body":{"index.html":{}}}],["notavailable",{"_index":1254,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1725,"title":{},"body":{"index.html":{}}}],["null",{"_index":812,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":293,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["number'})@prop({required",{"_index":1526,"title":{},"body":{"classes/User.html":{}}}],["numberofseat",{"_index":871,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["objectid",{"_index":101,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":1200,"title":{},"body":{"guards/RolesGuard.html":{}}}],["occurred",{"_index":960,"title":{},"body":{"injectables/FilesService.html":{}}}],["october",{"_index":41,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["old",{"_index":1622,"title":{},"body":{"injectables/UsersService.html":{}}}],["oldpassword",{"_index":721,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["omittype",{"_index":1186,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["omittype(createuserdto",{"_index":1188,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["open",{"_index":1744,"title":{},"body":{"index.html":{}}}],["operating",{"_index":40,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionsforarrival",{"_index":1139,"title":{},"body":{"injectables/FlightsService.html":{}}}],["optionsfordeparture",{"_index":1126,"title":{},"body":{"injectables/FlightsService.html":{}}}],["out",{"_index":202,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out'})@apiunauthorizedresponse({description",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1771,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1648,"title":{"dependencies.html":{}},"body":{}}],["paid",{"_index":1252,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":132,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":181,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/TicketsController.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1187,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["partialtype(createairlinedto",{"_index":1502,"title":{},"body":{"classes/UpdateAirlineDto.html":{}}}],["partialtype(createairplanedto",{"_index":1504,"title":{},"body":{"classes/UpdateAirplaneDto.html":{}}}],["partialtype(createairportdto",{"_index":1506,"title":{},"body":{"classes/UpdateAirportDto.html":{}}}],["partialtype(createflightdto",{"_index":1508,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["partialtype(createseatdto",{"_index":1511,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["partialtype(createsectiondto",{"_index":1513,"title":{},"body":{"classes/UpdateSectionDto.html":{}}}],["partialtype(createticketdto",{"_index":1515,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["pass",{"_index":684,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1163,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":658,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1161,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1170,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":710,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password'})@apiokresponse({description",{"_index":1543,"title":{},"body":{"controllers/UsersController.html":{}}}],["password'})@prop({required",{"_index":1524,"title":{},"body":{"classes/User.html":{}}}],["password.dto",{"_index":1567,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":719,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":728,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["password.dto.ts:9",{"_index":730,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["passwordequals",{"_index":712,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":1623,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":131,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["patch('/changepassword",{"_index":1575,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/update",{"_index":1572,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["patch(':id/update",{"_index":1272,"title":{},"body":{"controllers/SeatsController.html":{}}}],["path",{"_index":377,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["path.resolve(__dirname",{"_index":952,"title":{},"body":{"injectables/FilesService.html":{}}}],["pathtofile",{"_index":963,"title":{},"body":{"injectables/FilesService.html":{}}}],["payload",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["phone",{"_index":929,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["phonenumber",{"_index":701,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":1754,"title":{},"body":{"index.html":{}}}],["populate",{"_index":376,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["post('logout",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reserve",{"_index":1441,"title":{},"body":{"controllers/TicketsController.html":{}}}],["post('search",{"_index":1027,"title":{},"body":{"controllers/FlightsController.html":{}}}],["post('signin",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":850,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["price'})@prop({required",{"_index":1297,"title":{},"body":{"classes/Section.html":{}}}],["private",{"_index":243,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env}.env",{"_index":571,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["production",{"_index":1734,"title":{},"body":{"index.html":{}}}],["profile",{"_index":527,"title":{},"body":{"controllers/AppController.html":{}}}],["profile'})@apiokresponse({description",{"_index":511,"title":{},"body":{"controllers/AppController.html":{}}}],["progressive",{"_index":1711,"title":{},"body":{"index.html":{}}}],["project",{"_index":1745,"title":{},"body":{"index.html":{}}}],["promise",{"_index":228,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":52,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["properties'})@prop",{"_index":972,"title":{},"body":{"classes/Flight.html":{}}}],["provide",{"_index":590,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":193,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["ps",{"_index":829,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["public",{"_index":213,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["q",{"_index":1119,"title":{},"body":{"injectables/FlightsService.html":{}}}],["r.item",{"_index":1138,"title":{},"body":{"injectables/FlightsService.html":{}}}],["range",{"_index":1231,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["read",{"_index":1755,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":164,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":956,"title":{},"body":{"injectables/FilesService.html":{}}}],["ref",{"_index":301,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["reflect",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1194,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refund",{"_index":797,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["repository",{"_index":1723,"title":{},"body":{"index.html":{}}}],["req",{"_index":517,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["req.cookies",{"_index":1168,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.cookies['access_token",{"_index":1169,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1211,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":166,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apibody({type",{"_index":1011,"title":{},"body":{"controllers/FlightsController.html":{}}}],["request'})@apicreatedresponse({description",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["request'})@apinotfoundresponse({description",{"_index":440,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apitoomanyrequestsresponse({description",{"_index":1415,"title":{},"body":{"controllers/TicketsController.html":{}}}],["request'})@apiunauthorizedresponse({description",{"_index":89,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":169,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["requests'})@apibody({type",{"_index":93,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{}}}],["requests'})@apicookieauth()@patch(':id/update",{"_index":1264,"title":{},"body":{"controllers/SeatsController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@delete(':id",{"_index":108,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@get",{"_index":1425,"title":{},"body":{"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@get(':id",{"_index":1556,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@patch(':id",{"_index":1017,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@post",{"_index":998,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@delete",{"_index":1552,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@delete(':id",{"_index":1429,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@get(':id",{"_index":1421,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@get('profile",{"_index":515,"title":{},"body":{"controllers/AppController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@patch('/changepassword",{"_index":1547,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@patch('/update",{"_index":1561,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@patch(':id",{"_index":1434,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@post('reserve",{"_index":1416,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apiparam({name",{"_index":119,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["requests'})@get",{"_index":113,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@get(':id",{"_index":326,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@post('search",{"_index":1013,"title":{},"body":{"controllers/FlightsController.html":{}}}],["requests'})@useguards(jwtauthguard)@apicookieauth()@post('logout",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests'})@useguards(localauthguard)@post('signin",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":63,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":1205,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1212,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["resbody",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{}}}],["reserve",{"_index":1410,"title":{},"body":{"controllers/TicketsController.html":{}}}],["reset",{"_index":201,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":67,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":69,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":173,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["return'})@prop",{"_index":982,"title":{},"body":{"classes/Flight.html":{}}}],["return(@request",{"_index":1447,"title":{},"body":{"controllers/TicketsController.html":{}}}],["return(req",{"_index":1427,"title":{},"body":{"controllers/TicketsController.html":{}}}],["returned",{"_index":1253,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["returns",{"_index":99,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnticket",{"_index":1466,"title":{},"body":{"injectables/TicketsService.html":{}}}],["returnticket(userid",{"_index":1478,"title":{},"body":{"injectables/TicketsService.html":{}}}],["rimraf",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@prop({required",{"_index":1528,"title":{},"body":{"classes/User.html":{}}}],["role.user",{"_index":1534,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":158,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":170,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["roles_key",{"_index":1202,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":567,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rs123456",{"_index":886,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["run",{"_index":1729,"title":{},"body":{"index.html":{}}}],["russian",{"_index":34,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["rxjs",{"_index":1201,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s.class",{"_index":1120,"title":{},"body":{"injectables/FlightsService.html":{}}}],["s.seats.length",{"_index":1123,"title":{},"body":{"injectables/FlightsService.html":{}}}],["salt",{"_index":705,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["samesite",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":1716,"title":{},"body":{"index.html":{}}}],["schema",{"_index":53,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":54,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(airline",{"_index":66,"title":{},"body":{"classes/Airline.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airplane",{"_index":308,"title":{},"body":{"classes/Airplane.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airport",{"_index":421,"title":{},"body":{"classes/Airport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(flight",{"_index":988,"title":{},"body":{"classes/Flight.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(seat",{"_index":1257,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(section",{"_index":1303,"title":{},"body":{"classes/Section.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ticket",{"_index":1405,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1535,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":992,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(@body",{"_index":1028,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(flightdto",{"_index":1007,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflightdto",{"_index":1008,"title":{"classes/SearchFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["searchflightdto})@apitoomanyrequestsresponse({description",{"_index":1012,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflights",{"_index":1045,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflights(flightdto",{"_index":1058,"title":{},"body":{"injectables/FlightsService.html":{}}}],["seat",{"_index":305,"title":{"classes/Seat.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"coverage.html":{}}}],["seat'})@prop({default",{"_index":1387,"title":{},"body":{"classes/Ticket.html":{}}}],["seat'})@prop({required",{"_index":296,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["seat.dto",{"_index":1269,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts",{"_index":846,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat.dto.ts:16",{"_index":1510,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.name",{"_index":1279,"title":{},"body":{"modules/SeatsModule.html":{},"modules/SectionsModule.html":{}}}],["seat.save",{"_index":1292,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seat.status",{"_index":1291,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatdocument",{"_index":1251,"title":{},"body":{"classes/Seat.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["seatdto",{"_index":1260,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seatdto.status",{"_index":1290,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatid",{"_index":1287,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatmodel",{"_index":1284,"title":{},"body":{"injectables/SeatsService.html":{},"injectables/SectionsService.html":{}}}],["seats",{"_index":851,"title":{},"body":{"classes/CreateSectionDto.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["seats'})@prop({trim",{"_index":1299,"title":{},"body":{"classes/Section.html":{}}}],["seats.controller",{"_index":1278,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1267,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":565,"title":{},"body":{"modules/AppModule.html":{}}}],["seatschema",{"_index":1256,"title":{},"body":{"classes/Seat.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seatscontroller",{"_index":1258,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":538,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["seatsservice",{"_index":1266,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["seat})@apibadrequestresponse({description",{"_index":1262,"title":{},"body":{"controllers/SeatsController.html":{}}}],["second",{"_index":1235,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["seconddeptime",{"_index":1097,"title":{},"body":{"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{}}}],["secret",{"_index":666,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1174,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":298,"title":{"classes/Section.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{}}}],["section'})@apicreatedresponse({description",{"_index":1307,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@apiokresponse({description",{"_index":1312,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@prop({required",{"_index":1245,"title":{},"body":{"classes/Seat.html":{}}}],["section.class",{"_index":1369,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.dto",{"_index":1328,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{}}}],["section.dto.ts",{"_index":849,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["section.dto.ts:10",{"_index":858,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:20",{"_index":856,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:28",{"_index":860,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.name",{"_index":1341,"title":{},"body":{"modules/SectionsModule.html":{}}}],["section.price",{"_index":1370,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.save",{"_index":1371,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondocument",{"_index":1301,"title":{},"body":{"classes/Section.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["sectiondto",{"_index":1311,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{}}}],["sectiondto.class",{"_index":1365,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondto.price",{"_index":1364,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionid",{"_index":1355,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionmodel",{"_index":1350,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sections",{"_index":287,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["sections'})@apiokresponse({description",{"_index":1317,"title":{},"body":{"controllers/SectionsController.html":{}}}],["sections'})@prop({trim",{"_index":299,"title":{},"body":{"classes/Airplane.html":{}}}],["sections.controller",{"_index":1340,"title":{},"body":{"modules/SectionsModule.html":{}}}],["sections.service",{"_index":1327,"title":{},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{}}}],["sections/sections.module",{"_index":566,"title":{},"body":{"modules/AppModule.html":{}}}],["sectionschema",{"_index":1302,"title":{},"body":{"classes/Section.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sectionscontroller",{"_index":1304,"title":{"controllers/SectionsController.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"coverage.html":{}}}],["sectionsmodule",{"_index":539,"title":{"modules/SectionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SectionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sectionsservice",{"_index":1326,"title":{"injectables/SectionsService.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{},"overview.html":{}}}],["section})@apibadrequestresponse({description",{"_index":1308,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@apinotfoundresponse({description",{"_index":1313,"title":{},"body":{"controllers/SectionsController.html":{}}}],["secure",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":257,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":1717,"title":{},"body":{"index.html":{}}}],["set(arr",{"_index":1125,"title":{},"body":{"injectables/FlightsService.html":{}}}],["setmetadata(roles_key",{"_index":1785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sex",{"_index":872,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["sex'})@prop({required",{"_index":1389,"title":{},"body":{"classes/Ticket.html":{}}}],["sheremetyevo/шереметьево/svo",{"_index":803,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["side",{"_index":1718,"title":{},"body":{"index.html":{}}}],["sign",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@request",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(req",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":680,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":668,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":1748,"title":{},"body":{"index.html":{}}}],["src/.../airlines.entity.ts",{"_index":1778,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airplane.entity.ts",{"_index":1779,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airport.entity.ts",{"_index":1780,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../files.service.ts",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../flights.entity.ts",{"_index":1781,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1708,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seat.entity.ts",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../section.entity.ts",{"_index":1701,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ticket.entity.ts",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.entity.ts",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/airlines.controller.ts",{"_index":73,"title":{},"body":{"controllers/AirlinesController.html":{},"coverage.html":{}}}],["src/airlines/airlines.controller.ts:110",{"_index":109,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:53",{"_index":96,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:64",{"_index":114,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:74",{"_index":121,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:92",{"_index":128,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.module.ts",{"_index":203,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/airlines/airlines.service.ts",{"_index":212,"title":{},"body":{"injectables/AirlinesService.html":{},"coverage.html":{}}}],["src/airlines/airlines.service.ts:11",{"_index":224,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:121",{"_index":230,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:17",{"_index":227,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:50",{"_index":234,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:58",{"_index":233,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:72",{"_index":236,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/dto/create",{"_index":737,"title":{},"body":{"classes/CreateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/dto/update",{"_index":1501,"title":{},"body":{"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/entities/airlines.entity",{"_index":841,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["src/airlines/entities/airlines.entity.ts",{"_index":6,"title":{},"body":{"classes/Airline.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/entities/airlines.entity.ts:14",{"_index":39,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:21",{"_index":33,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:28",{"_index":35,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:36",{"_index":48,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:44",{"_index":46,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:52",{"_index":47,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:59",{"_index":50,"title":{},"body":{"classes/Airline.html":{}}}],["src/airplanes/airplanes.controller.ts",{"_index":310,"title":{},"body":{"controllers/AirplanesController.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.controller.ts:47",{"_index":318,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:55",{"_index":324,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:65",{"_index":327,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:81",{"_index":330,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:95",{"_index":322,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.module",{"_index":1455,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airplanes/airplanes.module.ts",{"_index":349,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["src/airplanes/airplanes.service.ts",{"_index":352,"title":{},"body":{"injectables/AirplanesService.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.service.ts:15",{"_index":359,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:20",{"_index":362,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:36",{"_index":368,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:45",{"_index":367,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:60",{"_index":370,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:82",{"_index":364,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/dto/create",{"_index":757,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/dto/update",{"_index":1503,"title":{},"body":{"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/entities/airplane.entity",{"_index":842,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/airplanes/entities/airplane.entity.ts",{"_index":284,"title":{},"body":{"classes/Airplane.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airplanes/entities/airplane.entity.ts:17",{"_index":292,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:21",{"_index":297,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:29",{"_index":302,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airports/airports.controller.ts",{"_index":423,"title":{},"body":{"controllers/AirportsController.html":{},"coverage.html":{}}}],["src/airports/airports.controller.ts:47",{"_index":430,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:55",{"_index":436,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:65",{"_index":437,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:81",{"_index":442,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:95",{"_index":434,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.module",{"_index":1456,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airports/airports.module.ts",{"_index":458,"title":{},"body":{"modules/AirportsModule.html":{}}}],["src/airports/airports.service.ts",{"_index":461,"title":{},"body":{"injectables/AirportsService.html":{},"coverage.html":{}}}],["src/airports/airports.service.ts:10",{"_index":468,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:115",{"_index":473,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:15",{"_index":471,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:42",{"_index":477,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:50",{"_index":476,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:64",{"_index":479,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/dto/create",{"_index":767,"title":{},"body":{"classes/CreateAirportDto.html":{},"coverage.html":{}}}],["src/airports/dto/update",{"_index":1505,"title":{},"body":{"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["src/airports/entities/airport.entity",{"_index":843,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["src/airports/entities/airport.entity.ts",{"_index":386,"title":{},"body":{"classes/Airport.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airports/entities/airport.entity.ts:11",{"_index":408,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:18",{"_index":406,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:22",{"_index":407,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:26",{"_index":417,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:33",{"_index":403,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:40",{"_index":399,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:47",{"_index":400,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:54",{"_index":414,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:61",{"_index":411,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:68",{"_index":412,"title":{},"body":{"classes/Airport.html":{}}}],["src/app.controller.ts",{"_index":508,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":516,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":592,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1585,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":656,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":671,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":676,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":678,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":681,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":682,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":685,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles",{"_index":159,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":1149,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1176,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1191,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:15",{"_index":1195,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:18",{"_index":1198,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1154,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":1157,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:29",{"_index":1160,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1178,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":1182,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":1180,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/files/files.module",{"_index":207,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/files/files.module.ts",{"_index":937,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":939,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/files/files.service.ts:12",{"_index":943,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:30",{"_index":945,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/flights/dto/create",{"_index":787,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/search",{"_index":1216,"title":{},"body":{"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/update",{"_index":1507,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/entities/flights.entity",{"_index":910,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/flights/entities/flights.entity.ts",{"_index":966,"title":{},"body":{"classes/Flight.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/flights/entities/flights.entity.ts:16",{"_index":981,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:27",{"_index":967,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:38",{"_index":968,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:50",{"_index":976,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:57",{"_index":977,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:69",{"_index":969,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:76",{"_index":971,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:80",{"_index":985,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:87",{"_index":973,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:91",{"_index":975,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:95",{"_index":980,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:99",{"_index":983,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":990,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:106",{"_index":1003,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:48",{"_index":999,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:58",{"_index":1014,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:66",{"_index":1005,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:76",{"_index":1006,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:92",{"_index":1018,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":1457,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":1037,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service.ts",{"_index":1040,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:105",{"_index":1061,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:174",{"_index":1053,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:18",{"_index":1048,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:200",{"_index":1059,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:23",{"_index":1051,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:59",{"_index":1055,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:79",{"_index":1057,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/main.ts",{"_index":1643,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/seats/dto/create",{"_index":845,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/update",{"_index":1509,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["src/seats/entities/seat.entity",{"_index":911,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{}}}],["src/seats/entities/seat.entity.ts",{"_index":1243,"title":{},"body":{"classes/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/seats/entities/seat.entity.ts:30",{"_index":1246,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:34",{"_index":1244,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:43",{"_index":1250,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1259,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:37",{"_index":1265,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module.ts",{"_index":1277,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1280,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:12",{"_index":1286,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:9",{"_index":1283,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/sections/dto/create",{"_index":848,"title":{},"body":{"classes/CreateSectionDto.html":{},"coverage.html":{}}}],["src/sections/dto/update",{"_index":1512,"title":{},"body":{"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["src/sections/entities/section.entity",{"_index":303,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{}}}],["src/sections/entities/section.entity.ts",{"_index":1294,"title":{},"body":{"classes/Section.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/sections/entities/section.entity.ts:19",{"_index":1298,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:28",{"_index":1296,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:39",{"_index":1300,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/sections.controller.ts",{"_index":1305,"title":{},"body":{"controllers/SectionsController.html":{},"coverage.html":{}}}],["src/sections/sections.controller.ts:48",{"_index":1310,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:56",{"_index":1318,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:66",{"_index":1320,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:82",{"_index":1324,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:96",{"_index":1316,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.module.ts",{"_index":1339,"title":{},"body":{"modules/SectionsModule.html":{}}}],["src/sections/sections.service.ts",{"_index":1342,"title":{},"body":{"injectables/SectionsService.html":{},"coverage.html":{}}}],["src/sections/sections.service.ts:11",{"_index":1349,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:17",{"_index":1352,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:44",{"_index":1356,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:53",{"_index":1358,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:68",{"_index":1360,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:95",{"_index":1354,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/tickets/dto/create",{"_index":865,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/dto/update",{"_index":1514,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/entities/ticket.entity",{"_index":1532,"title":{},"body":{"classes/User.html":{}}}],["src/tickets/entities/ticket.entity.ts",{"_index":1373,"title":{},"body":{"classes/Ticket.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tickets/entities/ticket.entity.ts:102",{"_index":1382,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:106",{"_index":1397,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:115",{"_index":1391,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:122",{"_index":1388,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:39",{"_index":1385,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:47",{"_index":1395,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:56",{"_index":1390,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:65",{"_index":1393,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:69",{"_index":1383,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:73",{"_index":1386,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:77",{"_index":1375,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:84",{"_index":1380,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:91",{"_index":1377,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:98",{"_index":1378,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/tickets.controller.ts",{"_index":1407,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/tickets/tickets.controller.ts:110",{"_index":1430,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:50",{"_index":1417,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:62",{"_index":1426,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:76",{"_index":1422,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:92",{"_index":1435,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.module.ts",{"_index":1453,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/tickets/tickets.service.ts",{"_index":1462,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/tickets/tickets.service.ts:106",{"_index":1481,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:137",{"_index":1479,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:16",{"_index":1470,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:24",{"_index":1473,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:76",{"_index":1474,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:86",{"_index":1477,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/users/dto/change",{"_index":718,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1517,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1519,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/users.entity.ts:19",{"_index":1522,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":1523,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1527,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:31",{"_index":1525,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:38",{"_index":1521,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:47",{"_index":1529,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:58",{"_index":1531,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1537,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:46",{"_index":1555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":1557,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":1562,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:88",{"_index":1548,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:99",{"_index":1553,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":1458,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/users/users.module.ts",{"_index":1583,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":1164,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1586,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1595,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":1601,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:139",{"_index":1604,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1599,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1602,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1606,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1608,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:83",{"_index":1597,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1730,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1733,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1735,"title":{},"body":{"index.html":{}}}],["started",{"_index":1710,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1722,"title":{},"body":{"index.html":{}}}],["startof('day",{"_index":1103,"title":{},"body":{"injectables/FlightsService.html":{}}}],["statements",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":953,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["status",{"_index":873,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["status'})@prop({required",{"_index":1248,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{}}}],["status.booked",{"_index":1403,"title":{},"body":{"classes/Ticket.html":{}}}],["status.free",{"_index":1255,"title":{},"body":{"classes/Seat.html":{}}}],["status.returned",{"_index":1499,"title":{},"body":{"injectables/TicketsService.html":{}}}],["stay",{"_index":1758,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":664,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":663,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1162,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":19,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"classes/SearchFlightDto.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apibadrequestresponse({description",{"_index":439,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{}}}],["string'})@apibody({type",{"_index":1322,"title":{},"body":{"controllers/SectionsController.html":{}}}],["string'})@apinotfoundresponse({description",{"_index":106,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{}}}],["string'})@apitoomanyrequestsresponse({description",{"_index":1315,"title":{},"body":{"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["string'})@get(':id",{"_index":120,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["sub",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":103,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":165,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1171,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1749,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1769,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["taxa",{"_index":798,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["taxa'})@prop",{"_index":984,"title":{},"body":{"classes/Flight.html":{}}}],["test",{"_index":1738,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1741,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1740,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":905,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["tests",{"_index":1737,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1747,"title":{},"body":{"index.html":{}}}],["this.airlinemodel",{"_index":245,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.create",{"_index":256,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.findbyid(airlineid).exec",{"_index":266,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinesservice.createairline(airlinedto",{"_index":174,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.deleteairline(id",{"_index":185,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getairlinebyid(id",{"_index":179,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getallairlines",{"_index":175,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.updateairlinedata(id",{"_index":182,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airplanemodel",{"_index":374,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["this.airplanemodel.create",{"_index":373,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanemodel.findbyid(airplaneid).exec",{"_index":379,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanesservice.createairplane(airplanedto",{"_index":339,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.deleteairplane(id",{"_index":344,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getairplanebyid(id",{"_index":341,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getallairplanes",{"_index":340,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.updateairplanedata(id",{"_index":343,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airportmodel",{"_index":481,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.create",{"_index":483,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.findbyid(airportid).exec",{"_index":485,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportsservice.createairport(airportdto",{"_index":449,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.deleteairport(id",{"_index":453,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getairportbyid(id",{"_index":451,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getallairports",{"_index":450,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.updateairportdata(id",{"_index":452,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.authservice.getprofile(req.user._id",{"_index":531,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(req.user",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1185,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.filesservice.createfile",{"_index":278,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.filesservice.createfile(folder.airline",{"_index":255,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.filesservice.deletefile(airline.logo",{"_index":277,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.flightmodel",{"_index":1066,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["this.flightmodel.create",{"_index":1069,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(flightid).exec",{"_index":1071,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(ticket.flight).exec",{"_index":1497,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.flightsservice.createflight(flightdto",{"_index":1026,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.deleteflight(id",{"_index":1033,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getallflights",{"_index":1030,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getflightbyid(id",{"_index":1031,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.searchflights(flightdto",{"_index":1029,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.updateflightdata(id",{"_index":1032,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":703,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":1210,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1206,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seatmodel.findbyid(seatid).exec",{"_index":1289,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatmodel.findbyid(seatid).select",{"_index":1293,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatsservice.updateseatdata(id",{"_index":1273,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.sectionmodel",{"_index":1366,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.create",{"_index":1363,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.findbyid(sectionid).exec",{"_index":1368,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionsservice.createsection(sectiondto",{"_index":1331,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.deletesection(id",{"_index":1335,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getallsections",{"_index":1332,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getsectionbyid(id",{"_index":1333,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.updatesectiondata(id",{"_index":1334,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.ticketmodel",{"_index":1493,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.create",{"_index":1488,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyid(ticketid).exec",{"_index":1496,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketsservice.createticket(ticketdto",{"_index":1442,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getalltickets",{"_index":1443,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getticketbyid(req.user._id",{"_index":1445,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.returnticket(req.user._id",{"_index":1448,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.updateticketdata(req.user._id",{"_index":1446,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.usermodel",{"_index":1486,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":1610,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1612,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.getuserbyemail(payload.email",{"_index":1175,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.changeuserpassword(req.user._id",{"_index":1577,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":709,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deleteuser(req.user._id",{"_index":1579,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1570,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":711,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(userdto.email",{"_index":704,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1571,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(userid",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuserdata(req.user._id",{"_index":1574,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":549,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":550,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":578,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":248,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":827,"title":{"classes/Ticket.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["ticket'})@apicreatedresponse({description",{"_index":1411,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket'})@apiokresponse({description",{"_index":1428,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket.dto",{"_index":1438,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":866,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:105",{"_index":901,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:112",{"_index":895,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:20",{"_index":891,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:25",{"_index":906,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:35",{"_index":898,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:45",{"_index":904,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:50",{"_index":890,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:55",{"_index":894,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:60",{"_index":878,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:68",{"_index":883,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:76",{"_index":881,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:84",{"_index":882,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:90",{"_index":887,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:95",{"_index":909,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.name",{"_index":1460,"title":{},"body":{"modules/TicketsModule.html":{}}}],["ticket.save",{"_index":1500,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticket.status",{"_index":1498,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketdocument",{"_index":1398,"title":{},"body":{"classes/Ticket.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["ticketdto",{"_index":1418,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["ticketid",{"_index":1476,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketmodel",{"_index":1471,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":1408,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{}}}],["tickets'})@apiokresponse({description",{"_index":1423,"title":{},"body":{"controllers/TicketsController.html":{}}}],["tickets'})@prop({trim",{"_index":1530,"title":{},"body":{"classes/User.html":{}}}],["tickets.controller",{"_index":1454,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service",{"_index":1437,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["tickets/tickets.module",{"_index":562,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketschema",{"_index":1404,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ticketscontroller",{"_index":1406,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":540,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":1436,"title":{"injectables/TicketsService.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["ticket})@apibody({type",{"_index":1412,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@apiparam({name",{"_index":1420,"title":{},"body":{"controllers/TicketsController.html":{}}}],["time",{"_index":810,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["time'})@prop({required",{"_index":970,"title":{},"body":{"classes/Flight.html":{}}}],["toisostring",{"_index":1106,"title":{},"body":{"injectables/FlightsService.html":{}}}],["token",{"_index":1167,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["tostring",{"_index":1107,"title":{},"body":{"injectables/FlightsService.html":{}}}],["touch",{"_index":1759,"title":{},"body":{"index.html":{}}}],["town",{"_index":419,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["town'})@prop({required",{"_index":413,"title":{},"body":{"classes/Airport.html":{}}}],["town'})@prop({trim",{"_index":410,"title":{},"body":{"classes/Airport.html":{}}}],["transformer",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":31,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true",{"_index":30,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true})@arraynotempty()@apiproperty({example",{"_index":1222,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["try",{"_index":253,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SectionsService.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":575,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1765,"title":{},"body":{"index.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@prop({required",{"_index":1392,"title":{},"body":{"classes/Ticket.html":{}}}],["typealiases",{"_index":1776,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1721,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["uia",{"_index":22,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["ukraine",{"_index":23,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["ukrainian",{"_index":36,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["ukranian",{"_index":401,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["unauthorized",{"_index":167,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apibody({type",{"_index":1545,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@apicreatedresponse({description",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiforbiddenresponse({description",{"_index":90,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apitoomanyrequestsresponse({description",{"_index":514,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":687,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":300,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirlineDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":1010,"title":{},"body":{"controllers/FlightsController.html":{}}}],["undefined})@apibody({type",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apitoomanyrequestsresponse({description",{"_index":112,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":1424,"title":{},"body":{"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":38,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/User.html":{}}}],["unit",{"_index":1736,"title":{},"body":{"index.html":{}}}],["up",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["up'})@apibadrequestresponse({description",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":80,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":342,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(id",{"_index":122,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(req",{"_index":1431,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateairlinedata",{"_index":219,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedata(airlineid",{"_index":235,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedto",{"_index":123,"title":{"classes/UpdateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["updateairlinedto})@apicookieauth()@roles('admin')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":126,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["updateairplanedata",{"_index":357,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedata(airplaneid",{"_index":369,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedto",{"_index":328,"title":{"classes/UpdateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["updateairplanedto})@apicookieauth()@roles('admin')@patch(':id",{"_index":329,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["updateairportdata",{"_index":466,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdata(airportid",{"_index":478,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdto",{"_index":438,"title":{"classes/UpdateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["updateairportdto})@apicookieauth()@roles('admin')@patch(':id",{"_index":441,"title":{},"body":{"controllers/AirportsController.html":{}}}],["updatedata",{"_index":1540,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(@request",{"_index":1573,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(req",{"_index":1558,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateflightdata",{"_index":1046,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdata(flightid",{"_index":1060,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdto",{"_index":1015,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updateflightdto})@apitoomanyrequestsresponse({description",{"_index":1016,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateseatdata",{"_index":1281,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdata(seatid",{"_index":1285,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdto",{"_index":1261,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updateseatdto})@useguards(jwtauthguard)@apitoomanyrequestsresponse({description",{"_index":1263,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updatesectiondata",{"_index":1347,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondata(sectionid",{"_index":1359,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondto",{"_index":1321,"title":{"classes/UpdateSectionDto.html":{}},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["updatesectiondto})@apitoomanyrequestsresponse({description",{"_index":1323,"title":{},"body":{"controllers/SectionsController.html":{}}}],["updateticketdata",{"_index":1467,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdata(userid",{"_index":1480,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdto",{"_index":1432,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["updateticketdto})@apitoomanyrequestsresponse({description",{"_index":1433,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateuserdata",{"_index":1593,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdata(userid",{"_index":1607,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdatadto",{"_index":1516,"title":{"classes/UpdateUserDataDto.html":{}},"body":{"classes/UpdateUserDataDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdatadto})@apitoomanyrequestsresponse({description",{"_index":1560,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":133,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["uri",{"_index":584,"title":{},"body":{"modules/AppModule.html":{}}}],["useclass",{"_index":591,"title":{},"body":{"modules/AppModule.html":{}}}],["usecreateindex",{"_index":589,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":574,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefindandmodify",{"_index":588,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":518,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":528,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":134,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["useinterceptors(fileinterceptor('logo",{"_index":171,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["usenewurlparser",{"_index":586,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":521,"title":{"classes/User.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiokresponse({description",{"_index":1550,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@prop({required",{"_index":1394,"title":{},"body":{"classes/Ticket.html":{}}}],["user._id",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":917,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":923,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":925,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":930,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":921,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":926,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":698,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.lastname",{"_index":700,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":1461,"title":{},"body":{"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":714,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phonenumber",{"_index":702,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":1213,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.save",{"_index":1491,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["user.tickets.push(ticket._id",{"_index":1490,"title":{},"body":{"injectables/TicketsService.html":{}}}],["userdocument",{"_index":1482,"title":{},"body":{"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":1611,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.firstname",{"_index":1613,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.lastname",{"_index":1614,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.newpassword",{"_index":1619,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.oldpassword",{"_index":1617,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.phonenumber",{"_index":1615,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":679,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1469,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1184,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1538,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiokresponse({description",{"_index":1554,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1584,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1563,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/users.entity",{"_index":522,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":557,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":1459,"title":{},"body":{"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1536,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1158,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":541,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":674,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apibadrequestresponse({description",{"_index":1559,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apiforbiddenresponse({description",{"_index":512,"title":{},"body":{"controllers/AppController.html":{}}}],["user})@apinotfoundresponse({description",{"_index":1544,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apiunauthorizedresponse({description",{"_index":1551,"title":{},"body":{"controllers/UsersController.html":{}}}],["useunifiedtopology",{"_index":587,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":948,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["uuid.v4",{"_index":951,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1155,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1181,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1159,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":672,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":683,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":734,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{},"dependencies.html":{}}}],["validity",{"_index":874,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["validity'})@prop({required",{"_index":1396,"title":{},"body":{"classes/Ticket.html":{}}}],["value",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1782,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1731,"title":{},"body":{"index.html":{}}}],["website",{"_index":1763,"title":{},"body":{"index.html":{}}}],["writing",{"_index":961,"title":{},"body":{"injectables/FilesService.html":{}}}],["yefremov",{"_index":924,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["you'd",{"_index":1752,"title":{},"body":{"index.html":{}}}],["z])(?=.*?[0",{"_index":724,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*?[a",{"_index":723,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["zhulyani",{"_index":404,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["zhulyani/жуляни/iev",{"_index":820,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["zoom",{"_index":200,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Airline.html":{"url":"classes/Airline.html","title":"class - Airline","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/entities/airlines.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                airlineNameUa\n                            \n                            \n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Optional\n                                descriptionRu\n                            \n                            \n                                descriptionUa\n                            \n                            \n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'logo', description: 'Airline logo'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirlineDocument = Airline & Document;\n\n@Schema()\nexport class Airline {\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airlineNameUa: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameEng?: string;\n\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameRu?: string;\n\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  @Prop({ required: true, trim: true })\n  descriptionUa: string;\n\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionEng?: string;\n\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionRu?: string;\n\n  @ApiProperty({\n    example: 'logo',\n    description: 'Airline logo',\n  })\n  @Prop({ required: true, trim: true })\n  logo: string;\n}\nexport const AirlineSchema = SchemaFactory.createForClass(Airline);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirlinesController.html":{"url":"controllers/AirlinesController.html","title":"controller - AirlinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirlinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airlines\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airlineDto: CreateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airline'})@ApiCreatedResponse({description: 'Created', type: Airline})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateAirlineDto})@ApiCookieAuth()@Roles('admin')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airline'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airlines'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airline data'})@ApiNotFoundResponse({description: 'Not Found'})@ApiOkResponse({description: 'Success', type: Airline})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiParam({name: 'id', type: 'string'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airlineDto: UpdateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airline data'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: UpdateAirlineDto})@ApiCookieAuth()@Roles('admin')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConsumes,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { Airline } from './entities/airlines.entity';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airlines')\n@Controller('airlines')\nexport class AirlinesController {\n  constructor(private readonly airlinesService: AirlinesService) {}\n\n  @ApiOperation({ summary: 'Create a Airline' })\n  @ApiCreatedResponse({ description: 'Created', type: Airline })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateAirlineDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @UseInterceptors(FileInterceptor('logo'))\n  @ApiConsumes('multipart/form-data')\n  @Post()\n  create(\n    @Body() airlineDto: CreateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.createAirline(airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airlines' })\n  @ApiOkResponse({ description: 'Success', type: [Airline] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.airlinesService.getAllAirlines();\n  }\n\n  @ApiOperation({ summary: 'Get Airline data' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airlinesService.getAirlineById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airline data' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: UpdateAirlineDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @UseInterceptors(FileInterceptor('logo'))\n  @ApiConsumes('multipart/form-data')\n  @Patch(':id')\n  update(\n    @Param('id') id: ObjectId,\n    @Body() airlineDto: UpdateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.updateAirlineData(id, airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Delete Airline' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airlinesService.deleteAirline(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirlinesModule.html":{"url":"modules/AirlinesModule.html","title":"module - AirlinesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirlinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airlines/airlines.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirlinesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { AirlinesController } from './airlines.controller';\nimport { FilesModule } from 'src/files/files.module';\nimport { Airline, AirlineSchema } from './entities/airlines.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airline.name, schema: AirlineSchema }]),\n    FilesModule,\n  ],\n  controllers: [AirlinesController],\n  providers: [AirlinesService],\n  exports: [AirlinesService],\n})\nexport class AirlinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirlinesService.html":{"url":"injectables/AirlinesService.html","title":"injectable - AirlinesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirlinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirline\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirline\n                            \n                            \n                                    Public\n                                    Async\n                                getAirlineById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirlines\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirlineData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airlineModel: Model, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/airlines/airlines.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airlineModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirline(airlineDto: CreateAirlineDto, logo: any)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirline(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirlineById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirlineById(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirlines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirlines()\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirlineData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirlineData(airlineId: ObjectId, airlineDto: UpdateAirlineDto, logo: any)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { FilesService, Folder } from '../files/files.service';\nimport { Airline, AirlineDocument } from './entities/airlines.entity';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\n\n@Injectable()\nexport class AirlinesService {\n  constructor(\n    @InjectModel(Airline.name) private airlineModel: Model,\n    private filesService: FilesService,\n  ) {}\n\n  public async createAirline(\n    airlineDto: CreateAirlineDto,\n    logo: any,\n  ): Promise {\n    let airline = await this.airlineModel\n      .findOne({\n        airlineNameUa: airlineDto.airlineNameUa,\n      })\n      .exec();\n    if (airline) {\n      throw new HttpException(\n        'Airline with this name already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      const fileName = await this.filesService.createFile(Folder.Airline, logo);\n      airline = await this.airlineModel.create({\n        ...airlineDto,\n        logo: fileName,\n      });\n\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirlines(): Promise {\n    const airlines = await this.airlineModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airlines;\n  }\n\n  public async getAirlineById(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n\n  public async updateAirlineData(\n    airlineId: ObjectId,\n    airlineDto: UpdateAirlineDto,\n    logo: any,\n  ): Promise {\n    let airline = await this.airlineModel.findById(airlineId).exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airlineDto.airlineNameEng) {\n      airline.airlineNameEng = airlineDto.airlineNameEng;\n    }\n    if (airlineDto.airlineNameRu) {\n      airline.airlineNameRu = airlineDto.airlineNameRu;\n    }\n    if (airlineDto.descriptionEng) {\n      airline.descriptionEng = airlineDto.descriptionEng;\n    }\n    if (airlineDto.descriptionRu) {\n      airline.descriptionRu = airlineDto.descriptionRu;\n    }\n    if (airlineDto.descriptionUa) {\n      airline.descriptionUa = airlineDto.descriptionUa;\n    }\n\n    try {\n      if (logo) {\n        await this.filesService.deleteFile(airline.logo);\n        const fileName = await this.filesService.createFile(\n          Folder.Airline,\n          logo,\n        );\n        airline.logo = fileName;\n      }\n      await airline.save();\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async deleteAirline(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findByIdAndDelete(airlineId)\n      .select({ __v: false })\n      .exec();\n    await this.filesService.deleteFile(airline.logo);\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airplane.html":{"url":"classes/Airplane.html","title":"class - Airplane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airplane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/entities/airplane.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '45', description: 'Amount Of Seat'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'sections', description: 'Sections'})@Prop({trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type AirplaneDocument = Airplane & Document;\n\n@Schema()\nexport class Airplane {\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airplaneName: string;\n\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  @Prop({ required: true })\n  amountOfSeat: number;\n\n  @ApiProperty({ example: 'sections', description: 'Sections' })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Section',\n  })\n  sections: Section[];\n}\nexport const AirplaneSchema = SchemaFactory.createForClass(Airplane);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirplanesController.html":{"url":"controllers/AirplanesController.html","title":"controller - AirplanesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirplanesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airplanes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airplaneDto: CreateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airplane'})@ApiCreatedResponse({description: 'Created', type: Airplane})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateAirplaneDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airplane'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airplanes'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airplane data'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airplane data'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: UpdateAirplaneDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { Airplane } from './entities/airplane.entity';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airplanes')\n@Controller('airplanes')\nexport class AirplanesController {\n  constructor(private readonly airplanesService: AirplanesService) {}\n\n  @ApiOperation({ summary: 'Create a Airplane' })\n  @ApiCreatedResponse({ description: 'Created', type: Airplane })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateAirplaneDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() airplaneDto: CreateAirplaneDto) {\n    return this.airplanesService.createAirplane(airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airplanes' })\n  @ApiOkResponse({ description: 'Success', type: [Airplane] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.airplanesService.getAllAirplanes();\n  }\n\n  @ApiOperation({ summary: 'Get Airplane data' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airplanesService.getAirplaneById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airplane data' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: UpdateAirplaneDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airplaneDto: UpdateAirplaneDto) {\n    return this.airplanesService.updateAirplaneData(id, airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airplane' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airplanesService.deleteAirplane(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirplanesModule.html":{"url":"modules/AirplanesModule.html","title":"module - AirplanesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirplanesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airplanes/airplanes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirplanesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { AirplanesController } from './airplanes.controller';\nimport { Airplane, AirplaneSchema } from './entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Airplane.name, schema: AirplaneSchema },\n    ]),\n  ],\n  controllers: [AirplanesController],\n  providers: [AirplanesService],\n  exports: [AirplanesService],\n})\nexport class AirplanesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirplanesService.html":{"url":"injectables/AirplanesService.html","title":"injectable - AirplanesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirplanesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                getAirplaneById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirplanes\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirplaneData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airplaneModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airplanes/airplanes.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirplane(airplaneDto: CreateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirplane(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirplaneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirplaneById(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirplanes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirplanes()\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirplaneData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirplaneData(airplaneId: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Airplane, AirplaneDocument } from './entities/airplane.entity';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\n\n@Injectable()\nexport class AirplanesService {\n  constructor(\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n  ) {}\n\n  public async createAirplane(\n    airplaneDto: CreateAirplaneDto,\n  ): Promise {\n    try {\n      let airplane = await this.airplaneModel.create({ ...airplaneDto });\n      airplane = await this.airplaneModel\n        .findById(airplane._id)\n        .populate({ path: 'sections', select: '-__v' })\n        .select({ __v: false })\n        .exec();\n      return airplane;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirplanes(): Promise {\n    const airplanes = await this.airplaneModel\n      .find()\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplanes;\n  }\n\n  public async getAirplaneById(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n\n  public async updateAirplaneData(\n    airplaneId: ObjectId,\n    airplaneDto: UpdateAirplaneDto,\n  ): Promise {\n    let airplane = await this.airplaneModel.findById(airplaneId).exec();\n    if (!airplane) {\n      throw new BadRequestException('Airplane with this Id not found');\n    }\n\n    if (airplaneDto.airplaneName) {\n      airplane.airplaneName = airplaneDto.airplaneName;\n    }\n    await airplane.save();\n\n    airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplane;\n  }\n\n  public async deleteAirplane(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findByIdAndDelete(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airport.html":{"url":"classes/Airport.html","title":"class - Airport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/entities/airport.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                airportCountryUa\n                            \n                            \n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Optional\n                                airportNameRu\n                            \n                            \n                                airportNameUa\n                            \n                            \n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Optional\n                                airportTownRu\n                            \n                            \n                                airportTownUa\n                            \n                            \n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani', description: 'English airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляны', description: 'Russian airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'IEV', description: 'IATA'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirportDocument = Airport & Document;\n\n@Schema()\nexport class Airport {\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  @Prop({ required: true, unique: true, trim: true })\n  airportNameUa: string;\n\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  @Prop({ unique: true, trim: true })\n  airportNameEng?: string;\n\n  @ApiProperty({ example: 'Жуляны', description: 'Russian airport name' })\n  @Prop({ unique: true, trim: true })\n  airportNameRu?: string;\n\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  @Prop({ required: true, unique: true, trim: true })\n  IATA: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  @Prop({ required: true, trim: true })\n  airportCountryUa: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryRu?: string;\n\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  @Prop({ required: true, trim: true })\n  airportTownUa: string;\n\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownEng?: string;\n\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownRu?: string;\n}\nexport const AirportSchema = SchemaFactory.createForClass(Airport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirportsController.html":{"url":"controllers/AirportsController.html","title":"controller - AirportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airportDto: CreateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airport'})@ApiCreatedResponse({description: 'Created', type: Airport})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateAirportDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airport'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airports'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airport data'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airport data'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: UpdateAirportDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { Airport } from './entities/airport.entity';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airports')\n@Controller('airports')\nexport class AirportsController {\n  constructor(private readonly airportsService: AirportsService) {}\n\n  @ApiOperation({ summary: 'Create a Airport' })\n  @ApiCreatedResponse({ description: 'Created', type: Airport })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateAirportDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() airportDto: CreateAirportDto) {\n    return this.airportsService.createAirport(airportDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airports' })\n  @ApiOkResponse({ description: 'Success', type: [Airport] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.airportsService.getAllAirports();\n  }\n\n  @ApiOperation({ summary: 'Get Airport data' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airportsService.getAirportById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airport data' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: UpdateAirportDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airportDto: UpdateAirportDto) {\n    return this.airportsService.updateAirportData(id, airportDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airport' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airportsService.deleteAirport(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirportsModule.html":{"url":"modules/AirportsModule.html","title":"module - AirportsModule","body":"\n                   \n\n\n\n\n    Modules\n    AirportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AirportsModule_exports\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airports/airports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { AirportsController } from './airports.controller';\nimport { Airport, AirportSchema } from './entities/airport.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airport.name, schema: AirportSchema }]),\n  ],\n  controllers: [AirportsController],\n  providers: [AirportsService],\n  exports: [AirportsService],\n})\nexport class AirportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirportsService.html":{"url":"injectables/AirportsService.html","title":"injectable - AirportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirport\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirport\n                            \n                            \n                                    Public\n                                    Async\n                                getAirportById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirports\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirportData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airports/airports.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirport(airportDto: CreateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirport(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirportById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirportById(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirports()\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirportData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirportData(airportId: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Airport, AirportDocument } from './entities/airport.entity';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\n\n@Injectable()\nexport class AirportsService {\n  constructor(\n    @InjectModel(Airport.name) private airportModel: Model,\n  ) {}\n\n  public async createAirport(airportDto: CreateAirportDto): Promise {\n    let airport = await this.airportModel\n      .findOne({\n        IATA: airportDto.IATA,\n      })\n      .exec();\n    if (airport) {\n      throw new HttpException(\n        'Airport with this IATA already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      airport = await this.airportModel.create({ ...airportDto });\n      airport = await this.airportModel\n        .findOne({\n          IATA: airportDto.IATA,\n        })\n        .select({ __v: false })\n        .exec();\n      return airport;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirports(): Promise {\n    const airports = await this.airportModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airports;\n  }\n\n  public async getAirportById(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n\n  public async updateAirportData(\n    airportId: ObjectId,\n    airportDto: UpdateAirportDto,\n  ): Promise {\n    let airport = await this.airportModel.findById(airportId).exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airportDto.IATA) {\n      airport.IATA = airportDto.IATA;\n    }\n    if (airportDto.airportCountryEng) {\n      airport.airportCountryEng = airportDto.airportCountryEng;\n    }\n    if (airportDto.airportCountryUa) {\n      airport.airportCountryUa = airportDto.airportCountryUa;\n    }\n    if (airportDto.airportCountryRu) {\n      airport.airportCountryRu = airportDto.airportCountryRu;\n    }\n    if (airportDto.airportNameEng) {\n      airport.airportNameEng = airportDto.airportNameEng;\n    }\n    if (airportDto.airportNameUa) {\n      airport.airportNameUa = airportDto.airportNameUa;\n    }\n    if (airportDto.airportNameRu) {\n      airport.airportNameRu = airportDto.airportNameRu;\n    }\n    if (airportDto.airportTownEng) {\n      airport.airportTownEng = airportDto.airportTownEng;\n    }\n    if (airportDto.airportTownUa) {\n      airport.airportTownUa = airportDto.airportTownUa;\n    }\n    if (airportDto.airportTownRu) {\n      airport.airportTownRu = airportDto.airportTownRu;\n    }\n    await airport.save();\n\n    airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    return airport;\n  }\n\n  public async deleteAirport(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findByIdAndDelete(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Profile'})@ApiOkResponse({description: 'Success', type: User})@ApiForbiddenResponse({description: 'Forbidden'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport {\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\nimport { AuthService } from './auth/auth.service';\nimport { User } from './users/entities/users.entity';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\n\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Get Profile' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Request() req: any) {\n    return this.authService.getProfile(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAirlinesModule\n\nAirlinesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirlinesModule\n                        \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            SectionsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\n\nimport { AppService } from './app.service';\nimport { AppController } from './app.controller';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AirportsModule } from './airports/airports.module';\nimport { AirlinesModule } from './airlines/airlines.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { TicketsModule } from './tickets/tickets.module';\nimport { FilesModule } from './files/files.module';\nimport { AirplanesModule } from './airplanes/airplanes.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { SectionsModule } from './sections/sections.module';\nimport { RolesGuard } from './auth/guards/roles.guard';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n      cache: true,\n    }),\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        ttl: configService.get('CACHE_TTL'),\n      }),\n      inject: [ConfigService],\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('THROTTLE_TTL'),\n        limit: config.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGO_DB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n        useCreateIndex: true,\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    AirportsModule,\n    AirlinesModule,\n    FlightsModule,\n    TicketsModule,\n    FilesModule,\n    AirplanesModule,\n    SeatsModule,\n    SectionsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Log Out'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiCreatedResponse({description: 'Created'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@UseGuards(JwtAuthGuard)@ApiCookieAuth()@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign In'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBody({type: LoginUserDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@UseGuards(LocalAuthGuard)@Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign Up'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateUserDto})@Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Res,\n  Body,\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOperation,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\n\nimport { AuthService } from './auth.service';\nimport { User } from 'src/users/entities/users.entity';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { LoginUserDto } from 'src/users/dto/login-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Sign In' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCreatedResponse({ description: 'Created', type: [User] })\n  @ApiBody({ type: LoginUserDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @UseGuards(LocalAuthGuard)\n  @Post('signin')\n  async signIn(@Request() req: any, @Res({ passthrough: true }) res: Response) {\n    const [resBody, jwt] = await this.authService.signIn(req.user);\n    res.cookie('access_token', jwt, {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return resBody;\n  }\n\n  @ApiOperation({ summary: 'Sign Up' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCreatedResponse({ description: 'Created', type: [User] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateUserDto })\n  @Post('signup')\n  async signUp(@Body() userDto: CreateUserDto) {\n    return await this.authService.signUp(userDto);\n  }\n\n  @ApiOperation({ summary: 'Log Out' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiCreatedResponse({ description: 'Created' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @UseGuards(JwtAuthGuard)\n  @ApiCookieAuth()\n  @Post('logout')\n  async logOut(@Res({ passthrough: true }) res: Response) {\n    res.cookie('access_token', '', {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule,\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { UsersService } from '../users/users.service';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getProfile(userId: ObjectId) {\n    return this.usersService.getUserById(userId);\n  }\n\n  async signIn(user: any) {\n    const payload = { email: user.email, sub: user._id, role: user.role };\n    return [\n      {\n        userId: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        role: user.role,\n      },\n      this.jwtService.sign(payload),\n    ];\n  }\n\n  async signUp(userDto: CreateUserDto) {\n    let user = await this.usersService.getUserByEmail(userDto.email);\n    if (user) {\n      throw new HttpException(\n        'User with this email already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hashPassword = await bcrypt.hash(userDto.password, salt);\n    user = await this.usersService.createUser({\n      ...userDto,\n      password: hashPassword,\n    });\n    return user;\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.getUserByEmail(email);\n    const passwordEquals = await bcrypt.compare(pass, user.password);\n    if (user && passwordEquals) {\n      return user;\n    }\n    throw new UnauthorizedException({\n      message: 'Incorrect email or password',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangeUserPasswordDto.html":{"url":"classes/ChangeUserPasswordDto.html","title":"class - ChangeUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangeUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-user-password.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'B2a3#d1c*', description: 'New Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            oldPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nexport class ChangeUserPasswordDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'B2a3#d1c*', description: 'New Password' })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirlineDto.html":{"url":"classes/CreateAirlineDto.html","title":"class - CreateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/create-airline.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                    Readonly\n                                airlineNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionRu\n                            \n                            \n                                    Readonly\n                                descriptionUa\n                            \n                            \n                                    Readonly\n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MaxLength(50)@ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(200)@ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(200)@ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(200)@ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'file', properties: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:71\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MaxLength } from 'class-validator';\n\nexport class CreateAirlineDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  readonly airlineNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  readonly airlineNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  readonly airlineNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  readonly descriptionUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  readonly descriptionEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  readonly descriptionRu?: string;\n\n  @ApiProperty({\n    type: 'file',\n    properties: {\n      logo: {\n        type: 'string',\n        format: 'binary',\n      },\n    },\n  })\n  readonly logo: any;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirplaneDto.html":{"url":"classes/CreateAirplaneDto.html","title":"class - CreateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/create-airplane.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                    Readonly\n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MaxLength(50)@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@ApiProperty({example: '45', description: 'Amount Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayUnique()@IsNotEmpty()@ApiProperty({example: 'sections', description: 'Sections'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MaxLength,\n} from 'class-validator';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport class CreateAirplaneDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplaneName: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  amountOfSeat: number;\n\n  @IsArray()\n  @ArrayUnique()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'sections',\n    description: 'Sections',\n  })\n  readonly sections: Section[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirportDto.html":{"url":"classes/CreateAirportDto.html","title":"class - CreateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/create-airport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                    Readonly\n                                airportCountryUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameRu\n                            \n                            \n                                    Readonly\n                                airportNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownRu\n                            \n                            \n                                    Readonly\n                                airportTownUa\n                            \n                            \n                                    Readonly\n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Zhulyani', description: 'English airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Жуляны', description: 'Russian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsUppercase()@Length(2, 4)@ApiProperty({example: 'IEV', description: 'IATA'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUppercase,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateAirportDto {\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  readonly airportNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  readonly airportNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Жуляны',\n    description: 'Russian airport name',\n  })\n  readonly airportNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsUppercase()\n  @Length(2, 4)\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  readonly IATA: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  readonly airportCountryUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  readonly airportCountryEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  readonly airportCountryRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  readonly airportTownUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  readonly airportTownEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  readonly airportTownRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/create-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airline\n                            \n                            \n                                    Readonly\n                                airplane\n                            \n                            \n                                    Readonly\n                                arrivalAirport\n                            \n                            \n                                    Readonly\n                                arrivalTime\n                            \n                            \n                                    Readonly\n                                baggage\n                            \n                            \n                                    Readonly\n                                carryOnBaggage\n                            \n                            \n                                    Readonly\n                                departureAirport\n                            \n                            \n                                    Readonly\n                                departureTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                exchange\n                            \n                            \n                                    Readonly\n                                flightName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                refund\n                            \n                            \n                                    Readonly\n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsMongoId()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsNotEmpty()@ApiProperty({example: 'true', description: 'Hand luggage'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '0.7', description: 'Ticket exchange'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'PS-9065', description: 'Flight name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '0.5', description: 'Ticket return'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '200', description: 'Ticket taxa'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsMongoId,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\nimport { Airport } from 'src/airports/entities/airport.entity';\n\nexport class CreateFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  readonly flightName: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  readonly airline: Airline;\n\n  @IsMongoId()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplane: Airplane;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  readonly departureAirport: Airport;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly departureTime: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  readonly arrivalAirport: Airport;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  readonly arrivalTime: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  readonly taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  readonly baggage: number | null;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  readonly carryOnBaggage: boolean;\n\n  @IsOptional()\n  @ApiPropertyOptional({ example: '0.7', description: 'Ticket exchange' })\n  readonly exchange?: number | null;\n\n  @IsOptional()\n  @ApiPropertyOptional({ example: '0.5', description: 'Ticket return' })\n  readonly refund?: number | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/create-seat.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSeatDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSectionDto.html":{"url":"classes/CreateSectionDto.html","title":"class - CreateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/create-section.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                price\n                            \n                            \n                                    Readonly\n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Class)@ApiProperty({example: 'economy', description: 'Class', enum: Class, enumName: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '1700', description: 'Section Price'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '90', description: 'Seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { Class } from '../entities/section.entity';\n\nexport class CreateSectionDto {\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  readonly price: number;\n\n  @IsNotEmpty()\n  @IsEnum(Class)\n  @ApiProperty({\n    example: 'economy',\n    description: 'Class',\n    enum: Class,\n    enumName: 'Class',\n  })\n  readonly class: Class;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  readonly seats: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/create-ticket.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                birthday\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Readonly\n                                citizenshipUa\n                            \n                            \n                                    Readonly\n                                document\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                flight\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                numberOfSeat\n                            \n                            \n                                    Readonly\n                                sex\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                user\n                            \n                            \n                                    Readonly\n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiPropertyOptional({example: 'Ukraine', description: 'The English name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiPropertyOptional({example: 'Украина', description: 'The Russian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(7, 9)@ApiProperty({example: 'RS123456', description: 'Document'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'PS-9065', description: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Efremov', description: 'Last Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '23', description: 'Number Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Sex)@ApiProperty({example: 'male', description: 'Sex', enum: Sex, enumName: 'Sex'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'booked', description: 'Status', enum: Status, enumName: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Type)@ApiProperty({example: 'adult', description: 'Type', enum: Type, enumName: 'Type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'test@gmail.com', description: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:95\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\n\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\nimport { User } from 'src/users/entities/users.entity';\nimport { Sex, Status, Type } from '../entities/ticket.entity';\n\nexport class CreateTicketDto {\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  readonly flight: Flight;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  readonly user: User;\n\n  @IsNotEmpty()\n  @IsEnum(Sex)\n  @ApiProperty({\n    example: 'male',\n    description: 'Sex',\n    enum: Sex,\n    enumName: 'Sex',\n  })\n  readonly sex: Sex;\n\n  @IsNotEmpty()\n  @IsEnum(Type)\n  @ApiProperty({\n    example: 'adult',\n    description: 'Type',\n    enum: Type,\n    enumName: 'Type',\n  })\n  readonly type: Type;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  readonly birthday: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  readonly citizenshipUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  readonly citizenshipEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  readonly citizenshipRu?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(7, 9)\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  readonly document: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  readonly validity: string;\n\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({\n    example: 'booked',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  readonly status: Status;\n\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  readonly numberOfSeat?: Seat;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()@ApiProperty({example: 'test@gmail.com', description: 'E-mail'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@MaxLength(20)@IsString()@ApiProperty({example: 'Dmitry', description: 'First name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@MaxLength(20)@IsString()@ApiProperty({example: 'Yefremov', description: 'Last name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsPhoneNumber()@ApiProperty({example: '380951234567', description: 'Phone number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsPhoneNumber,\n  IsString,\n  Matches,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @MaxLength(20)\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @MaxLength(20)\n  @IsString()\n  @ApiProperty({ example: 'Yefremov', description: 'Last name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsPhoneNumber()\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  readonly phoneNumber: number;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  readonly email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\n\n@Module({\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFile\n                            \n                            \n                                    Async\n                                deleteFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFile(folder: Folder, file: any)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(filePath: any)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport path from 'path';\nimport fs from 'fs';\nimport * as uuid from 'uuid';\n\nexport enum Folder {\n  Airline = 'airline',\n}\n\n@Injectable()\nexport class FilesService {\n  async createFile(folder: Folder, file: any): Promise {\n    try {\n      const fileExtension = file.originalname.split('.').pop();\n      const fileName = uuid.v4() + '.' + fileExtension;\n      const filePath = path.resolve(__dirname, 'static', folder);\n      if (!fs.existsSync(filePath)) {\n        fs.mkdirSync(filePath, { recursive: true });\n      }\n      fs.writeFileSync(path.join(filePath, fileName), file.buffer);\n      return folder + '/' + fileName;\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while writing the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async deleteFile(filePath: any): Promise {\n    try {\n      const pathToFile = path.resolve(__dirname, 'static', filePath);\n      fs.unlinkSync(pathToFile);\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while deleting the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Flight.html":{"url":"classes/Flight.html","title":"class - Flight","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/entities/flights.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                airplane\n                            \n                            \n                                arrivalAirport\n                            \n                            \n                                arrivalTime\n                            \n                            \n                                baggage\n                            \n                            \n                                carryOnBaggage\n                            \n                            \n                                departureAirport\n                            \n                            \n                                departureTime\n                            \n                            \n                                    Optional\n                                exchange\n                            \n                            \n                                flightName\n                            \n                            \n                                    Optional\n                                refund\n                            \n                            \n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})@Prop({required: true, type: undefined, ref: 'Airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, type: undefined, ref: 'Airplane'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'true', description: 'Hand luggage'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: '0.7', description: 'Ticket exchange'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: '0.5', description: 'Ticket return'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '200', description: 'Ticket taxa'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:80\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Airport } from 'src/airports/entities/airport.entity';\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\n\nexport type FlightDocument = Flight & Document;\n\n@Schema()\nexport class Flight {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  @Prop({ required: true, unique: true, trim: true })\n  flightName: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airline',\n  })\n  airline: Airline;\n\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airplane',\n  })\n  airplane: Airplane;\n\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  departureAirport: Airport;\n\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  @Prop({ required: true })\n  departureTime: string;\n\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  arrivalAirport: Airport;\n\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  @Prop({ required: true })\n  arrivalTime: string;\n\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  @Prop({})\n  taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  @Prop({})\n  baggage: number | null;\n\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  @Prop({ required: true })\n  carryOnBaggage: boolean;\n\n  @ApiPropertyOptional({ example: '0.7', description: 'Ticket exchange' })\n  @Prop({})\n  exchange?: number | null;\n\n  @ApiPropertyOptional({ example: '0.5', description: 'Ticket return' })\n  @Prop({})\n  refund?: number | null;\n}\nexport const FlightSchema = SchemaFactory.createForClass(Flight);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                flights\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(flightDto: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Flight'})@ApiCreatedResponse({description: 'Created', type: Flight})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateFlightDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Flight'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Flights'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Flight data'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(flightDto: SearchFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search Flights'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBadRequestResponse({description: 'Bad Request'})@ApiBody({type: SearchFlightDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Post('search')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Flight data'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateFlightDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { Flight } from './entities/flights.entity';\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Flights')\n@Controller('flights')\nexport class FlightsController {\n  constructor(private readonly flightsService: FlightsService) {}\n\n  @ApiOperation({ summary: 'Create a Flight' })\n  @ApiCreatedResponse({ description: 'Created', type: Flight })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateFlightDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() flightDto: CreateFlightDto) {\n    return this.flightsService.createFlight(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Search Flights' })\n  @ApiCreatedResponse({ description: 'Created', type: [Flight] })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiBody({ type: SearchFlightDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Post('search')\n  search(@Body() flightDto: SearchFlightDto) {\n    return this.flightsService.searchFlights(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Flights' })\n  @ApiOkResponse({ description: 'Success', type: [Flight] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.flightsService.getAllFlights();\n  }\n\n  @ApiOperation({ summary: 'Get Flight data' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.flightsService.getFlightById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Flight data' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateFlightDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() flightDto: UpdateFlightDto) {\n    return this.flightsService.updateFlightData(id, flightDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Flight' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.flightsService.deleteFlight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_FlightsModule_exports\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { Flight, FlightSchema } from './entities/flights.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Flight.name, schema: FlightSchema }]),\n  ],\n  controllers: [FlightsController],\n  providers: [FlightsService],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createFlight\n                            \n                            \n                                    Public\n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Public\n                                    Async\n                                getAllFlights\n                            \n                            \n                                    Public\n                                    Async\n                                getFlightById\n                            \n                            \n                                    Public\n                                    Async\n                                searchFlights\n                            \n                            \n                                    Public\n                                    Async\n                                updateFlightData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(flightModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(flightDto: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllFlights()\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getFlightById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlightById(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            searchFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchFlights(flightDto: SearchFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateFlightData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlightData(flightId: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport Fuse from 'fuse.js';\nimport moment from 'moment';\n\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { Flight, FlightDocument } from './entities/flights.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(\n    @InjectModel(Flight.name) private flightModel: Model,\n  ) {}\n\n  public async createFlight(flightDto: CreateFlightDto): Promise {\n    let flight = await this.flightModel\n      .findOne({\n        flightName: flightDto.flightName,\n      })\n      .exec();\n    if (flight) {\n      throw new BadRequestException('Flight with this name already exists');\n    }\n\n    try {\n      flight = await this.flightModel.create({ ...flightDto });\n      flight = await this.flightModel\n        .findOne({\n          flightName: flightDto.flightName,\n        })\n        .select({ __v: false })\n        .populate({ path: 'airline', select: '-__v' })\n        .populate({\n          path: 'airplane',\n          select: '-__v',\n          populate: {\n            path: 'sections',\n            select: '-__v',\n            populate: { path: 'seats', select: '-__v' },\n          },\n        })\n        .populate({ path: 'departureAirport', select: '-__v' })\n        .populate({ path: 'arrivalAirport', select: '-__v' })\n        .exec();\n      return flight;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllFlights(): Promise {\n    const flights = await this.flightModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flights;\n  }\n\n  public async getFlightById(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return flight;\n  }\n\n  public async updateFlightData(\n    flightId: ObjectId,\n    flightDto: UpdateFlightDto,\n  ): Promise {\n    let flight = await this.flightModel.findById(flightId).exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (flightDto.airline) {\n      flight.airline = flightDto.airline;\n    }\n    if (flightDto.airplane) {\n      flight.airplane = flightDto.airplane;\n    }\n    if (flightDto.arrivalAirport) {\n      flight.arrivalAirport = flightDto.arrivalAirport;\n    }\n    if (flightDto.arrivalTime) {\n      flight.arrivalTime = flightDto.arrivalTime;\n    }\n    if (flightDto.baggage) {\n      flight.baggage = flightDto.baggage;\n    }\n    if (flightDto.carryOnBaggage) {\n      flight.carryOnBaggage = flightDto.carryOnBaggage;\n    }\n    if (flightDto.departureAirport) {\n      flight.departureAirport = flightDto.departureAirport;\n    }\n    if (flightDto.departureTime) {\n      flight.departureTime = flightDto.departureTime;\n    }\n    if (flightDto.exchange) {\n      flight.exchange = flightDto.exchange;\n    }\n    if (flightDto.flightName) {\n      flight.flightName = flightDto.flightName;\n    }\n    if (flightDto.refund) {\n      flight.refund = flightDto.refund;\n    }\n    if (flightDto.taxa) {\n      flight.taxa = flightDto.taxa;\n    }\n    await flight.save();\n\n    flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async deleteFlight(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findByIdAndDelete(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return flight;\n  }\n\n  public async searchFlights(flightDto: SearchFlightDto): Promise {\n    let secondDepTime: string = flightDto.firstDepTime;\n    if (flightDto.secondDepTime) {\n      secondDepTime = flightDto.secondDepTime;\n    }\n\n    const initialFlights = await this.flightModel\n      .find({\n        departureTime: {\n          $gte: moment(flightDto.firstDepTime)\n            .startOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n          $lte: moment(secondDepTime)\n            .endOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n        },\n      })\n      .select({ __v: false })\n      .populate({\n        path: 'airline',\n        select: '-__v',\n      })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          match: { class: { $in: flightDto.class } },\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    const arr = [];\n    initialFlights.forEach((a) => {\n      if (flightDto.class.length > 1) {\n        if (a.airplane.amountOfSeat >= flightDto.count) {\n          a.airplane.sections.forEach((s) => {\n            for (const q of flightDto.class)\n              if (s.class === q) {\n                arr.push(a);\n                break;\n              }\n          });\n        }\n      } else {\n        a.airplane.sections.forEach((s) => {\n          for (const q of flightDto.class)\n            if (s.class === q) {\n              if (s.seats.length >= flightDto.count) {\n                arr.push(a);\n              }\n            }\n        });\n      }\n    });\n    const flights = Array.from(new Set(arr));\n\n    const optionsForDeparture = {\n      includeScore: true,\n      keys: [\n        'departureAirport.airportNameUa',\n        'departureAirport.airportNameEng',\n        'departureAirport.airportNameRu',\n        'departureAirport.IATA',\n        'departureAirport.airportTownUa',\n        'departureAirport.airportTownEng',\n        'departureAirport.airportTownRu',\n      ],\n    };\n\n    let fuse = new Fuse(flights, optionsForDeparture);\n    let result = fuse.search(flightDto.departure).map((r) => r.item);\n    const optionsForArrival = {\n      includeScore: true,\n      keys: [\n        'arrivalAirport.airportNameUa',\n        'arrivalAirport.airportNameEng',\n        'arrivalAirport.airportNameRu',\n        'arrivalAirport.IATA',\n        'arrivalAirport.airportTownUa',\n        'arrivalAirport.airportTownEng',\n        'arrivalAirport.airportTownRu',\n      ],\n    };\n\n    fuse = new Fuse(result, optionsForArrival);\n    result = fuse.search(flightDto.arrival).map((r) => r.item);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\nimport { UsersService } from 'src/users/users.service';\n\nconst cookieExtractor = function (req: any) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n};\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private userService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: cookieExtractor,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.getUserByEmail(payload.email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginUserDto extends PartialType(\n  OmitType(CreateUserDto, ['firstName', 'lastName', 'phoneNumber'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\n\nimport { ROLES_KEY } from '../decorators/roles-auth.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    try {\n      const requiredRoles = this.reflector.getAllAndOverride(\n        ROLES_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      if (!requiredRoles) {\n        return true;\n      }\n\n      const req = context.switchToHttp().getRequest();\n      let token = null;\n      if (req && req.cookies) {\n        token = req.cookies['access_token'];\n      }\n\n      const user = this.jwtService.verify(token);\n      req.user = user;\n      return requiredRoles.some((role) => user.role?.includes(role));\n    } catch (e) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFlightDto.html":{"url":"classes/SearchFlightDto.html","title":"class - SearchFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/search-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                arrival\n                            \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                count\n                            \n                            \n                                    Readonly\n                                departure\n                            \n                            \n                                    Readonly\n                                firstDepTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                secondDepTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrival\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsArray()@IsEnum(Class, {each: true})@ArrayNotEmpty()@ApiProperty({example: '[\"business\"]', description: 'Class of section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@Min(1)@Max(9)@ApiProperty({example: '3', description: 'Count of seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsDateString()@ApiProperty({example: '2021-05-15T15:35:00.000Z', description: 'First range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            secondDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()@IsString()@IsDateString()@ApiPropertyOptional({example: '2021-05-18T15:35:00.000Z', description: 'Second range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Max,\n  MaxLength,\n  Min,\n} from 'class-validator';\nimport { Class } from 'src/sections/entities/section.entity';\n\nexport class SearchFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure',\n  })\n  readonly departure: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsDateString()\n  @ApiProperty({\n    example: '2021-05-15T15:35:00.000Z',\n    description: 'First range departure time',\n  })\n  readonly firstDepTime: string;\n\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @IsDateString()\n  @ApiPropertyOptional({\n    example: '2021-05-18T15:35:00.000Z',\n    description: 'Second range departure time',\n  })\n  readonly secondDepTime?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival',\n  })\n  readonly arrival: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @IsEnum(Class, { each: true })\n  @ArrayNotEmpty()\n  @ApiProperty({\n    example: '[\"business\"]',\n    description: 'Class of section',\n  })\n  readonly class: Class[];\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(1)\n  @Max(9)\n  @ApiProperty({\n    example: '3',\n    description: 'Count of seats',\n  })\n  readonly count: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seat.html":{"url":"classes/Seat.html","title":"class - Seat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/entities/seat.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                number\n                            \n                            \n                                section\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1', description: 'Number of Seat'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Section', description: 'Section'})@Prop({required: true, trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'free', description: 'Status', enum: Status, enumName: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:43\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type SeatDocument = Seat & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  Free = 'free',\n  NotAvailable = 'notAvailable',\n}\n\n@Schema()\nexport class Seat {\n  @ApiProperty({\n    example: 'Section',\n    description: 'Section',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Section',\n  })\n  section: Section;\n\n  @ApiProperty({ example: '1', description: 'Number of Seat' })\n  @Prop({ required: true, trim: true })\n  number: number;\n\n  @ApiProperty({\n    example: 'free',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Free })\n  status: Status;\n}\nexport const SeatSchema = SchemaFactory.createForClass(Seat);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                seats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Seat data'})@ApiOkResponse({description: 'Success', type: Seat})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateSeatDto})@UseGuards(JwtAuthGuard)@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Patch(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Patch, UseGuards } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { Seat } from './entities/seat.entity';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Seats')\n@Controller('seats')\nexport class SeatsController {\n  constructor(private readonly seatsService: SeatsService) {}\n\n  @ApiOperation({ summary: 'Update Seat data' })\n  @ApiOkResponse({ description: 'Success', type: Seat })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateSeatDto })\n  @UseGuards(JwtAuthGuard)\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Patch(':id/update')\n  update(@Param('id') id: ObjectId, @Body() seatDto: UpdateSeatDto) {\n    return this.seatsService.updateSeatData(id, seatDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SeatsModule_exports\n\n\n\n\nSeatsService \n\nSeatsService \n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { Seat, SeatSchema } from './entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SeatsController],\n  providers: [SeatsService],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateSeatData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSeatData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeatData(seatId: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seatId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Seat, SeatDocument } from './entities/seat.entity';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\n\n@Injectable()\nexport class SeatsService {\n  constructor(@InjectModel(Seat.name) private seatModel: Model) {}\n\n  public async updateSeatData(\n    seatId: ObjectId,\n    seatDto: UpdateSeatDto,\n  ): Promise {\n    let seat = await this.seatModel.findById(seatId).exec();\n    if (!seat) {\n      throw new HttpException(\n        'Seat with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    if (seatDto.status) {\n      seat.status = seatDto.status;\n    }\n\n    await seat.save();\n    seat = await this.seatModel.findById(seatId).select({ __v: false }).exec();\n    return seat;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Section.html":{"url":"classes/Section.html","title":"class - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/entities/section.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                price\n                            \n                            \n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'economy', description: 'Class', enum: Class, enumName: 'Class'})@Prop({required: true, trim: true, enum: Class})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1700', description: 'Section Price'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '90', description: 'Seats'})@Prop({trim: true, type: undefined, ref: 'Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type SectionDocument = Section & Document;\n\nexport enum Class {\n  Business = 'business',\n  Economy = 'economy',\n}\n\n@Schema()\nexport class Section {\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  @Prop({ required: true, trim: true })\n  price: number;\n\n  @ApiProperty({\n    example: 'economy',\n    description: 'Class',\n    enum: Class,\n    enumName: 'Class',\n  })\n  @Prop({ required: true, trim: true, enum: Class })\n  class: Class;\n\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Seat',\n  })\n  seats: Seat[];\n}\nexport const SectionSchema = SchemaFactory.createForClass(Section);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SectionsController.html":{"url":"controllers/SectionsController.html","title":"controller - SectionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SectionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sections\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(sectionDto: CreateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Section'})@ApiCreatedResponse({description: 'Created', type: Section})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateSectionDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Section'})@ApiOkResponse({description: 'Success', type: Section})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Sections'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Section data'})@ApiOkResponse({description: 'Success', type: Section})@ApiNotFoundResponse({description: 'Not Found'})@ApiParam({name: 'id', type: 'string'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Section data'})@ApiOkResponse({description: 'Success', type: Section})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiBody({type: UpdateSectionDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section } from './entities/section.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Sections')\n@Controller('sections')\nexport class SectionsController {\n  constructor(private readonly sectionsService: SectionsService) {}\n\n  @ApiOperation({ summary: 'Create a Section' })\n  @ApiCreatedResponse({ description: 'Created', type: Section })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateSectionDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() sectionDto: CreateSectionDto) {\n    return this.sectionsService.createSection(sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Sections' })\n  @ApiOkResponse({ description: 'Success', type: [Section] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.sectionsService.getAllSections();\n  }\n\n  @ApiOperation({ summary: 'Get Section data' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.sectionsService.getSectionById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Section data' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBody({ type: UpdateSectionDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() sectionDto: UpdateSectionDto) {\n    return this.sectionsService.updateSectionData(id, sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Section' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.sectionsService.deleteSection(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SectionsModule.html":{"url":"modules/SectionsModule.html","title":"module - SectionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SectionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\n\nSectionsService \n\nSectionsService \n\n\n\nSectionsModule\n\nSectionsModule\n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sections/sections.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SectionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { SectionsController } from './sections.controller';\nimport { Section, SectionSchema } from './entities/section.entity';\nimport { Seat, SeatSchema } from 'src/seats/entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Section.name, schema: SectionSchema }]),\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SectionsController],\n  providers: [SectionsService],\n  exports: [SectionsService],\n})\nexport class SectionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SectionsService.html":{"url":"injectables/SectionsService.html","title":"injectable - SectionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SectionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createSection\n                            \n                            \n                                    Public\n                                    Async\n                                deleteSection\n                            \n                            \n                                    Public\n                                    Async\n                                getAllSections\n                            \n                            \n                                    Public\n                                    Async\n                                getSectionById\n                            \n                            \n                                    Public\n                                    Async\n                                updateSectionData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sectionModel: Model, seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sections/sections.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSection(sectionDto: CreateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSection(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllSections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllSections()\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getSectionById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionById(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSectionData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSectionData(sectionId: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Section, SectionDocument } from './entities/section.entity';\nimport { Seat, SeatDocument } from 'src/seats/entities/seat.entity';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\n\n@Injectable()\nexport class SectionsService {\n  constructor(\n    @InjectModel(Section.name) private sectionModel: Model,\n    @InjectModel(Seat.name) private seatModel: Model,\n  ) {}\n\n  public async createSection(sectionDto: CreateSectionDto): Promise {\n    try {\n      let section = await this.sectionModel.create({\n        price: sectionDto.price,\n        class: sectionDto.class,\n        seats: [],\n      });\n      for (let i = 1; i  {\n    const sections = await this.sectionModel\n      .find()\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return sections;\n  }\n\n  public async getSectionById(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findById(sectionId)\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n\n  public async updateSectionData(\n    sectionId: ObjectId,\n    sectionDto: UpdateSectionDto,\n  ): Promise {\n    let section = await this.sectionModel.findById(sectionId).exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (sectionDto.class) {\n      section.class = sectionDto.class;\n    }\n    if (sectionDto.price) {\n      section.price = sectionDto.price;\n    }\n\n    await section.save();\n    section = await this.sectionModel\n      .findById(sectionId)\n      .select({ __v: false })\n      .exec();\n    return section;\n  }\n\n  public async deleteSection(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findByIdAndDelete(sectionId)\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ticket.html":{"url":"classes/Ticket.html","title":"class - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/entities/ticket.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthday\n                            \n                            \n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                citizenshipUa\n                            \n                            \n                                document\n                            \n                            \n                                firstName\n                            \n                            \n                                flight\n                            \n                            \n                                lastName\n                            \n                            \n                                numberOfSeat\n                            \n                            \n                                sex\n                            \n                            \n                                status\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                            \n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: 'Ukraine', description: 'The English name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: 'Украина', description: 'The Russian name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'RS123456', description: 'Document'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:102\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Dmitry', description: 'First Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight'})@Prop({required: true, type: undefined, ref: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Efremov', description: 'Last Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Number Of Seat'})@Prop({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:122\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'male', description: 'Sex', enum: Sex, enumName: 'Sex'})@Prop({required: true, trim: true, enum: Sex})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'booked', description: 'Status', enum: Status, enumName: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'adult', description: 'Type', enum: Type, enumName: 'Type'})@Prop({required: true, trim: true, enum: Type})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'User'})@Prop({required: true, type: undefined, ref: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:106\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { User } from 'src/users/entities/users.entity';\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type TicketDocument = Ticket & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  NotAvailable = 'notAvailable',\n}\n\nexport enum Sex {\n  Male = 'male',\n  Female = 'female',\n}\n\nexport enum Type {\n  Adult = 'adult',\n  Child = 'child',\n  Baby = 'baby',\n  Disabled = 'disabled',\n}\n\n@Schema()\nexport class Ticket {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Flight',\n  })\n  flight: Flight;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n  })\n  user: User;\n\n  @ApiProperty({\n    example: 'male',\n    description: 'Sex',\n    enum: Sex,\n    enumName: 'Sex',\n  })\n  @Prop({ required: true, trim: true, enum: Sex })\n  sex: Sex;\n\n  @ApiProperty({\n    example: 'adult',\n    description: 'Type',\n    enum: Type,\n    enumName: 'Type',\n  })\n  @Prop({ required: true, trim: true, enum: Type })\n  type: Type;\n\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  @Prop({ required: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  @Prop({ required: true })\n  lastName: string;\n\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  @Prop({ required: true })\n  birthday: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  @Prop({ required: true, trim: true })\n  citizenshipUa: string;\n\n  @ApiPropertyOptional({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipEng?: string;\n\n  @ApiPropertyOptional({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipRu?: string;\n\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  @Prop({ required: true, trim: true })\n  document: string;\n\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  @Prop({ required: true })\n  validity: string;\n\n  @ApiProperty({\n    example: 'booked',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Booked })\n  status: Status;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  @Prop({ default: null })\n  numberOfSeat: Seat | null;\n}\nexport const TicketSchema = SchemaFactory.createForClass(Ticket);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                findAll\n                            \n                            \n                                return\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(ticketDto: CreateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reserve a Ticket'})@ApiCreatedResponse({description: 'Created', type: Ticket})@ApiBody({type: CreateTicketDto})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Post('reserve')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(req: any, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Ticket data'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Tickets'})@ApiOkResponse({description: 'Success', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            return\n                        \n                        \n                    \n                \n            \n            \n                \nreturn(req: any, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Return Ticket'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(req: any, id: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Ticket data'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateTicketDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { TicketsService } from './tickets.service';\nimport { Ticket } from './entities/ticket.entity';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Tickets')\n@Controller('tickets')\nexport class TicketsController {\n  constructor(private readonly ticketsService: TicketsService) {}\n\n  @ApiOperation({ summary: 'Reserve a Ticket' })\n  @ApiCreatedResponse({ description: 'Created', type: Ticket })\n  @ApiBody({ type: CreateTicketDto })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('reserve')\n  create(@Body() ticketDto: CreateTicketDto) {\n    return this.ticketsService.createTicket(ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Tickets' })\n  @ApiOkResponse({ description: 'Success', type: [Ticket] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.ticketsService.getAllTickets();\n  }\n\n  @ApiOperation({ summary: 'Get Ticket data' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  find(@Request() req: any, @Param('id') id: ObjectId) {\n    return this.ticketsService.getTicketById(req.user._id, id);\n  }\n\n  @ApiOperation({ summary: 'Update Ticket data' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateTicketDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(\n    @Request() req: any,\n    @Param('id') id: ObjectId,\n    @Body() ticketDto: UpdateTicketDto,\n  ) {\n    return this.ticketsService.updateTicketData(req.user._id, id, ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Return Ticket' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  return(@Request() req: any, @Param('id') id: ObjectId) {\n    return this.ticketsService.returnTicket(req.user._id, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_imports\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tickets/tickets.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { TicketsService } from './tickets.service';\nimport { TicketsController } from './tickets.controller';\nimport { AirplanesModule } from 'src/airplanes/airplanes.module';\nimport { AirportsModule } from 'src/airports/airports.module';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { User, UserSchema } from 'src/users/entities/users.entity';\nimport { Flight, FlightSchema } from 'src/flights/entities/flights.entity';\nimport { Ticket, TicketSchema } from './entities/ticket.entity';\nimport {\n  Airplane,\n  AirplaneSchema,\n} from 'src/airplanes/entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Ticket.name, schema: TicketSchema },\n      { name: Flight.name, schema: FlightSchema },\n      { name: Airplane.name, schema: AirplaneSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n    UsersModule,\n    AirportsModule,\n    FlightsModule,\n    AirplanesModule,\n  ],\n  controllers: [TicketsController],\n  providers: [TicketsService],\n  exports: [TicketsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTicket\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTickets\n                            \n                            \n                                    Public\n                                    Async\n                                getTicketById\n                            \n                            \n                                    Public\n                                    Async\n                                returnTicket\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicketData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketModel: Model, flightModel: Model, airplaneModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/tickets.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTicket(ticketDto: CreateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllTickets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTickets()\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getTicketById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTicketById(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            returnTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnTicket(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateTicketData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTicketData(userId: ObjectId, ticketId: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Status, Ticket, TicketDocument } from './entities/ticket.entity';\nimport { Flight, FlightDocument } from 'src/flights/entities/flights.entity';\nimport { User, UserDocument } from 'src/users/entities/users.entity';\nimport {\n  Airplane,\n  AirplaneDocument,\n} from 'src/airplanes/entities/airplane.entity';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\n\n@Injectable()\nexport class TicketsService {\n  constructor(\n    @InjectModel(Ticket.name) private ticketModel: Model,\n    @InjectModel(Flight.name) private flightModel: Model,\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  public async createTicket(ticketDto: CreateTicketDto): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const user = await this.userModel\n      .findById(ticketDto.user)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const ticket = await this.ticketModel.create({ ...ticketDto });\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    user.tickets.push(ticket._id);\n    await user.save();\n    airplane.amountOfSeat -= 1;\n    await airplane.save();\n    return ticket;\n  }\n\n  public async getAllTickets(): Promise {\n    const tickets = await this.ticketModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    return tickets;\n  }\n\n  public async getTicketById(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    const ticket = await this.ticketModel\n      .findById(ticketId)\n      // .findOne({ user: userId })\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    if (!ticket) {\n      throw new HttpException(\n        'Ticket with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return ticket;\n  }\n\n  public async updateTicketData(\n    userId: ObjectId,\n    ticketId: ObjectId,\n    ticketDto: UpdateTicketDto,\n  ): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    return ticket;\n  }\n\n  public async returnTicket(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    const flight = await this.flightModel.findById(ticket.flight).exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    ticket.status = Status.Returned;\n    await ticket.save();\n    airplane.amountOfSeat += 1;\n    await airplane.save();\n    return ticket;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirlineDto.html":{"url":"classes/UpdateAirlineDto.html","title":"class - UpdateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/update-airline.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirlineDto } from './create-airline.dto';\n\nexport class UpdateAirlineDto extends PartialType(CreateAirlineDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirplaneDto.html":{"url":"classes/UpdateAirplaneDto.html","title":"class - UpdateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/update-airplane.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirplaneDto } from './create-airplane.dto';\n\nexport class UpdateAirplaneDto extends PartialType(CreateAirplaneDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirportDto.html":{"url":"classes/UpdateAirportDto.html","title":"class - UpdateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/update-airport.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirportDto } from './create-airport.dto';\n\nexport class UpdateAirportDto extends PartialType(CreateAirportDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/update-flight.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class UpdateFlightDto extends PartialType(CreateFlightDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/update-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'Booked', description: 'Class', enum: Status, enumName: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/update-seat.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class UpdateSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({\n    example: 'Booked',\n    description: 'Class',\n    enum: Status,\n    enumName: 'Status',\n  })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSectionDto.html":{"url":"classes/UpdateSectionDto.html","title":"class - UpdateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/update-section.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateSectionDto } from './create-section.dto';\n\nexport class UpdateSectionDto extends PartialType(CreateSectionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/update-ticket.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateTicketDto } from './create-ticket.dto';\n\nexport class UpdateTicketDto extends PartialType(CreateTicketDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDataDto.html":{"url":"classes/UpdateUserDataDto.html","title":"class - UpdateUserDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-data.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDataDto extends PartialType(\n  OmitType(CreateUserDto, ['password'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                role\n                            \n                            \n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'E-mail'})@Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Іван', description: 'First name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Шевченко', description: 'Last name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'A1b2@c3d!', description: 'Password'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '380951234567', description: 'Phone number'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user', description: 'Role', enum: Role, enumName: 'Role'})@Prop({required: true, trim: true, enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Ticket[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'tickets', description: 'Tickets'})@Prop({trim: true, type: undefined, ref: 'Ticket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:58\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Ticket } from 'src/tickets/entities/ticket.entity';\n\nexport type UserDocument = User & Document;\n\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n\n@Schema()\nexport class User {\n  @ApiProperty({ example: 'Іван', description: 'First name' })\n  @Prop({ required: true, trim: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Шевченко', description: 'Last name' })\n  @Prop({ required: true, trim: true })\n  lastName: string;\n\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  @Prop({ required: true })\n  phoneNumber: number;\n\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  @Prop({ required: true })\n  password: string;\n\n  @ApiProperty({\n    example: 'test@gmail.com',\n    description: 'E-mail',\n  })\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'Role',\n    enum: Role,\n    enumName: 'Role',\n  })\n  @Prop({ required: true, trim: true, enum: Role, default: Role.User })\n  role: Role;\n\n  @ApiProperty({\n    example: 'tickets',\n    description: 'Tickets',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Ticket',\n  })\n  tickets: Ticket[];\n}\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \nchangePassword(req: any, userDto: ChangeUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Change User password'})@ApiOkResponse({description: 'Success', type: User})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: ChangeUserPasswordDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch('/changepassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete User'})@ApiOkResponse({description: 'Success', type: User})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Delete('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Users'})@ApiOkResponse({description: 'Success', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get User data'})@ApiOkResponse({description: 'Success', type: User})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateData\n                        \n                        \n                    \n                \n            \n            \n                \nupdateData(req: any, userDto: UpdateUserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update User data'})@ApiOkResponse({description: 'Success', type: User})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateUserDataDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch('/update')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { UsersService } from './users.service';\nimport { User } from './entities/users.entity';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOperation({ summary: 'Get data all Users' })\n  @ApiOkResponse({ description: 'Success', type: [User] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @ApiOperation({ summary: 'Get User data' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.usersService.getUserById(id);\n  }\n\n  @ApiOperation({ summary: 'Update User data' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateUserDataDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('/update')\n  updateData(@Request() req: any, @Body() userDto: UpdateUserDataDto) {\n    return this.usersService.updateUserData(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Change User password' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: ChangeUserPasswordDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('/changepassword')\n  changePassword(@Request() req: any, @Body() userDto: ChangeUserPasswordDto) {\n    return this.usersService.changeUserPassword(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Delete User' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('')\n  delete(@Request() req: any) {\n    return this.usersService.deleteUser(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { User, UserSchema } from './entities/users.entity';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getUserById\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(userId: ObjectId, userDto: ChangeUserPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUserData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserData(userId: ObjectId, userDto: UpdateUserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User, UserDocument } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  public async createUser(userDto: CreateUserDto): Promise {\n    try {\n      let user = await this.userModel.create({ ...userDto });\n      user = await this.userModel\n        .findOne({ email: userDto.email })\n        .select({ password: false, __v: false })\n        .exec();\n      return user;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllUsers(): Promise {\n    const users = await this.userModel\n      .find()\n      .select({ password: false, __v: false })\n      .exec();\n    return users;\n  }\n\n  public async getUserById(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async updateUserData(\n    userId: ObjectId,\n    userDto: UpdateUserDataDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (userDto.email) {\n      user.email = userDto.email;\n    }\n    if (userDto.firstName) {\n      user.firstName = userDto.firstName;\n    }\n    if (userDto.lastName) {\n      user.lastName = userDto.lastName;\n    }\n    if (userDto.phoneNumber) {\n      user.phoneNumber = userDto.phoneNumber;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async changeUserPassword(\n    userId: ObjectId,\n    userDto: ChangeUserPasswordDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const passwordEquals = await bcrypt.compare(\n      userDto.oldPassword,\n      user.password,\n    );\n    const newPasswordEquals = await bcrypt.compare(\n      userDto.newPassword,\n      user.password,\n    );\n\n    if (!passwordEquals) {\n      throw new HttpException('Password mismatch', HttpStatus.BAD_REQUEST);\n    } else if (newPasswordEquals) {\n      throw new HttpException(\n        'New and old passwords must not match',\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const salt = await bcrypt.genSalt();\n      const hashPassword = await bcrypt.hash(userDto.newPassword, salt);\n      user.password = hashPassword;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async deleteUser(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findByIdAndDelete(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async getUserByEmail(email: string): Promise {\n    const user = await this.userModel.findOne({ email: email }).exec();\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/airlines/airlines.controller.ts\n            \n            controller\n            AirlinesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airlines/airlines.service.ts\n            \n            injectable\n            AirlinesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/create-airline.dto.ts\n            \n            class\n            CreateAirlineDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/dto/update-airline.dto.ts\n            \n            class\n            UpdateAirlineDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            class\n            Airline\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            variable\n            AirlineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.controller.ts\n            \n            controller\n            AirplanesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.service.ts\n            \n            injectable\n            AirplanesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airplanes/dto/create-airplane.dto.ts\n            \n            class\n            CreateAirplaneDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/dto/update-airplane.dto.ts\n            \n            class\n            UpdateAirplaneDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            class\n            Airplane\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            variable\n            AirplaneSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/airports.controller.ts\n            \n            controller\n            AirportsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airports/airports.service.ts\n            \n            injectable\n            AirportsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airports/dto/create-airport.dto.ts\n            \n            class\n            CreateAirportDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/dto/update-airport.dto.ts\n            \n            class\n            UpdateAirportDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            class\n            Airport\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            variable\n            AirportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            variable\n            cookieExtractor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/flights/dto/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/dto/search-flight.dto.ts\n            \n            class\n            SearchFlightDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/dto/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            class\n            Flight\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            variable\n            FlightSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            variable\n            SeatSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sections/dto/create-section.dto.ts\n            \n            class\n            CreateSectionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/dto/update-section.dto.ts\n            \n            class\n            UpdateSectionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            class\n            Section\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            variable\n            SectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/sections.controller.ts\n            \n            controller\n            SectionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sections/sections.service.ts\n            \n            injectable\n            SectionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tickets/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            class\n            Ticket\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            variable\n            TicketSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/change-user-password.dto.ts\n            \n            class\n            ChangeUserPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-data.dto.ts\n            \n            class\n            UpdateUserDataDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            - : 0.0.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/throttler : ^1.1.4\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/multer : ^1.4.5\n        \n            bcrypt : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            cache-manager : ^3.4.3\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.5\n        \n            cross-env : ^7.0.3\n        \n            csurf : ^1.11.0\n        \n            fuse.js : ^6.4.6\n        \n            helmet : ^4.6.0\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.12.9\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Class   (src/.../section.entity.ts)\n                        \n                        \n                            Folder   (src/.../files.service.ts)\n                        \n                        \n                            Role   (src/.../users.entity.ts)\n                        \n                        \n                            Sex   (src/.../ticket.entity.ts)\n                        \n                        \n                            Status   (src/.../seat.entity.ts)\n                        \n                        \n                            Status   (src/.../ticket.entity.ts)\n                        \n                        \n                            Type   (src/.../ticket.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/sections/entities/section.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Class\n                    \n                \n                        \n                            \n                                 Business\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 Economy\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/files/files.service.ts\n    \n        \n            \n                \n                    \n                        \n                        Folder\n                    \n                \n                        \n                            \n                                 Airline\n                            \n                        \n                        \n                            \n                                Value : airline\n                            \n                        \n            \n        \n\n    src/users/entities/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Type\n                    \n                \n                        \n                            \n                                 Adult\n                            \n                        \n                        \n                            \n                                Value : adult\n                            \n                        \n                        \n                            \n                                 Child\n                            \n                        \n                        \n                            \n                                Value : child\n                            \n                        \n                        \n                            \n                                 Baby\n                            \n                        \n                        \n                            \n                                Value : baby\n                            \n                        \n                        \n                            \n                                 Disabled\n                            \n                        \n                        \n                            \n                                Value : disabled\n                            \n                        \n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 Free\n                            \n                        \n                        \n                            \n                                Value : free\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AirlinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirplanesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SectionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_exports\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nSectionsService \n\nSectionsService \n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineDocument   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneDocument   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportDocument   (src/.../airport.entity.ts)\n                        \n                        \n                            FlightDocument   (src/.../flights.entity.ts)\n                        \n                        \n                            SeatDocument   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionDocument   (src/.../section.entity.ts)\n                        \n                        \n                            TicketDocument   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirlineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airplanes/entities/airplane.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirplaneDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airports/entities/airport.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirportDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/flights/entities/flights.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FlightDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/seats/entities/seat.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SeatDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/sections/entities/section.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tickets/entities/ticket.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TicketDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/entities/users.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineSchema   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneSchema   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportSchema   (src/.../airport.entity.ts)\n                        \n                        \n                            cookieExtractor   (src/.../jwt.strategy.ts)\n                        \n                        \n                            FlightSchema   (src/.../flights.entity.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            Roles   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            SeatSchema   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionSchema   (src/.../section.entity.ts)\n                        \n                        \n                            TicketSchema   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirlineSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airline)\n                        \n                    \n\n\n            \n        \n\n    src/airplanes/entities/airplane.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirplaneSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airplane)\n                        \n                    \n\n\n            \n        \n\n    src/airports/entities/airport.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airport)\n                        \n                    \n\n\n            \n        \n\n    src/auth/strategies/jwt.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cookieExtractor\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (req: any) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n                        \n                    \n\n\n            \n        \n\n    src/flights/entities/flights.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FlightSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Flight)\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles-auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...role: string[]) => SetMetadata(ROLES_KEY, role)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'role'\n                        \n                    \n\n\n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SeatSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Seat)\n                        \n                    \n\n\n            \n        \n\n    src/sections/entities/section.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Section)\n                        \n                    \n\n\n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TicketSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Ticket)\n                        \n                    \n\n\n            \n        \n\n    src/users/entities/users.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
