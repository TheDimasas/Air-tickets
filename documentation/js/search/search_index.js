var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Airline.html",[0,0.2,1,1.729]],["body/classes/Airline.html",[0,0.153,1,3.281,2,0.742,3,0.107,4,0.095,5,0.095,6,2.176,7,0.361,8,1.592,9,1.473,10,4.629,11,4.629,12,4.169,13,4.629,14,4.629,15,4.629,16,5.144,17,0.871,18,0.015,19,1.998,20,1.664,21,3.58,22,3.216,23,3.648,24,4.226,25,3.671,26,1.854,27,3.671,28,0.896,29,4.478,30,3.213,31,4.131,32,1.009,33,3.03,34,3.671,35,3.03,36,5.113,37,4.478,38,3.923,39,3.03,40,3.892,41,3.892,42,3.859,43,5.711,44,3.892,45,4.478,46,3.03,47,3.03,48,3.03,49,3.03,50,3.03,51,0.209,52,3.874,53,1.724,54,1.682,55,0.798,56,2.482,57,0.528,58,2.358,59,0.798,60,0.188,61,2.372,62,2.418,63,2.957,64,0.892,65,2.176,66,2.633,67,0.005,68,0.008,69,0.005]],["title/controllers/AirlinesController.html",[70,1.256,71,2.846]],["body/controllers/AirlinesController.html",[0,0.145,1,3.211,3,0.101,4,0.09,5,0.09,7,0.342,9,1.209,16,4.484,17,0.981,18,0.015,19,1.359,20,1.502,25,2.683,26,1.8,28,0.91,32,0.91,51,0.276,57,0.5,59,0.756,60,0.101,67,0.005,68,0.007,69,0.005,70,0.91,71,3.089,72,0.91,73,2.494,74,1.511,75,1.265,76,2.461,77,3.603,78,3.364,79,2.054,80,3.18,81,2.87,82,3.828,83,5.158,84,3.074,85,2.87,86,2.525,87,2.87,88,3.017,89,2.868,90,2.863,91,2.525,92,2.87,93,2.87,94,1.686,95,5.598,96,1.806,97,1.914,98,2.646,99,2.87,100,3.617,101,5.158,102,2.832,103,2.868,104,1.593,105,2.061,106,2.87,107,3.18,108,2.87,109,1.914,110,2.87,111,1.791,112,2.87,113,2.87,114,2.494,115,2.87,116,1.791,117,4.091,118,1.593,119,2.246,120,2.87,121,2.87,122,2.525,123,2.584,124,1.593,125,1.593,126,4.301,127,2.87,128,0.481,129,2.87,130,2.494,131,2.246,132,2.716,133,2.716,134,2.87,135,2.525,136,2.87,137,3.18,138,3.231,139,3.227,140,3.364,141,1.438,142,2.87,143,3.218,144,2.494,145,2.246,146,1.253,147,3.366,148,1.105,149,1.511,150,1.511,151,1.593,152,2.87,153,2.87,154,1.309,155,1.021,156,3.074,157,2.154,158,2.584,159,2.716,160,3.029,161,2.87,162,1.616,163,2.87,164,2.87,165,1.986,166,1.685,167,1.791,168,2.87,169,1.791,170,1.791,171,2.87,172,1.791,173,1.914,174,2.87]],["title/modules/AirlinesModule.html",[175,1.083,176,2.642]],["body/modules/AirlinesModule.html",[0,0.249,1,2.155,3,0.174,4,0.155,5,0.155,18,0.014,28,0.673,51,0.3,53,1.9,55,1.3,60,0.174,65,4.501,67,0.009,68,0.011,69,0.009,71,4.945,72,1.987,128,0.827,143,5.041,144,4.29,145,3.864,175,1.881,176,5.286,177,2.064,178,2.064,179,2.252,180,2.252,181,2.064,182,3.141,183,3.141,184,4.29,185,4.29,186,4.29,187,4.29,188,4.765,189,2.859,190,2.252,191,2.155,192,4.937,193,3.139,194,2.6,195,4.937,196,4.937,197,2.74,198,4.937]],["title/injectables/AirlinesService.html",[143,2.472,199,0.836]],["body/injectables/AirlinesService.html",[0,0.145,1,3.406,3,0.101,4,0.09,5,0.09,7,0.343,9,1.297,12,3.373,16,4.808,17,0.766,18,0.015,25,2.689,28,0.879,32,0.957,51,0.262,55,0.758,59,0.758,60,0.101,61,2.252,64,1.688,67,0.005,68,0.007,69,0.005,75,1.268,79,2.058,82,3.579,94,1.808,95,5.604,96,1.808,98,2.648,102,1.989,117,3.825,128,0.482,143,2.689,145,2.252,146,1.256,147,3.373,148,1.108,162,1.618,165,1.989,199,0.91,200,1.108,201,2.501,202,4.206,203,2.917,204,5.167,205,4.31,206,4.31,207,5.737,208,5.167,209,1.966,210,2.878,211,3.184,212,4.171,213,2.878,214,4.31,215,2.878,216,2.878,217,3.266,218,4.31,219,2.878,220,5.737,221,4.31,222,2.878,223,2.878,224,2.878,225,2.878,226,2.934,227,1.374,228,1.597,229,2.252,230,2.878,231,2.878,232,2.058,233,3.266,234,6.449,235,5.737,236,3.579,237,2.681,238,2.463,239,2.067,240,2.067,241,2.689,242,1.597,243,3.745,244,2.878,245,2.878,246,3.607,247,3.41,248,3.077,249,1.69,250,1.919,251,1.919,252,1.597,253,4.31,254,2.868,255,2.878,256,4.31,257,2.878,258,4.31,259,2.878,260,2.878,261,4.31,262,2.878,263,4.31,264,2.878,265,4.31,266,2.878,267,2.878,268,2.878]],["title/classes/Airplane.html",[0,0.2,269,1.808]],["body/classes/Airplane.html",[0,0.22,2,1.069,3,0.154,4,0.137,5,0.137,7,0.52,8,2.058,17,0.94,18,0.014,19,1.524,20,1.589,21,3.418,26,1.743,28,0.595,30,3.137,31,3.603,32,0.963,38,3.859,51,0.282,52,3.836,53,2.228,54,2.424,55,1.15,56,2.458,57,0.761,58,3.047,59,1.71,60,0.229,62,2.308,63,3.212,64,1.285,67,0.008,68,0.01,69,0.008,269,3.28,270,3.136,271,5.641,272,5.08,273,4.339,274,4.157,275,4.157,276,4.157,277,2.912,278,4.367,279,2.64,280,5.029,281,5.029,282,3.795,283,4.367,284,3.434,285,4.367,286,2.725,287,3.611,288,4.367,289,3.136,290,3.136,291,1.906,292,2.725,293,2.912,294,3.795]],["title/controllers/AirplanesController.html",[70,1.256,295,2.846]],["body/controllers/AirplanesController.html",[0,0.149,3,0.104,4,0.092,5,0.092,7,0.352,9,1.227,17,0.985,18,0.015,19,1.382,20,1.52,26,1.808,28,0.919,32,0.922,51,0.272,57,0.515,59,0.778,60,0.104,67,0.005,68,0.008,69,0.005,70,0.937,72,0.937,74,1.555,75,1.293,76,2.33,77,3.648,78,3.412,79,2.099,80,3.226,84,3.111,86,2.58,88,2.314,89,1.97,90,2.913,91,2.58,94,1.71,96,1.828,97,1.97,98,2.665,100,3.648,102,2.85,103,3.499,104,1.64,105,2.122,107,3.226,109,1.97,111,1.843,116,1.843,118,2.439,119,2.312,122,2.58,123,2.201,124,1.64,125,1.64,128,0.495,132,2.763,133,2.763,134,2.911,135,2.58,136,2.911,137,3.226,138,3.271,139,3.261,140,3.412,141,1.48,142,2.911,146,1.289,148,1.137,149,1.555,150,1.555,151,1.64,154,1.348,155,1.05,156,3.111,157,1.48,158,2.628,159,2.763,160,3.081,162,1.636,165,2.02,166,1.735,167,1.843,169,1.843,170,1.843,172,1.843,173,1.97,269,3.377,295,3.156,296,2.567,297,3.819,298,2.954,299,3.876,300,2.954,301,2.954,302,2.567,303,2.954,304,2.954,305,5.658,306,2.954,307,5.248,308,2.954,309,2.954,310,2.954,311,2.312,312,2.954,313,4.142,314,2.954,315,2.954,316,3.274,317,2.567,318,2.312,319,3.44,320,2.954,321,2.954,322,2.567,323,1.97,324,2.954,325,2.954,326,2.954,327,2.954,328,2.954]],["title/modules/AirplanesModule.html",[175,1.083,329,2.472]],["body/modules/AirplanesModule.html",[0,0.256,3,0.179,4,0.159,5,0.159,18,0.014,28,0.694,51,0.296,53,1.96,55,1.341,60,0.179,67,0.009,68,0.011,69,0.009,72,2.026,128,0.853,175,1.908,177,2.129,178,2.129,179,2.322,180,2.322,181,2.129,182,3.185,183,3.185,189,2.915,190,2.322,191,2.222,193,2.55,194,2.681,197,2.826,269,2.322,293,4.26,295,5.015,316,5.062,317,4.424,318,3.985,329,4.874,330,4.424,331,4.424,332,4.424,333,5.091,334,5.091,335,4.424]],["title/injectables/AirplanesService.html",[199,0.836,316,2.472]],["body/injectables/AirplanesService.html",[0,0.154,3,0.108,4,0.096,5,0.096,7,0.365,9,1.331,17,0.787,18,0.015,28,0.86,32,0.979,51,0.259,55,0.807,59,0.807,60,0.108,64,1.578,67,0.005,68,0.008,69,0.005,75,1.329,94,1.856,96,1.856,98,2.689,102,2.064,128,0.514,146,1.338,148,1.18,162,1.662,165,2.064,199,0.953,200,1.18,202,4.251,203,2.948,209,2.06,211,3.284,217,3.316,226,2.561,227,1.464,228,1.701,232,1.464,233,3.194,236,3.502,237,2.582,238,2.373,241,1.912,242,1.701,246,4.269,247,4.035,248,3.16,249,1.8,250,2.044,251,2.044,252,1.701,254,2.507,269,3.517,273,3.704,290,2.202,297,3.925,299,3.692,305,5.735,313,3.945,316,2.818,318,2.399,319,3.535,336,2.664,337,5.363,338,4.516,339,4.516,340,5.917,341,5.363,342,3.065,343,3.065,344,3.925,345,3.065,346,3.065,347,4.516,348,3.065,349,5.917,350,4.516,351,3.065,352,3.065,353,3.065,354,3.065,355,2.664,356,2.664,357,3.065,358,5.482,359,3.065,360,4.531,361,4.206,362,4.516,363,3.065,364,3.065,365,4.516,366,3.065,367,2.664,368,3.065]],["title/classes/Airport.html",[0,0.2,369,2.086]],["body/classes/Airport.html",[0,0.148,2,0.717,3,0.103,4,0.092,5,0.092,7,0.349,8,1.553,9,1.56,17,0.91,18,0.014,19,2.061,20,1.76,21,3.786,23,2.424,26,1.845,27,4.05,28,1.036,30,3.264,31,4.249,32,1.067,34,4.05,38,4.328,51,0.205,52,4.051,53,1.681,54,1.626,55,0.772,56,2.595,57,0.511,58,2.3,59,0.772,60,0.184,62,2.557,63,3.213,64,0.862,67,0.005,68,0.008,69,0.005,277,1.953,369,4.079,370,2.104,371,4.538,372,4.538,373,4.538,374,4.538,375,4.538,376,4.538,377,4.538,378,4.538,379,4.538,380,4.53,381,5.641,382,4.367,383,2.93,384,2.93,385,4.662,386,2.546,387,2.93,388,3.795,389,4.367,390,2.93,391,2.93,392,2.93,393,3.795,394,4.367,395,2.93,396,2.93,397,2.93,398,2.93,399,3.795,400,2.93,401,2.93,402,2.293,403,4.538,404,2.104,405,2.546]],["title/controllers/AirportsController.html",[70,1.256,406,2.846]],["body/controllers/AirportsController.html",[0,0.148,3,0.104,4,0.092,5,0.092,7,0.351,9,1.225,17,0.984,18,0.015,19,1.38,20,1.519,26,1.807,28,0.918,32,0.921,51,0.272,57,0.514,59,0.776,60,0.104,67,0.005,68,0.008,69,0.005,70,0.934,72,0.934,74,1.551,75,1.29,76,2.327,77,3.643,78,3.408,79,2.094,80,3.221,84,3.108,86,2.575,88,3.056,89,1.964,90,2.908,91,2.575,94,1.708,96,1.826,97,1.964,98,2.663,100,3.645,102,2.848,103,2.924,104,2.434,105,2.116,107,3.221,109,1.964,111,1.838,116,1.838,118,2.434,122,2.575,123,2.197,124,1.635,125,1.635,128,0.494,132,2.759,133,2.759,134,2.907,135,2.575,136,2.907,137,3.221,138,3.267,139,3.258,140,3.408,141,1.476,142,2.907,146,1.286,148,1.134,149,1.551,150,1.551,151,1.635,154,1.344,155,1.048,156,3.108,157,2.197,158,2.624,159,2.759,160,3.076,162,1.634,165,2.017,166,1.73,167,1.838,169,1.838,170,1.838,172,1.838,173,1.964,311,2.306,323,1.964,369,3.896,406,3.15,407,2.56,408,3.811,409,2.946,410,3.871,411,2.946,412,2.946,413,2.946,414,2.946,415,5.652,416,2.946,417,5.239,418,2.946,419,2.946,420,2.946,421,2.946,422,4.137,423,2.306,424,1.838,425,2.946,426,2.946,427,3.268,428,2.56,429,2.306,430,3.432,431,2.946,432,2.946,433,2.946,434,2.946,435,2.946,436,2.946,437,2.946]],["title/modules/AirportsModule.html",[175,1.083,438,2.472]],["body/modules/AirportsModule.html",[0,0.258,3,0.18,4,0.16,5,0.16,18,0.014,28,0.697,51,0.297,53,1.969,55,1.348,60,0.18,67,0.009,68,0.011,69,0.009,72,2.032,128,0.857,175,1.913,177,2.139,178,2.139,179,2.334,180,2.334,181,2.139,182,3.192,183,3.192,189,2.923,190,2.334,191,2.233,193,2.562,194,2.694,197,2.84,369,2.694,404,4.603,406,5.026,427,5.065,428,4.446,429,4.004,438,4.879,439,4.446,440,4.446,441,4.446,442,5.116,443,5.116,444,5.116]],["title/injectables/AirportsService.html",[199,0.836,427,2.472]],["body/injectables/AirportsService.html",[0,0.145,3,0.102,4,0.09,5,0.09,7,0.344,9,1.298,17,0.767,18,0.015,28,0.838,32,0.958,51,0.253,55,0.76,59,0.76,60,0.102,64,1.523,67,0.005,68,0.008,69,0.005,75,1.271,79,2.062,94,1.81,96,1.81,98,2.65,102,1.992,128,0.484,146,1.259,148,1.111,162,1.62,165,1.992,199,0.911,200,1.111,202,4.208,203,2.918,209,1.97,211,3.189,217,3.268,226,2.937,227,1.378,228,1.602,232,1.378,233,3.209,236,3.583,237,2.684,238,2.466,239,2.073,240,2.073,241,2.694,242,1.602,246,3.612,247,3.414,248,3.081,249,1.694,250,1.924,251,1.924,252,1.602,254,2.872,369,4.111,380,4.05,402,2.259,408,3.753,410,3.584,415,5.345,422,3.83,427,2.694,429,2.259,430,3.38,445,2.508,446,4.319,447,4.319,448,4.319,449,5.745,450,5.175,451,2.886,452,2.886,453,4.319,454,4.319,455,2.886,456,4.319,457,2.886,458,5.745,459,4.319,460,2.886,461,2.886,462,2.886,463,2.886,464,2.886,465,6.455,466,5.745,467,2.886,468,4.319,469,2.886,470,2.886,471,4.319,472,2.886,473,4.319,474,2.886,475,4.319,476,2.886,477,4.319,478,2.886,479,4.319,480,2.886,481,4.319,482,2.886,483,4.319,484,2.886,485,4.319,486,2.886,487,4.319,488,2.886,489,2.886,490,2.886]],["title/controllers/AppController.html",[70,1.256,491,2.846]],["body/controllers/AppController.html",[0,0.246,3,0.172,4,0.153,5,0.153,7,0.583,9,1.032,17,0.855,18,0.014,20,1.197,26,1.617,28,0.667,32,0.726,51,0.293,57,0.853,60,0.172,67,0.009,68,0.011,69,0.009,70,1.975,72,1.551,75,1.833,84,2.45,94,1.439,96,1.439,100,3.28,128,0.82,134,3.12,136,3.12,138,3.28,139,3.12,141,2.45,142,3.12,154,2.231,156,2.45,157,2.45,158,2.45,159,2.576,162,1.288,203,2.639,491,4.474,492,4.25,493,5.414,494,4.891,495,4.891,496,4.891,497,4.891,498,4.891,499,4.891,500,3.658,501,3.261,502,3.805,503,4.891,504,2.131,505,4.891,506,2.715,507,4.891,508,3.261,509,4.891,510,4.891,511,3.261,512,4.891,513,4.891,514,4.891]],["title/modules/AppModule.html",[175,1.083,515,2.846]],["body/modules/AppModule.html",[0,0.17,3,0.119,4,0.106,5,0.106,18,0.015,30,2.482,51,0.31,55,0.888,60,0.119,67,0.006,68,0.008,69,0.006,72,1.535,128,0.565,175,1.548,176,4.549,177,1.41,178,1.41,179,1.538,180,1.538,181,1.41,182,2.584,183,1.538,188,4.256,189,2.209,190,1.538,191,1.472,193,3.283,194,1.776,203,1.864,248,1.689,329,4.256,438,4.256,491,4.068,515,5.815,516,2.931,517,2.931,518,2.931,519,4.256,520,4.256,521,4.549,522,4.549,523,4.549,524,4.006,525,4.549,526,3.373,527,4.842,528,3.373,529,5.378,530,5.73,531,2.422,532,4.842,533,3.373,534,2.931,535,5.664,536,4.842,537,2.64,538,3.373,539,3.373,540,2.931,541,3.373,542,3.373,543,3.373,544,3.373,545,3.373,546,3.373,547,3.373,548,3.373,549,3.373,550,3.477,551,3.373,552,2.931,553,2.931,554,2.931,555,2.931,556,3.373,557,4.922,558,4.842,559,3.373,560,4.922,561,3.373,562,3.373,563,3.373,564,3.373,565,3.373,566,3.373,567,3.373,568,3.373,569,3.373,570,3.373,571,3.373,572,3.373,573,5.664,574,5.664]],["title/injectables/AppService.html",[199,0.836,525,2.642]],["body/injectables/AppService.html",[0,0.311,3,0.218,4,0.193,5,0.193,18,0.014,51,0.242,60,0.218,67,0.011,68,0.012,69,0.011,128,1.035,199,1.515,200,2.377,525,4.787,575,5.366]],["title/controllers/AuthController.html",[70,1.256,576,2.846]],["body/controllers/AuthController.html",[0,0.174,3,0.122,4,0.108,5,0.108,7,0.412,9,1.213,17,0.919,18,0.015,20,1.406,26,1.623,28,0.783,30,2.759,32,0.852,51,0.289,57,0.603,60,0.122,64,1.018,67,0.006,68,0.009,69,0.006,70,1.097,72,1.097,74,1.822,75,1.451,84,2.878,86,3.887,88,3.298,94,1.691,96,1.691,122,2.032,123,1.733,128,0.58,131,2.709,132,3.025,133,3.025,134,2.47,135,3.677,136,1.733,139,3.137,141,1.733,142,2.47,154,1.579,156,2.878,157,2.878,158,1.733,162,1.513,191,1.51,203,2.836,233,2.25,500,2.896,501,2.308,502,3.189,504,1.966,506,1.921,508,3.288,511,2.308,576,3.542,577,3.007,578,3.461,579,4.932,580,4.286,581,4.286,582,3.461,583,7.082,584,4.932,585,3.461,586,3.461,587,3.461,588,3.461,589,7.082,590,3.461,591,6.263,592,3.461,593,4.932,594,4.932,595,3.461,596,3.461,597,3.007,598,3.674,599,3.461,600,3.461,601,3.461,602,3.542,603,2.709,604,2.308,605,2.486,606,3.288,607,3.542,608,2.709,609,3.461,610,2.486,611,3.461,612,3.461,613,3.461,614,3.461,615,3.461,616,3.461,617,4.932,618,4.932,619,3.86,620,3.461,621,4.932,622,4.932,623,4.932,624,4.932,625,4.932,626,3.461,627,3.461,628,3.461,629,3.461,630,3.461,631,3.461]],["title/modules/AuthModule.html",[175,1.083,519,2.472]],["body/modules/AuthModule.html",[0,0.225,3,0.157,4,0.14,5,0.14,18,0.015,51,0.305,60,0.157,67,0.008,68,0.01,69,0.008,72,1.863,128,0.749,175,1.794,177,1.868,178,1.868,179,2.038,180,2.038,181,1.868,182,2.995,183,2.995,189,2.68,190,2.038,191,1.95,193,2.943,203,1.72,502,4.422,519,4.938,524,3.45,529,5.106,530,5.458,531,3.209,540,3.883,552,3.883,553,3.883,554,3.883,557,3.883,560,3.883,576,4.715,603,3.497,632,3.883,633,3.883,634,3.883,635,4.959,636,4.959,637,4.468,638,5.106,639,5.876,640,2.788,641,5.876,642,3.209,643,4.468,644,4.468,645,4.468,646,4.468,647,4.468,648,3.883,649,4.468,650,4.468,651,4.468]],["title/injectables/AuthService.html",[199,0.836,502,2.2]],["body/injectables/AuthService.html",[0,0.181,3,0.127,4,0.113,5,0.113,7,0.429,9,1.418,17,0.838,18,0.015,19,1.836,28,0.915,32,0.996,51,0.274,59,0.947,60,0.127,64,1.976,67,0.006,68,0.009,69,0.006,75,1.491,94,1.976,96,1.874,98,2.356,128,0.603,162,1.678,199,1.07,200,1.384,203,2.96,209,2.312,217,2.312,226,2.42,227,1.717,232,2.42,233,3.179,237,2.211,238,2.032,239,2.583,240,2.583,241,2.244,493,4.404,502,2.813,504,2.543,580,4.404,581,4.404,597,4.404,598,3.536,602,3.639,605,2.583,606,2.398,642,2.583,652,3.125,653,5.067,654,3.596,655,3.868,656,6.222,657,3.596,658,5.067,659,3.596,660,3.966,661,5.067,662,3.596,663,3.596,664,5.067,665,5.868,666,3.596,667,4.478,668,3.966,669,3.966,670,3.596,671,3.596,672,3.125,673,4.404,674,3.596,675,5.067,676,3.639,677,5.067,678,2.244,679,3.125,680,2.244,681,3.125,682,2.583,683,3.125,684,3.596,685,3.596,686,4.404,687,3.125,688,4.404,689,3.596,690,3.596,691,2.668,692,3.596,693,4.404,694,3.596,695,3.125,696,3.596,697,3.596]],["title/classes/ChangeUserPasswordDto.html",[0,0.2,698,2.642]],["body/classes/ChangeUserPasswordDto.html",[0,0.314,2,1.2,3,0.173,4,0.153,5,0.153,7,0.584,8,2.219,17,0.778,18,0.014,19,1.903,20,1.527,26,1.704,32,0.926,51,0.245,56,2.44,57,0.855,60,0.173,62,2.219,67,0.009,68,0.011,69,0.009,155,2.711,238,2.502,504,2.348,691,3.803,698,4.16,699,5.963,700,4.26,701,6.863,702,6.863,703,5.422,704,6.277,705,6.277,706,5.654,707,5.422,708,6.239,709,4.903,710,4.883,711,4.903,712,3.437,713,3.809,714,4.26,715,2.341,716,5.422,717,5.422]],["title/classes/CreateAirlineDto.html",[0,0.2,82,2.472]],["body/classes/CreateAirlineDto.html",[0,0.239,1,3.357,2,0.805,3,0.116,4,0.103,5,0.103,7,0.392,8,1.691,9,1.507,10,4.853,11,4.853,12,4.371,13,4.853,14,4.853,15,4.853,17,0.844,18,0.015,19,1.992,20,1.656,22,3.415,23,3.755,24,4.394,25,3.817,26,1.857,27,3.817,28,0.922,32,1.004,34,3.817,36,5.316,40,4.132,41,4.132,42,3.972,43,5.878,44,4.132,51,0.187,56,2.48,57,0.573,60,0.116,62,2.405,67,0.006,68,0.008,69,0.006,82,2.966,155,2.8,712,2.797,713,3.872,715,1.571,718,6.061,719,2.574,720,4.132,721,3.289,722,3.289,723,2.858,724,3.289,725,4.755,726,3.289,727,3.289,728,3.289,729,3.289,730,4.327,731,2.193,732,4.011,733,5.584]],["title/classes/CreateAirplaneDto.html",[0,0.2,299,2.472]],["body/classes/CreateAirplaneDto.html",[0,0.306,2,1.149,3,0.166,4,0.147,5,0.147,7,0.56,8,2.158,17,0.839,18,0.014,19,1.599,20,1.646,26,1.778,28,0.827,32,0.998,51,0.264,56,2.528,57,0.819,60,0.166,62,2.391,67,0.008,68,0.011,69,0.008,155,2.681,269,2.768,271,5.844,272,5.263,273,4.504,274,4.359,275,4.359,276,4.359,279,2.768,280,5.274,281,5.274,284,3.211,289,3.373,291,2.649,299,3.787,712,3.56,713,3.369,715,2.243,723,4.081,731,3.131,732,3.373,734,6.177,735,3.676,736,4.696,737,4.696,738,4.696,739,4.696,740,4.696,741,6.069,742,5.274,743,4.359]],["title/classes/CreateAirportDto.html",[0,0.2,410,2.472]],["body/classes/CreateAirportDto.html",[0,0.225,2,0.74,3,0.106,4,0.095,5,0.095,7,0.36,8,1.589,9,1.57,17,0.904,18,0.014,19,2.069,20,1.773,23,2.481,26,1.853,27,4.096,28,1.061,32,1.075,34,4.096,51,0.175,56,2.613,57,0.527,60,0.106,62,2.576,67,0.005,68,0.008,69,0.005,155,2.874,369,4.098,371,4.621,372,4.621,373,4.621,374,4.621,375,4.621,376,4.621,377,4.621,378,4.621,379,4.621,380,4.908,381,5.705,385,4.715,388,3.883,393,3.883,399,3.883,403,5.705,410,2.788,712,3.141,713,4.079,715,1.443,720,5.705,730,4.529,731,2.015,732,5.115,744,6.386,745,2.365,746,3.022,747,3.022,748,4.621,749,3.022,750,3.022,751,3.022,752,3.022,753,3.022,754,3.022,755,3.022,756,3.022,757,3.022,758,3.022,759,4.469,760,2.626,761,3.022,762,3.022]],["title/classes/CreateFlightDto.html",[0,0.2,763,2.472]],["body/classes/CreateFlightDto.html",[0,0.213,1,2.979,2,0.688,3,0.099,4,0.088,5,0.088,7,0.335,8,2.015,9,1.196,17,0.914,18,0.014,19,1.683,20,1.792,21,1.479,22,3.04,23,2.349,24,3.04,25,2.64,26,1.864,28,0.871,30,1.697,32,1.087,51,0.239,56,2.57,57,0.49,60,0.099,62,2.604,67,0.005,68,0.007,69,0.005,155,2.885,162,1.115,269,3.113,274,3.04,275,3.04,276,3.04,279,3.113,369,3.677,712,3.564,713,3.146,715,1.342,730,3.395,743,3.04,763,2.64,764,6.437,765,2.018,766,3.657,767,4.425,768,5.284,769,4.425,770,3.657,771,3.985,772,5.284,773,3.985,774,4.425,775,5.284,776,4.425,777,2.809,778,2.809,779,2.441,780,3.312,781,4.436,782,2.809,783,4.425,784,4.436,785,4.436,786,3.678,787,4.436,788,2.809,789,3.987,790,3.04,791,2.809,792,3.312,793,2.809,794,3.678,795,3.678,796,2.809,797,3.312,798,4.436,799,2.809,800,3.678,801,2.809,802,3.678,803,3.678,804,3.365,805,2.809,806,3.04,807,3.04,808,2.021,809,2.809,810,3.678,811,2.809,812,2.441,813,3.678,814,2.809,815,3.395,816,4.232,817,5.284,818,2.441,819,2.018,820,2.441]],["title/classes/CreateSeatDto.html",[0,0.2,821,2.846]],["body/classes/CreateSeatDto.html",[0,0.316,2,1.534,3,0.221,4,0.196,5,0.196,18,0.013,60,0.221,67,0.011,68,0.013,69,0.011,821,5.201,822,5.445,823,4.904]],["title/classes/CreateSectionDto.html",[0,0.2,824,2.472]],["body/classes/CreateSectionDto.html",[0,0.408,2,1.149,3,0.166,4,0.147,5,0.147,7,0.56,8,2.158,17,0.839,18,0.014,20,1.646,26,1.778,32,0.998,51,0.264,56,2.528,57,0.819,60,0.166,62,2.391,67,0.008,68,0.011,69,0.008,155,2.793,279,3.242,284,2.898,712,3.56,715,2.243,743,4.83,812,5.274,824,3.787,825,6.177,826,3.676,827,5.761,828,4.592,829,4.696,830,4.75,831,3.369,832,3.564,833,4.696,834,5.274,835,4.696,836,5.274,837,4.696,838,3.373,839,3.373,840,4.081]],["title/classes/CreateTicketDto.html",[0,0.2,841,2.472]],["body/classes/CreateTicketDto.html",[0,0.2,2,0.633,3,0.091,4,0.081,5,0.081,7,0.308,8,1.413,9,1.306,17,0.982,18,0.014,19,1.974,20,1.801,23,2.206,26,1.869,27,2.479,28,0.949,32,1.092,34,2.479,51,0.243,56,2.556,57,0.451,58,3.086,60,0.091,62,2.617,67,0.004,68,0.007,69,0.004,155,2.89,279,1.813,291,2.558,385,2.854,504,2.275,604,1.724,678,3.02,680,3.02,706,2.024,712,3.601,713,3.786,715,1.235,730,3.621,760,2.247,776,3.453,783,4.72,790,2.854,802,2.247,806,2.854,807,2.854,808,3.176,815,3.621,817,4.206,831,3.435,832,3.633,838,1.857,841,2.479,842,6.456,843,2.024,844,5.093,845,4.206,846,4.206,847,4.206,848,4.206,849,5.627,850,4.485,851,5.093,852,3.453,853,4.72,854,4.72,855,2.586,856,3.974,857,5.377,858,2.586,859,2.586,860,2.586,861,2.586,862,2.586,863,3.453,864,2.586,865,3.11,866,2.65,867,2.586,868,2.586,869,3.453,870,2.854,871,2.586,872,2.586,873,2.586,874,3.11,875,2.586,876,2.247,877,2.65,878,2.586,879,2.586,880,3.11,881,2.586,882,2.854,883,2.586,884,2.586,885,3.453,886,2.586,887,1.857,888,1.724,889,1.857,890,2.586,891,2.586,892,2.586,893,2.247]],["title/classes/CreateUserDto.html",[0,0.2,598,2.2]],["body/classes/CreateUserDto.html",[0,0.281,2,1.012,3,0.146,4,0.129,5,0.129,7,0.493,8,1.985,17,0.881,18,0.014,19,1.992,20,1.728,26,1.827,28,0.922,32,1.048,51,0.219,56,2.587,57,0.721,60,0.146,62,2.511,67,0.007,68,0.01,69,0.007,155,2.846,279,3.085,598,3.098,605,5.225,667,4.212,678,3.941,680,3.941,682,4.537,691,3.718,703,3.595,704,4.85,705,4.85,706,4.368,707,3.595,710,4.368,712,3.644,713,3.754,714,3.595,715,1.975,716,3.595,717,3.595,731,2.758,865,4.368,866,3.721,870,4.009,882,4.009,894,3.238,895,4.137,896,4.009,897,4.85,898,4.137,899,5.582,900,4.137,901,5.582,902,4.137,903,4.137,904,4.137,905,4.85,906,4.85,907,4.137,908,5.582,909,5.582,910,5.582]],["title/modules/FilesModule.html",[175,1.083,188,2.472]],["body/modules/FilesModule.html",[0,0.277,3,0.194,4,0.172,5,0.172,18,0.014,51,0.263,60,0.194,67,0.01,68,0.012,69,0.01,128,0.922,175,1.976,177,2.3,178,2.3,179,2.509,180,2.509,181,2.3,182,3.298,183,3.298,188,4.955,189,3.058,190,2.509,191,2.401,212,5.113,911,4.78,912,4.78,913,4.78,914,5.501,915,5.501]],["title/injectables/FilesService.html",[199,0.836,212,2.472]],["body/injectables/FilesService.html",[0,0.24,1,2.672,3,0.168,4,0.149,5,0.231,7,0.567,9,1.005,17,0.594,18,0.015,28,0.649,30,1.908,32,0.706,51,0.28,60,0.216,64,1.991,67,0.008,68,0.011,69,0.008,75,1.801,94,1.4,96,1.4,128,0.798,162,1.254,199,1.292,200,1.832,203,2.605,212,3.819,217,2.792,226,2.923,227,2.273,229,6.023,237,2.077,238,1.908,242,2.642,243,5.881,249,2.795,361,4.082,831,2.642,896,3.418,916,3.725,917,6.122,918,6.122,919,4.76,920,6.122,921,5.32,922,6.122,923,4.76,924,4.76,925,4.76,926,4.76,927,4.136,928,4.76,929,4.76,930,4.76,931,4.76,932,4.76,933,4.76,934,4.76,935,4.76,936,4.76]],["title/classes/Flight.html",[0,0.2,808,1.892]],["body/classes/Flight.html",[0,0.134,1,3.063,2,0.652,3,0.094,4,0.083,5,0.083,7,0.318,8,1.753,9,1.164,17,0.968,18,0.014,19,1.649,20,1.772,21,3.696,22,2.92,23,2.257,24,2.92,25,2.537,26,1.852,28,0.672,30,3.169,31,3.475,32,1.074,38,2.711,51,0.256,52,4.067,53,1.565,54,1.479,55,0.702,56,2.538,57,0.465,58,2.141,59,1.299,60,0.174,62,2.574,63,3.727,64,0.784,67,0.005,68,0.007,69,0.005,162,0.702,269,3.202,274,2.92,275,2.92,276,2.92,277,3.287,279,3.063,286,3.442,287,4.189,292,3.442,369,3.758,386,3.533,766,3.541,767,4.284,768,5.162,769,4.284,770,3.541,771,3.859,772,4.794,773,3.859,774,4.284,775,4.794,780,3.182,781,4.318,784,4.318,785,4.318,786,3.533,787,3.182,789,3.906,790,2.92,792,3.182,794,3.533,795,2.315,797,3.182,798,4.318,800,3.533,803,3.533,804,3.297,806,2.92,807,2.92,808,2.837,810,3.533,813,3.533,815,3.287,818,2.315,819,1.914,820,2.315,937,1.914,938,2.664,939,2.664,940,2.664,941,4.066,942,2.664,943,2.664,944,2.664,945,2.664,946,2.664,947,2.664,948,2.664,949,3.533,950,2.664,951,2.664,952,2.664,953,2.664,954,2.664,955,2.664,956,2.664,957,1.914,958,1.776,959,2.315]],["title/controllers/FlightsController.html",[70,1.256,960,2.846]],["body/controllers/FlightsController.html",[0,0.137,3,0.096,4,0.085,5,0.085,7,0.324,9,1.265,17,0.988,18,0.015,19,1.315,20,1.545,26,1.807,28,0.921,32,0.936,51,0.272,57,0.474,59,0.716,60,0.096,67,0.005,68,0.007,69,0.005,70,0.862,72,0.862,74,1.432,75,1.215,76,2.235,77,3.52,78,3.273,79,1.972,80,3.094,84,3.161,86,3.273,88,3.323,89,1.813,90,2.771,91,2.425,94,1.764,96,1.857,97,1.813,98,2.61,100,3.558,102,2.799,103,2.753,104,2.292,105,1.953,107,3.094,109,1.813,111,1.696,116,1.696,118,2.292,122,2.425,123,2.068,124,1.509,125,1.509,128,0.456,132,2.935,133,2.935,134,2.792,135,2.931,136,2.792,137,3.094,138,3.156,139,3.285,140,3.273,141,1.362,142,2.792,146,1.187,148,1.047,149,1.432,150,1.432,151,1.509,154,1.24,155,0.967,156,3.161,157,2.5,158,2.5,159,2.629,160,2.931,162,1.662,165,1.922,166,1.597,167,1.696,169,1.696,170,1.696,172,1.696,173,1.813,311,2.128,323,1.813,423,2.128,424,1.696,763,3.74,808,3.514,960,2.966,961,2.363,962,4.338,963,5.575,964,2.719,965,2.719,966,2.719,967,2.719,968,2.719,969,5.872,970,2.719,971,4.992,972,2.719,973,2.719,974,2.719,975,2.719,976,2.719,977,3.997,978,2.719,979,2.719,980,2.719,981,2.719,982,2.719,983,3.997,984,2.719,985,2.719,986,3.114,987,2.363,988,2.128,989,3.907,990,2.363,991,2.719,992,2.719,993,2.719,994,2.719,995,2.719,996,2.719,997,2.719,998,2.719,999,2.719,1000,2.719]],["title/modules/FlightsModule.html",[175,1.083,520,2.472]],["body/modules/FlightsModule.html",[0,0.258,3,0.18,4,0.16,5,0.16,18,0.014,28,0.697,51,0.297,53,1.969,55,1.348,60,0.18,67,0.009,68,0.011,69,0.009,72,2.032,128,0.857,175,1.913,177,2.139,178,2.139,179,2.334,180,2.334,181,2.139,182,3.192,183,3.192,189,2.923,190,2.334,191,2.233,193,2.562,194,2.694,197,2.84,520,4.879,808,2.443,958,4.273,960,5.026,986,5.065,987,4.446,988,4.004,1001,4.446,1002,4.446,1003,4.446,1004,5.116,1005,5.116,1006,4.446]],["title/injectables/FlightsService.html",[199,0.836,986,2.472]],["body/injectables/FlightsService.html",[0,0.089,1,2.279,3,0.062,4,0.055,5,0.055,7,0.211,9,1.102,17,0.651,18,0.015,19,0.465,28,0.754,30,1.175,32,0.821,42,1.037,51,0.236,55,0.465,59,0.465,60,0.062,64,1.821,67,0.008,68,0.005,69,0.003,75,0.862,79,1.399,94,1.536,96,1.536,98,2.29,102,1.445,128,0.296,146,0.771,148,0.68,162,1.375,165,1.445,199,0.618,200,0.68,202,3.921,203,2.719,209,1.336,211,2.424,217,2.961,226,2.086,227,0.844,228,0.981,232,0.844,233,2.824,236,3.07,237,2.114,238,2.218,239,1.269,240,1.269,241,1.102,242,0.981,246,4.613,247,4.361,248,2.616,249,1.037,250,1.178,251,1.178,252,1.626,254,2.084,269,2.382,273,3.066,355,1.535,360,5.564,361,5.165,763,2.725,766,3.75,770,3.75,771,1.383,773,2.293,808,3.405,828,3.258,957,1.269,962,3.262,969,4.538,977,2.912,983,2.912,986,1.828,988,1.383,989,2.938,990,1.535,1007,1.535,1008,2.93,1009,2.93,1010,4.368,1011,2.93,1012,2.93,1013,3.754,1014,1.767,1015,1.767,1016,2.546,1017,2.93,1018,1.767,1019,2.93,1020,1.767,1021,4.368,1022,1.767,1023,2.93,1024,1.767,1025,2.93,1026,1.767,1027,1.767,1028,1.767,1029,3.754,1030,1.535,1031,2.546,1032,1.535,1033,4.806,1034,4.368,1035,1.767,1036,1.767,1037,2.93,1038,1.767,1039,2.93,1040,1.767,1041,2.93,1042,1.767,1043,2.93,1044,1.767,1045,2.93,1046,1.767,1047,2.93,1048,1.767,1049,2.93,1050,1.767,1051,2.93,1052,1.767,1053,2.93,1054,1.767,1055,2.93,1056,1.767,1057,1.767,1058,2.93,1059,1.767,1060,2.93,1061,1.767,1062,1.767,1063,1.767,1064,2.546,1065,1.767,1066,2.93,1067,1.767,1068,1.535,1069,1.767,1070,1.767,1071,2.93,1072,2.93,1073,2.93,1074,2.93,1075,1.767,1076,1.767,1077,1.767,1078,1.767,1079,1.767,1080,1.767,1081,1.767,1082,2.93,1083,2.93,1084,4.368,1085,2.93,1086,2.93,1087,2.93,1088,1.767,1089,1.767,1090,1.767,1091,1.767,1092,2.93,1093,2.93,1094,2.93,1095,1.767,1096,1.767,1097,1.767,1098,1.767,1099,1.767,1100,1.767,1101,1.767,1102,1.767,1103,1.767,1104,2.93,1105,2.93,1106,1.767,1107,1.767,1108,1.767,1109,1.767,1110,1.767,1111,1.767,1112,1.767,1113,1.767,1114,1.767]],["title/injectables/JwtAuthGuard.html",[199,0.836,506,2.2]],["body/injectables/JwtAuthGuard.html",[0,0.304,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,60,0.213,67,0.01,68,0.012,69,0.01,128,1.011,199,1.495,200,2.323,506,3.932,640,3.764,1115,4.023,1116,4.722,1117,5.243,1118,2.633,1119,6.034]],["title/injectables/JwtStrategy.html",[199,0.836,635,2.642]],["body/injectables/JwtStrategy.html",[0,0.233,3,0.163,4,0.145,5,0.145,7,0.551,9,1.268,17,0.75,18,0.015,28,0.819,32,0.891,51,0.288,60,0.163,64,1.768,67,0.008,68,0.01,69,0.008,75,1.768,94,1.768,96,1.361,128,0.775,162,1.583,199,1.268,200,1.78,203,2.57,209,2.741,232,2.87,233,2.109,237,2.018,238,1.854,248,2.316,500,3.528,504,2.283,530,5.982,531,3.321,619,3.619,635,4.006,640,2.885,648,4.019,655,3.923,668,4.703,672,4.019,789,2.885,1118,2.018,1120,3.619,1121,5.222,1122,4.624,1123,4.624,1124,6.009,1125,6.009,1126,4.624,1127,4.019,1128,4.019,1129,3.619,1130,4.624,1131,4.703,1132,3.619,1133,5.224,1134,3.619,1135,3.619,1136,4.019,1137,4.019,1138,4.624,1139,4.624,1140,4.624,1141,4.624]],["title/injectables/LocalAuthGuard.html",[199,0.836,610,2.846]],["body/injectables/LocalAuthGuard.html",[0,0.304,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,60,0.213,67,0.01,68,0.012,69,0.01,128,1.011,199,1.495,200,2.323,610,5.088,640,3.764,1116,4.722,1117,5.243,1118,2.633,1142,5.243,1143,6.034]],["title/injectables/LocalStrategy.html",[199,0.836,636,2.642]],["body/injectables/LocalStrategy.html",[0,0.247,3,0.173,4,0.154,5,0.154,7,0.586,9,1.319,17,0.779,18,0.014,19,2.01,28,0.852,32,0.927,51,0.284,60,0.173,64,1.446,67,0.009,68,0.011,69,0.009,75,1.838,94,1.838,96,1.446,128,0.824,154,2.242,162,1.294,199,1.319,200,1.892,203,2.645,209,2.242,217,2.85,233,2.242,237,2.145,238,1.97,502,4.235,504,2.35,603,3.846,636,4.166,640,3.066,667,4.166,668,4.89,691,3.807,1118,2.145,1121,5.43,1127,4.27,1128,4.27,1129,3.846,1136,4.27,1137,4.27,1144,4.27,1145,4.914,1146,4.914,1147,6.248,1148,4.914,1149,4.27,1150,4.914,1151,4.914]],["title/classes/LoginUserDto.html",[0,0.2,607,2.846]],["body/classes/LoginUserDto.html",[0,0.298,2,1.448,3,0.208,4,0.185,5,0.185,18,0.014,51,0.275,57,1.031,60,0.208,64,1.741,67,0.01,68,0.012,69,0.01,76,2.372,598,3.284,606,3.944,607,5.029,608,4.63,678,3.691,680,3.691,682,4.249,894,4.63,1118,2.582,1152,5.141,1153,3.687,1154,5.141]],["title/guards/RolesGuard.html",[550,2.846,1155,3.101]],["body/guards/RolesGuard.html",[0,0.223,3,0.156,4,0.139,5,0.139,7,0.528,9,1.233,17,0.729,18,0.015,28,0.796,30,1.777,32,0.867,51,0.284,60,0.156,64,1.924,67,0.008,68,0.01,69,0.008,75,1.719,94,1.719,96,1.304,128,0.743,151,2.46,154,2.021,162,1.539,199,1.233,209,2.021,217,2.665,226,2.116,227,2.116,232,2.116,237,1.934,238,1.777,242,2.46,249,2.602,500,3.431,504,1.999,537,3.468,550,4.197,642,3.182,656,6.448,789,2.764,792,4.573,896,3.182,1133,4.573,1134,3.468,1135,3.468,1156,4.431,1157,3.85,1158,7.225,1159,4.431,1160,7.566,1161,4.431,1162,4.431,1163,6.951,1164,4.431,1165,5.843,1166,6.538,1167,3.85,1168,4.573,1169,4.431,1170,4.431,1171,5.843,1172,4.431,1173,4.431,1174,4.431,1175,4.431,1176,4.431,1177,4.431,1178,4.431,1179,4.431,1180,4.431,1181,4.431]],["title/classes/SearchFlightDto.html",[0,0.2,977,2.642]],["body/classes/SearchFlightDto.html",[0,0.382,2,0.905,3,0.13,4,0.116,5,0.116,7,0.441,8,1.837,9,1.09,17,0.877,18,0.014,19,1.939,20,1.721,26,1.823,30,1.482,32,1.043,51,0.234,56,2.5,57,0.644,60,0.13,62,2.5,67,0.006,68,0.009,69,0.006,155,2.841,279,2.357,284,2.467,289,2.655,712,3.614,713,3.766,715,1.765,730,3.445,731,2.465,732,3.71,742,4.489,743,3.71,748,4.489,765,2.655,779,3.212,780,4.044,781,5.311,784,5.047,785,5.047,787,5.047,797,4.044,798,5.854,815,3.445,828,3.223,838,2.655,840,3.212,866,3.445,977,3.445,1064,5.175,1182,6.27,1183,6.785,1184,5.956,1185,3.696,1186,3.696,1187,5.166,1188,3.696,1189,4.044,1190,3.696,1191,3.696,1192,5.166,1193,3.696,1194,3.696,1195,3.696,1196,5.166,1197,6.448,1198,3.696,1199,5.166,1200,5.166,1201,3.696,1202,5.166,1203,5.956,1204,3.696,1205,3.696,1206,3.696,1207,3.696,1208,3.696]],["title/classes/Seat.html",[0,0.2,291,1.729]],["body/classes/Seat.html",[0,0.207,2,1.007,3,0.145,4,0.129,5,0.129,7,0.49,8,1.977,17,0.906,18,0.014,20,1.541,21,3.316,26,1.713,30,3.154,31,4.031,32,0.934,42,3.264,51,0.277,52,3.745,53,2.14,54,2.283,55,1.083,56,2.399,57,0.717,58,2.927,59,1.659,60,0.238,62,2.24,63,3.496,64,1.21,67,0.007,68,0.01,69,0.007,279,3.387,282,3.574,284,3.728,286,3.469,287,3.469,289,2.954,291,2.944,292,2.566,831,3.912,832,3.264,850,4.939,877,3.707,1209,2.742,1210,4.113,1211,4.113,1212,4.113,1213,5.862,1214,3.574,1215,3.993,1216,4.113,1217,2.954,1218,4.351,1219,4.351,1220,4.351,1221,4.113,1222,2.742,1223,3.574]],["title/controllers/SeatsController.html",[70,1.256,1224,2.846]],["body/controllers/SeatsController.html",[0,0.222,3,0.156,4,0.138,5,0.138,7,0.526,9,0.931,17,0.866,18,0.014,20,1.08,26,1.702,28,0.601,32,0.655,51,0.297,57,0.769,59,1.162,60,0.156,67,0.008,68,0.01,69,0.008,70,1.399,72,1.399,74,2.323,75,1.715,80,3.852,84,2.21,88,3.068,90,2.449,91,2.591,94,1.298,96,1.298,98,2.567,100,3.068,102,2.243,104,2.449,107,2.449,116,2.753,118,2.449,123,2.919,124,2.449,125,2.449,128,0.74,132,3.068,133,3.068,134,2.919,136,2.919,137,3.235,138,3.068,139,2.919,141,2.21,142,2.919,148,1.699,154,2.013,155,1.569,156,2.21,157,2.21,158,2.21,159,2.323,162,1.162,165,1.699,170,2.753,291,3.028,424,2.753,501,2.942,506,2.449,508,2.942,511,2.942,828,2.753,1115,2.942,1224,4.185,1225,3.834,1226,6.03,1227,4.811,1228,4.413,1229,4.413,1230,4.413,1231,4.07,1232,3.834,1233,3.169,1234,3.454,1235,4.413,1236,4.413,1237,4.413,1238,4.413]],["title/modules/SeatsModule.html",[175,1.083,521,2.642]],["body/modules/SeatsModule.html",[0,0.258,3,0.18,4,0.16,5,0.16,18,0.014,28,0.697,51,0.297,53,1.969,55,1.348,60,0.18,67,0.009,68,0.011,69,0.009,72,2.032,128,0.857,175,1.913,177,2.139,178,2.139,179,2.334,180,2.334,181,2.139,182,3.192,183,3.192,189,2.923,190,2.334,191,2.233,193,2.562,194,2.694,197,2.84,291,2.233,521,5.215,1222,4.273,1224,5.026,1231,5.065,1232,4.446,1233,3.674,1239,4.446,1240,4.446,1241,4.446,1242,5.116,1243,5.116,1244,4.446]],["title/injectables/SeatsService.html",[199,0.836,1231,2.472]],["body/injectables/SeatsService.html",[0,0.234,3,0.164,4,0.145,5,0.145,7,0.554,9,1.272,17,0.752,18,0.014,28,0.821,32,0.894,51,0.288,55,1.223,59,1.223,60,0.164,67,0.008,68,0.01,69,0.008,75,1.773,94,1.773,96,1.367,98,2.618,102,1.788,128,0.778,148,1.788,162,1.223,165,1.788,199,1.272,200,1.788,202,3.713,203,2.575,209,2.119,211,3.929,217,2.749,226,2.878,227,2.218,228,2.578,232,2.218,233,3.051,236,2.578,237,2.027,238,1.862,247,2.578,248,2.326,254,2.578,291,3.28,1217,3.336,1226,5.813,1227,4.72,1231,3.76,1233,3.336,1234,3.635,1245,4.036,1246,6.689,1247,4.645,1248,4.645,1249,5.237,1250,4.645,1251,4.645,1252,6.026,1253,4.645,1254,4.645,1255,6.026,1256,4.645,1257,4.645,1258,4.645]],["title/classes/Section.html",[0,0.2,284,1.892]],["body/classes/Section.html",[0,0.402,2,1.033,3,0.149,4,0.132,5,0.132,7,0.503,8,2.011,17,0.932,18,0.014,20,1.562,21,3.359,26,1.726,30,3.117,31,3.946,32,0.947,51,0.279,52,3.784,53,2.177,54,2.342,55,1.111,56,2.424,57,0.736,58,2.978,59,1.681,60,0.24,62,2.269,63,3.14,64,1.241,67,0.007,68,0.01,69,0.007,279,2.58,284,3.395,286,2.632,287,3.529,291,3.102,292,2.632,827,5.335,828,4.253,830,5.335,831,3.946,832,3.321,834,4.915,836,4.915,888,2.813,1189,4.427,1259,2.813,1260,4.219,1261,4.219,1262,4.219,1263,4.219,1264,4.219,1265,4.219,1266,3.302,1267,3.03,1268,3.666]],["title/controllers/SectionsController.html",[70,1.256,1269,2.846]],["body/controllers/SectionsController.html",[0,0.149,3,0.104,4,0.092,5,0.092,7,0.352,9,1.226,17,0.985,18,0.015,19,1.381,20,1.52,26,1.808,28,0.919,32,0.921,51,0.272,57,0.514,59,0.777,60,0.104,67,0.005,68,0.008,69,0.005,70,0.935,72,0.935,74,1.553,75,1.292,76,2.329,77,3.645,78,3.41,79,2.096,80,3.224,84,3.11,86,2.578,88,2.312,90,2.91,91,1.732,94,1.709,96,1.827,97,1.967,98,2.664,100,3.647,102,2.849,104,2.437,107,3.224,109,1.967,111,1.84,114,2.564,116,1.84,118,2.437,122,2.578,123,2.199,124,1.637,125,1.637,128,0.494,132,2.761,133,2.761,134,2.909,135,2.578,136,2.909,137,3.224,138,3.269,139,3.26,140,3.41,141,1.478,142,2.909,146,1.287,148,1.136,149,1.553,150,1.553,151,1.637,154,1.346,155,1.049,156,3.11,157,1.478,158,2.626,159,2.761,160,3.079,162,1.635,165,2.018,166,1.732,167,1.84,169,1.84,170,1.84,172,1.84,173,1.967,273,2.578,284,3.534,302,2.564,322,2.564,323,1.967,424,1.84,824,3.873,839,2.119,1269,3.153,1270,2.564,1271,2.95,1272,2.95,1273,4.39,1274,2.95,1275,2.95,1276,5.655,1277,2.95,1278,4.39,1279,3.815,1280,2.95,1281,2.95,1282,2.95,1283,2.95,1284,2.95,1285,2.95,1286,4.139,1287,2.95,1288,2.95,1289,2.95,1290,2.95,1291,3.271,1292,2.564,1293,3.436,1294,2.95,1295,2.95,1296,2.95,1297,2.95,1298,2.95,1299,2.95,1300,2.95]],["title/modules/SectionsModule.html",[175,1.083,522,2.642]],["body/modules/SectionsModule.html",[0,0.25,3,0.175,4,0.156,5,0.156,18,0.014,28,0.858,51,0.3,53,2.423,55,1.31,60,0.175,67,0.009,68,0.011,69,0.009,72,1.996,128,0.833,175,1.888,177,2.079,178,2.079,179,2.268,180,2.268,181,2.079,182,3.151,183,3.151,189,2.871,190,2.268,191,2.17,193,2.49,194,2.618,197,3.494,284,2.374,291,2.17,522,5.182,839,3.571,888,3.315,1222,4.197,1244,4.32,1267,4.521,1269,4.961,1291,5.046,1292,4.32,1301,4.32,1302,4.32,1303,4.32,1304,4.972,1305,4.972,1306,4.972]],["title/injectables/SectionsService.html",[199,0.836,1291,2.472]],["body/injectables/SectionsService.html",[0,0.232,3,0.111,4,0.099,5,0.099,7,0.376,9,1.347,17,0.796,18,0.015,28,0.87,32,0.989,42,1.854,51,0.27,55,0.831,59,0.831,60,0.111,64,1.605,67,0.005,68,0.008,69,0.005,75,1.358,94,1.878,96,1.878,98,2.707,102,2.1,128,0.529,146,1.378,148,1.215,162,1.581,165,2.1,199,0.974,200,1.215,202,4.241,203,2.941,209,2.105,211,3.823,217,3.286,226,2.866,227,1.507,228,1.752,232,2.204,233,3.142,236,3.331,237,2.381,238,2.187,242,1.752,246,3.916,247,3.702,248,3.006,252,1.752,254,3.028,273,2.71,284,3.675,291,1.378,360,3.314,361,3.077,824,3.744,827,2.471,828,3.403,839,2.267,888,2.105,1217,2.267,1249,4.74,1266,2.471,1276,5.215,1286,4.001,1291,2.879,1293,3.612,1307,2.743,1308,4.615,1309,4.615,1310,5.455,1311,4.615,1312,5.455,1313,3.157,1314,3.157,1315,4.615,1316,4.615,1317,3.157,1318,4.615,1319,3.157,1320,6.001,1321,3.157,1322,4.615,1323,3.157,1324,3.157,1325,3.157,1326,3.157,1327,3.157,1328,3.157,1329,5.455,1330,5.455,1331,6.001,1332,4.615,1333,3.157,1334,3.157,1335,3.157,1336,3.157,1337,3.157]],["title/classes/Ticket.html",[0,0.2,804,2.086]],["body/classes/Ticket.html",[0,0.117,2,0.569,3,0.082,4,0.073,5,0.073,7,0.277,8,1.301,9,1.083,17,0.987,18,0.015,19,1.934,20,1.761,21,3.689,23,2.031,26,1.846,27,2.282,28,0.875,30,3.2,31,3.889,32,1.067,34,2.282,51,0.243,52,4.037,53,1.408,54,1.291,55,0.612,56,2.527,57,0.405,58,3.119,59,1.191,60,0.209,62,2.558,63,3.826,64,0.684,67,0.004,68,0.006,69,0.004,277,2.439,279,1.669,286,3.2,287,3.2,291,2.238,292,2.282,385,2.628,504,2.259,604,1.55,678,2.822,680,2.822,789,2.822,790,2.628,804,2.382,806,2.628,807,2.628,808,3.154,815,3.016,831,4.037,832,3.478,844,4.457,845,3.93,846,3.93,847,3.93,848,3.93,849,5.562,850,4.434,851,4.457,852,3.179,853,4.457,854,4.457,857,3.93,863,3.179,865,2.863,866,2.439,869,3.179,870,2.628,874,4.014,877,3.42,880,4.014,882,2.628,885,3.179,887,1.67,888,1.55,949,3.179,1214,2.02,1215,3.248,1218,2.863,1219,2.863,1220,2.863,1338,1.55,1339,2.325,1340,2.325,1341,3.658,1342,2.325,1343,2.325,1344,2.325,1345,2.325,1346,2.325,1347,2.325,1348,2.325,1349,2.325,1350,2.325,1351,2.325,1352,2.325,1353,2.325,1354,2.325,1355,2.325,1356,2.325,1357,2.325,1358,2.325,1359,2.325,1360,2.325,1361,2.325,1362,2.325,1363,1.82,1364,3.179,1365,3.179,1366,3.179,1367,3.179,1368,2.325,1369,1.67,1370,2.02]],["title/controllers/TicketsController.html",[70,1.256,1371,2.846]],["body/controllers/TicketsController.html",[0,0.139,3,0.097,4,0.086,5,0.086,7,0.329,9,1.185,17,0.976,18,0.015,19,1.326,20,1.476,26,1.83,28,0.898,32,0.895,51,0.273,57,0.481,59,0.726,60,0.097,67,0.005,68,0.007,69,0.005,70,0.874,72,0.874,74,1.452,75,1.228,76,2.252,77,1.619,78,3.297,80,3.348,84,3.021,86,2.451,88,2.957,90,3.348,91,1.619,94,1.652,96,1.775,98,2.619,100,3.574,102,2.955,103,2.783,104,2.795,107,3.117,118,2.317,122,1.619,123,2.091,124,1.531,125,1.531,128,0.462,132,2.651,133,2.651,134,3.178,135,2.451,136,3.178,137,3.117,138,3.176,139,3.178,140,3.297,141,1.381,142,3.178,146,1.204,148,1.062,149,1.452,150,1.452,151,1.531,154,1.258,155,0.981,156,3.021,157,2.812,158,3.021,159,3.176,160,1.619,162,1.83,165,1.938,166,1.619,169,1.721,172,1.721,252,2.317,323,1.839,423,2.159,424,1.721,500,3.726,501,1.839,506,1.531,508,1.839,511,3.744,804,3.841,841,3.763,889,1.981,1115,1.839,1371,2.998,1372,2.397,1373,3.267,1374,2.758,1375,2.758,1376,2.758,1377,2.758,1378,2.758,1379,2.758,1380,2.758,1381,5.514,1382,2.758,1383,5.036,1384,2.758,1385,2.758,1386,2.758,1387,2.397,1388,2.397,1389,2.758,1390,2.758,1391,2.758,1392,2.758,1393,2.758,1394,2.758,1395,4.022,1396,2.758,1397,2.758,1398,3.142,1399,2.397,1400,3.267,1401,2.758,1402,2.758,1403,2.758,1404,2.758,1405,2.758,1406,2.758,1407,5.036,1408,2.758,1409,2.758,1410,2.758,1411,2.758]],["title/modules/TicketsModule.html",[175,1.083,523,2.642]],["body/modules/TicketsModule.html",[0,0.211,3,0.148,4,0.131,5,0.131,18,0.015,28,0.926,51,0.31,53,2.616,55,1.103,60,0.148,67,0.007,68,0.01,69,0.007,72,1.784,128,0.702,175,1.737,177,1.75,178,1.75,179,1.909,180,1.909,181,1.75,182,2.899,183,2.899,189,2.566,190,1.909,191,1.827,193,2.818,194,2.204,197,2.323,269,1.909,293,3.751,329,4.555,335,3.637,438,4.555,504,1.432,520,4.555,523,5.345,524,4.287,604,2.791,804,2.204,808,1.999,819,3.006,887,3.006,889,3.006,958,3.751,1006,3.637,1369,4.041,1371,4.564,1398,4.921,1399,3.637,1412,3.637,1413,3.637,1414,3.637,1415,4.186,1416,4.186,1417,4.186,1418,4.186,1419,4.186,1420,4.186,1421,4.186,1422,3.751,1423,4.186,1424,3.637]],["title/injectables/TicketsService.html",[199,0.836,1398,2.472]],["body/injectables/TicketsService.html",[0,0.116,1,1.005,3,0.081,4,0.072,5,0.072,7,0.274,9,1.172,17,0.693,18,0.015,28,0.757,32,0.875,42,2.639,51,0.258,55,0.606,59,0.606,60,0.081,64,2.022,67,0.004,68,0.006,69,0.004,75,1.068,79,1.099,94,1.633,96,1.633,98,2.774,102,2.463,128,0.386,146,1.005,148,0.886,162,1.462,165,2.463,199,0.766,200,0.886,202,4.029,203,2.794,209,1.656,211,3.936,217,3.074,226,3.144,227,1.099,228,1.278,232,2.436,233,3.372,236,3.551,237,2.792,238,2.565,246,4.404,247,4.164,248,3.376,252,1.278,254,3.551,269,2.918,272,1.802,273,2.639,290,1.654,344,3.905,356,2.001,358,3.155,360,4.937,361,4.583,367,3.155,504,2.306,604,1.535,660,4.832,691,1.911,766,1.654,770,1.654,804,3.68,808,3.338,819,1.654,841,3.183,850,1.436,887,1.654,889,1.654,957,1.654,1016,3.905,1032,2.001,1033,3.155,1068,2.001,1363,1.802,1373,2.841,1381,4.824,1395,3.401,1398,2.265,1400,2.841,1425,2.001,1426,3.63,1427,5.101,1428,4.494,1429,4.494,1430,4.494,1431,2.302,1432,3.905,1433,2.302,1434,3.63,1435,3.63,1436,2.302,1437,2.302,1438,2.302,1439,6.583,1440,2.302,1441,2.302,1442,2.302,1443,2.302,1444,2.302,1445,1.654,1446,2.302,1447,2.302,1448,3.63,1449,2.001,1450,3.155,1451,2.302,1452,2.302,1453,3.63,1454,2.302,1455,2.001,1456,3.63,1457,3.63,1458,2.302,1459,2.001,1460,3.63,1461,2.302,1462,2.302,1463,2.302,1464,2.302,1465,2.302]],["title/classes/UpdateAirlineDto.html",[0,0.2,117,2.642]],["body/classes/UpdateAirlineDto.html",[0,0.304,2,1.477,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.052,60,0.213,67,0.01,68,0.012,69,0.01,76,2.419,82,3.764,117,4.723,147,4.722,719,4.722,1118,2.633,1153,3.177,1466,5.243,1467,6.034]],["title/classes/UpdateAirplaneDto.html",[0,0.2,313,2.642]],["body/classes/UpdateAirplaneDto.html",[0,0.304,2,1.477,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.052,60,0.213,67,0.01,68,0.012,69,0.01,76,2.419,299,3.764,313,4.723,319,4.722,735,4.722,1118,2.633,1153,3.177,1468,5.243,1469,6.034]],["title/classes/UpdateAirportDto.html",[0,0.2,422,2.642]],["body/classes/UpdateAirportDto.html",[0,0.304,2,1.477,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.052,60,0.213,67,0.01,68,0.012,69,0.01,76,2.419,410,3.764,422,4.723,430,4.722,745,4.722,1118,2.633,1153,3.177,1470,5.243,1471,6.034]],["title/classes/UpdateFlightDto.html",[0,0.2,983,2.642]],["body/classes/UpdateFlightDto.html",[0,0.304,2,1.477,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.052,60,0.213,67,0.01,68,0.012,69,0.01,76,2.419,763,3.764,765,4.334,983,4.723,989,4.722,1118,2.633,1153,3.177,1472,5.243,1473,6.034]],["title/classes/UpdateSeatDto.html",[0,0.2,1227,2.642]],["body/classes/UpdateSeatDto.html",[0,0.373,2,1.286,3,0.185,4,0.164,5,0.164,7,0.626,8,2.318,17,0.656,18,0.014,20,1.286,26,1.537,32,0.78,51,0.291,56,2.318,57,0.916,60,0.185,62,1.869,67,0.009,68,0.011,69,0.009,76,2.107,155,2.519,712,3.264,715,2.51,821,3.774,823,4.113,831,3.618,832,3.827,838,3.774,850,5.033,876,4.567,877,4.345,893,4.567,1118,2.294,1153,2.767,1227,4.345,1233,3.774,1234,4.113,1474,5.663,1475,5.255,1476,5.255]],["title/classes/UpdateSectionDto.html",[0,0.2,1286,2.642]],["body/classes/UpdateSectionDto.html",[0,0.304,2,1.477,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.052,60,0.213,67,0.01,68,0.012,69,0.01,76,2.419,824,3.764,826,4.722,1118,2.633,1153,3.177,1286,4.723,1293,4.722,1477,5.243,1478,6.034]],["title/classes/UpdateTicketDto.html",[0,0.2,1395,2.642]],["body/classes/UpdateTicketDto.html",[0,0.304,2,1.477,3,0.213,4,0.189,5,0.189,18,0.014,51,0.278,57,1.052,60,0.213,67,0.01,68,0.012,69,0.01,76,2.419,841,3.764,843,4.722,1118,2.633,1153,3.177,1395,4.723,1400,4.722,1479,5.243,1480,6.034]],["title/classes/UpdateUserDataDto.html",[0,0.2,1481,2.642]],["body/classes/UpdateUserDataDto.html",[0,0.299,2,1.452,3,0.209,4,0.186,5,0.186,18,0.014,51,0.275,57,1.034,60,0.209,64,1.745,67,0.01,68,0.012,69,0.01,76,2.379,504,2.029,598,3.293,606,3.955,691,3.124,1118,2.589,1152,5.155,1153,3.693,1154,5.155,1481,4.676,1482,5.155,1483,5.155]],["title/classes/User.html",[0,0.2,504,1.356]],["body/classes/User.html",[0,0.171,2,0.832,3,0.12,4,0.106,5,0.106,7,0.405,8,1.732,17,0.94,18,0.014,19,1.898,20,1.724,21,3.709,26,1.825,28,0.664,30,3.216,31,3.91,32,1.045,38,3.247,51,0.258,52,4,53,1.874,54,1.887,55,0.896,56,2.562,57,0.593,58,2.564,59,1.499,60,0.219,62,2.505,63,3.797,64,1,67,0.006,68,0.008,69,0.006,277,3.247,279,2.595,286,3.038,287,3.038,292,2.121,504,2.41,667,3.793,676,5.514,678,3.549,680,3.549,682,4.086,691,3.271,710,3.811,804,3.462,831,3.649,832,2.859,866,3.247,870,3.497,882,3.497,896,3.497,897,2.954,905,4.231,906,4.231,1215,3.497,1373,5.354,1422,2.267,1445,2.442,1484,2.267,1485,3.4,1486,3.4,1487,3.4,1488,3.4,1489,3.4,1490,3.4,1491,3.4,1492,3.4,1493,3.4,1494,3.4,1495,3.4,1496,3.4,1497,3.4,1498,4.231,1499,3.4,1500,2.954]],["title/controllers/UsersController.html",[70,1.256,1501,2.846]],["body/controllers/UsersController.html",[0,0.148,3,0.104,4,0.092,5,0.092,7,0.351,9,1.225,17,0.967,18,0.015,19,0.776,20,1.519,26,1.819,28,0.846,32,0.921,51,0.278,57,0.514,59,0.776,60,0.104,67,0.005,68,0.008,69,0.005,70,0.934,72,0.934,74,1.551,75,1.29,77,3.819,78,3.408,79,2.094,80,2.434,84,3.108,88,3.056,89,1.964,90,2.434,94,1.708,96,1.826,98,2.146,100,3.791,102,2.234,104,2.434,107,3.221,111,1.838,118,2.434,119,2.306,123,2.624,124,1.635,125,1.635,128,0.494,132,2.759,133,2.759,134,3.258,136,2.624,137,3.221,138,3.425,139,3.258,140,2.575,141,1.476,142,3.258,148,1.134,149,1.551,150,1.551,151,1.635,154,1.344,155,1.048,156,3.108,157,2.624,158,3.108,159,2.309,160,2.575,162,1.634,165,2.017,166,1.73,167,1.838,424,1.838,500,3.819,501,1.964,504,2.602,506,1.635,508,1.964,511,3.493,602,4.972,655,2.908,691,1.551,698,4.137,1115,1.964,1279,2.56,1387,2.56,1388,2.56,1481,4.137,1501,3.15,1502,2.56,1503,3.811,1504,4.386,1505,4.386,1506,2.946,1507,4.386,1508,2.946,1509,4.386,1510,4.386,1511,2.946,1512,2.946,1513,2.946,1514,2.946,1515,2.946,1516,2.946,1517,2.946,1518,2.946,1519,2.946,1520,2.946,1521,2.946,1522,2.946,1523,2.946,1524,2.946,1525,2.946,1526,2.56,1527,2.306,1528,2.56,1529,2.56,1530,2.56,1531,2.946,1532,2.946,1533,2.946,1534,2.946,1535,2.946,1536,2.946,1537,2.946,1538,2.946,1539,2.946,1540,2.946,1541,2.946,1542,2.946]],["title/modules/UsersModule.html",[175,1.083,524,2.327]],["body/modules/UsersModule.html",[0,0.252,3,0.176,4,0.157,5,0.157,18,0.014,28,0.682,51,0.301,53,1.927,55,1.319,60,0.176,67,0.009,68,0.011,69,0.009,72,2.005,128,0.839,175,1.894,177,2.093,178,2.093,179,2.284,180,2.284,181,2.093,182,3.161,183,3.161,189,2.884,190,2.284,191,2.185,193,2.508,194,2.636,197,2.779,504,1.713,519,3.945,524,4.571,638,5.494,655,4.494,1422,4.216,1424,4.351,1501,4.977,1526,4.351,1527,3.919,1543,4.351,1544,4.351,1545,4.351,1546,5.007,1547,5.007,1548,5.007]],["title/injectables/UsersService.html",[199,0.836,655,2.2]],["body/injectables/UsersService.html",[0,0.125,3,0.088,4,0.078,5,0.078,7,0.297,9,1.341,17,0.793,18,0.015,19,1.245,28,0.866,32,0.974,51,0.258,55,0.656,59,0.656,60,0.088,64,1.933,67,0.004,68,0.007,69,0.004,75,1.135,79,1.189,94,1.87,96,1.87,98,2.67,102,2.049,128,0.417,146,1.086,148,0.958,162,1.674,165,2.049,199,0.814,200,0.958,202,4.264,203,2.957,209,1.135,211,2.954,217,3.33,226,2.91,227,1.189,228,1.382,232,1.189,233,3.394,236,3.528,237,2.774,238,2.634,241,2.948,242,1.382,246,3.578,247,3.382,248,3.569,249,1.462,250,1.66,251,1.66,252,1.382,254,2.954,504,2.682,598,2.954,602,4.718,606,1.66,655,2.142,660,4.769,667,3.549,669,3.02,673,2.163,679,2.163,681,2.163,683,2.163,686,3.353,687,2.163,688,3.353,691,3.208,693,3.353,695,4.106,698,3.549,1432,3.353,1445,1.788,1449,2.163,1450,5.295,1455,3.353,1459,4.106,1481,3.549,1503,3.353,1527,1.948,1528,2.163,1529,2.163,1530,2.163,1549,2.163,1550,4.725,1551,3.858,1552,3.858,1553,5.322,1554,3.858,1555,3.858,1556,4.725,1557,2.489,1558,2.489,1559,2.489,1560,2.489,1561,3.858,1562,2.489,1563,3.858,1564,2.489,1565,2.489,1566,3.858,1567,2.489,1568,3.858,1569,2.489,1570,2.489,1571,2.489,1572,2.489,1573,2.489,1574,4.725,1575,3.858,1576,3.858,1577,3.858,1578,3.858,1579,3.858,1580,2.489,1581,3.858,1582,2.489,1583,2.489,1584,2.489,1585,2.489,1586,2.489,1587,2.489,1588,2.489,1589,2.489]],["title/coverage.html",[1590,4.243]],["body/coverage.html",[0,0.401,1,1.221,5,0.088,6,3.031,17,0.349,18,0.014,65,2.01,67,0.005,68,0.007,69,0.005,70,2.254,71,2.01,73,2.431,82,1.746,117,1.866,143,1.746,149,1.473,150,2.222,175,0.765,181,1.17,199,1.591,201,2.431,212,1.746,238,1.122,269,1.276,270,3.031,284,1.336,291,1.221,293,1.866,295,2.01,296,2.431,299,1.746,313,1.866,316,1.746,336,2.431,369,1.473,370,3.031,404,2.01,406,2.01,407,2.431,410,1.746,422,1.866,427,1.746,445,2.431,491,2.01,492,2.431,502,1.553,504,1.738,506,1.553,525,1.866,550,2.01,575,2.431,576,2.01,577,2.431,598,1.553,605,2.01,607,2.01,608,2.19,610,2.01,635,1.866,636,1.866,652,2.431,655,1.553,698,1.866,699,2.431,700,2.431,718,2.431,719,3.303,734,2.431,735,3.303,744,2.431,745,3.303,763,1.746,764,2.431,765,3.648,804,1.473,808,1.336,821,2.01,822,2.431,823,3.303,824,1.746,825,2.431,826,3.303,841,1.746,842,2.431,843,3.303,894,3.303,916,2.19,937,3.031,958,1.866,960,2.01,961,2.431,977,1.866,983,1.866,986,1.746,1007,2.431,1115,1.866,1116,3.303,1120,3.303,1131,2.19,1132,2.19,1142,2.431,1144,2.431,1155,2.19,1157,2.431,1168,2.19,1182,2.431,1209,2.813,1222,1.866,1224,2.01,1225,2.431,1227,1.866,1231,1.746,1245,2.431,1259,2.813,1267,2.01,1269,2.01,1270,2.431,1286,1.866,1291,1.746,1307,2.431,1338,2.813,1369,2.01,1371,2.01,1372,2.431,1395,1.866,1398,1.746,1422,1.866,1425,2.431,1466,2.431,1468,2.431,1470,2.431,1472,2.431,1474,2.431,1477,2.431,1479,2.431,1481,1.866,1482,2.431,1483,2.431,1484,2.813,1501,2.01,1502,2.431,1549,2.431,1590,2.19,1591,2.798,1592,2.798,1593,2.798,1594,8.317,1595,6.817,1596,6.817,1597,7.922,1598,5.08,1599,7.318,1600,6.381,1601,4.22,1602,5.656,1603,3.667,1604,6.07,1605,4.22,1606,3.303,1607,4.22,1608,2.798,1609,2.798,1610,2.798]],["title/dependencies.html",[178,1.994,1611,3.303]],["body/dependencies.html",[0,0.307,18,0.015,55,1.248,57,0.826,59,1.248,67,0.008,68,0.011,69,0.008,123,2.373,128,0.794,130,4.117,131,4.778,178,1.981,531,3.403,534,4.117,537,3.708,555,4.117,619,3.708,640,2.956,642,3.403,669,3.708,715,2.263,921,4.117,927,4.117,1030,4.117,1031,4.117,1129,5.286,1149,4.117,1167,4.117,1612,4.738,1613,6.753,1614,4.738,1615,4.738,1616,4.738,1617,4.738,1618,4.738,1619,4.738,1620,4.738,1621,4.738,1622,4.738,1623,4.738,1624,4.738,1625,6.753,1626,4.738,1627,4.738,1628,6.104,1629,4.738,1630,4.738,1631,4.738,1632,4.738,1633,4.738,1634,4.738,1635,4.738,1636,4.738,1637,4.738,1638,4.738,1639,4.738,1640,4.738,1641,4.738,1642,4.738,1643,4.738,1644,4.738,1645,4.738,1646,4.738,1647,4.738,1648,4.738,1649,4.738,1650,4.738,1651,4.738,1652,4.738,1653,4.738,1654,4.738,1655,4.738,1656,4.738,1657,4.738,1658,4.738,1659,4.738,1660,4.738,1661,4.738]],["title/miscellaneous/enumerations.html",[1662,1.833,1663,4.144]],["body/miscellaneous/enumerations.html",[0,0.312,1,2.707,7,0.579,17,0.774,18,0.014,67,0.008,68,0.011,69,0.008,229,4.855,504,2.122,676,4.455,830,4.855,849,4.855,850,4.491,874,4.855,877,4.8,880,4.855,916,3.802,1189,4.855,1209,3.239,1213,5.39,1218,5.634,1219,5.634,1220,5.634,1259,3.239,1338,3.239,1364,5.39,1365,5.39,1366,5.39,1367,5.39,1484,3.239,1498,5.39,1662,2.696,1663,4.221,1664,3.802,1665,4.858,1666,3.802,1667,5.348,1668,3.802,1669,7.178]],["title/miscellaneous/functions.html",[1662,1.833,1670,4.144]],["body/miscellaneous/functions.html",[7,0.753,18,0.013,67,0.011,68,0.013,69,0.011,181,3.205,1606,4.948,1662,3.509,1670,5.494,1671,5.494]],["title/index.html",[7,0.394,1672,3.303,1673,3.303]],["body/index.html",[4,0.158,18,0.014,26,1.192,67,0.009,68,0.011,69,0.009,1590,3.956,1674,5.055,1675,5.055,1676,6.361,1677,5.055,1678,5.055,1679,5.055,1680,5.055,1681,5.055,1682,5.055,1683,6.96,1684,5.055,1685,5.055,1686,5.055,1687,5.055,1688,7.8,1689,5.055,1690,5.055,1691,5.055,1692,7.685,1693,5.055,1694,5.055,1695,6.361,1696,5.055,1697,5.055,1698,5.055,1699,5.055,1700,6.361,1701,6.361,1702,5.055,1703,5.055,1704,5.055,1705,6.361,1706,6.361,1707,5.055,1708,5.055,1709,5.055,1710,5.055,1711,5.055,1712,4.392,1713,5.055,1714,5.055,1715,5.055,1716,5.055,1717,5.055,1718,5.055,1719,5.055,1720,5.055,1721,5.055,1722,5.055,1723,5.055,1724,5.055,1725,5.055,1726,5.055,1727,5.055,1728,5.055,1729,5.055,1730,5.055]],["title/modules.html",[177,2.266]],["body/modules.html",[18,0.012,67,0.01,68,0.012,69,0.01,176,3.687,177,2.312,188,3.45,329,3.45,438,3.45,515,3.972,519,3.45,520,3.45,521,3.687,522,3.687,523,3.687,524,3.247,1712,7.098,1731,8.168,1732,8.168,1733,8.168]],["title/overview.html",[1734,4.71]],["body/overview.html",[2,0.86,18,0.014,42,2.063,67,0.006,68,0.009,69,0.006,72,1.114,143,4.437,175,0.96,176,4.845,177,1.469,178,1.469,179,1.602,180,1.602,181,1.469,182,1.602,183,1.602,184,3.052,185,3.052,186,3.052,187,3.052,188,4.437,189,2.273,190,1.602,191,1.533,200,1.352,212,4.437,316,4.437,329,4.437,330,3.052,331,3.052,332,3.052,427,4.437,438,4.437,439,3.052,440,3.052,441,3.052,502,3.948,515,5.811,516,3.052,517,3.052,518,3.052,519,4.677,520,4.437,521,4.611,522,4.611,523,5.185,524,4.176,525,3.862,632,3.052,633,3.052,634,3.052,635,3.862,636,3.862,655,3.948,911,3.052,912,3.052,913,3.052,986,4.437,1001,3.052,1002,3.052,1003,3.052,1155,2.749,1231,4.437,1239,3.052,1240,3.052,1241,3.052,1291,4.437,1301,3.052,1302,3.052,1303,3.052,1398,4.437,1412,3.052,1413,3.052,1414,3.052,1543,3.052,1544,3.052,1545,3.052,1734,3.052,1735,3.513,1736,3.513,1737,3.513,1738,3.513]],["title/miscellaneous/typealiases.html",[1662,1.833,1739,4.769]],["body/miscellaneous/typealiases.html",[6,4.19,7,0.695,17,0.728,18,0.012,61,5.435,67,0.01,68,0.012,69,0.01,270,4.19,290,4.988,370,4.19,402,5.435,937,4.19,957,4.988,1209,3.89,1217,4.988,1259,3.89,1266,5.435,1338,3.89,1363,5.435,1445,4.988,1484,3.89,1662,3.239,1664,4.566,1666,4.566,1667,4.566,1668,4.566,1740,5.834,1741,5.07,1742,5.07,1743,5.07,1744,5.07]],["title/miscellaneous/variables.html",[1662,1.833,1745,4.144]],["body/miscellaneous/variables.html",[6,3.388,7,0.562,17,0.759,18,0.014,19,1.603,65,4.371,66,4.099,67,0.008,68,0.011,69,0.008,149,3.205,150,2.484,162,1.243,175,1.663,270,3.388,293,4.058,294,4.099,370,3.388,404,4.371,405,4.099,500,3.574,676,4.84,789,2.943,937,3.388,958,4.058,959,4.099,1120,3.692,1131,4.764,1132,3.692,1133,5.274,1134,3.692,1135,3.692,1168,4.764,1209,3.145,1215,5.733,1222,4.058,1223,4.099,1259,3.145,1267,4.371,1268,4.099,1338,3.145,1369,4.371,1370,4.099,1422,4.058,1484,3.145,1500,4.099,1603,5.856,1606,3.692,1662,2.618,1664,3.692,1666,3.692,1667,3.692,1668,3.692,1669,6.937,1671,4.099,1741,4.099,1742,4.099,1743,4.099,1744,4.099,1745,4.099,1746,4.717,1747,6.087,1748,4.717]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1594,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1612,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1635,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1634,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":810,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0.6.3",{"_index":1614,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":803,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0/1",{"_index":1597,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1601,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1605,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1607,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1602,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1604,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1600,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1595,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1596,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1598,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1608,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":785,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["08",{"_index":853,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["1",{"_index":42,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["1.1.4",{"_index":1623,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1643,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":1630,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1626,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1628,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1637,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1736,"title":{},"body":{"overview.html":{}}}],["11",{"_index":1735,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1737,"title":{},"body":{"overview.html":{}}}],["15t15:35:00.000z",{"_index":1196,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["16t15:35:00.000z",{"_index":800,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["1700",{"_index":834,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["18t15:35:00.000z",{"_index":1199,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["1992",{"_index":43,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["2.1.4",{"_index":1621,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1647,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":813,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["2000",{"_index":852,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2016",{"_index":885,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2021",{"_index":784,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["21t09:15:00.000z",{"_index":786,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["23",{"_index":790,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["27",{"_index":1738,"title":{},"body":{"overview.html":{}}}],["3",{"_index":1192,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["3.0.2",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["3.4.3",{"_index":1632,"title":{},"body":{"dependencies.html":{}}}],["31t00:00:00.000z",{"_index":854,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["380951234567",{"_index":905,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["4",{"_index":762,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4)@apiproperty({example",{"_index":757,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4.0.0",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1646,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1622,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":280,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["5.0.1",{"_index":1629,"title":{},"body":{"dependencies.html":{}}}],["5.12.9",{"_index":1648,"title":{},"body":{"dependencies.html":{}}}],["6.4.6",{"_index":1644,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1641,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1619,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1615,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":1618,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1613,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":276,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["8,12",{"_index":717,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8,12}$')@apiproperty({example",{"_index":707,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8.3.2",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":706,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["9)@apiproperty({example",{"_index":862,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["90",{"_index":836,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["9065",{"_index":807,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["__v",{"_index":247,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["a.airplane.amountofseat",{"_index":1081,"title":{},"body":{"injectables/FlightsService.html":{}}}],["a.airplane.sections.foreach((s",{"_index":1083,"title":{},"body":{"injectables/FlightsService.html":{}}}],["a1b2@c3d",{"_index":710,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["add(3",{"_index":1071,"title":{},"body":{"injectables/FlightsService.html":{}}}],["admin",{"_index":1498,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["adult",{"_index":880,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["aerospatiale/alenia",{"_index":274,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airline",{"_index":1,"title":{"classes/Airline.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["airline'})@apicreatedresponse({description",{"_index":85,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@apiokresponse({description",{"_index":99,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@prop({required",{"_index":37,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({trim",{"_index":45,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({unique",{"_index":29,"title":{},"body":{"classes/Airline.html":{}}}],["airline.airlinenameeng",{"_index":257,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameru",{"_index":259,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameua",{"_index":260,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptioneng",{"_index":262,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionru",{"_index":264,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionua",{"_index":266,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.dto",{"_index":147,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{}}}],["airline.dto.ts",{"_index":719,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["airline.dto.ts:12",{"_index":724,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:21",{"_index":721,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:30",{"_index":722,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:40",{"_index":729,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:50",{"_index":726,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:60",{"_index":727,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.name",{"_index":198,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airline.save",{"_index":267,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedocument",{"_index":61,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"miscellaneous/typealiases.html":{}}}],["airlinedto",{"_index":95,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameeng",{"_index":256,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameru",{"_index":258,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameua",{"_index":235,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptioneng",{"_index":261,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionru",{"_index":263,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionua",{"_index":265,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlineid",{"_index":220,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinemodel",{"_index":214,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinenameeng",{"_index":10,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameru",{"_index":11,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameua",{"_index":12,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["airlines",{"_index":25,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airlines'})@apiokresponse({description",{"_index":108,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airlines.controller",{"_index":195,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airlines.service",{"_index":144,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{}}}],["airlines/airlines.module",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["airlineschema",{"_index":65,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airlinescontroller",{"_index":71,"title":{"controllers/AirlinesController.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"coverage.html":{}}}],["airlinesmodule",{"_index":176,"title":{"modules/AirlinesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["airlinesservice",{"_index":143,"title":{"injectables/AirlinesService.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"coverage.html":{},"overview.html":{}}}],["airline})@apibadrequestresponse({description",{"_index":87,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@apiparam({name",{"_index":101,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airplane",{"_index":269,"title":{"classes/Airplane.html":{}},"body":{"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["airplane'})@apicreatedresponse({description",{"_index":300,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane'})@apiokresponse({description",{"_index":306,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane.airplanename",{"_index":366,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplane.amountofseat",{"_index":1456,"title":{},"body":{"injectables/TicketsService.html":{}}}],["airplane.dto",{"_index":319,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{}}}],["airplane.dto.ts",{"_index":735,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["airplane.dto.ts:21",{"_index":736,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:26",{"_index":738,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:35",{"_index":740,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.name",{"_index":335,"title":{},"body":{"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{}}}],["airplane.save",{"_index":367,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanedocument",{"_index":290,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["airplanedto",{"_index":305,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanedto.airplanename",{"_index":365,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplaneid",{"_index":349,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplanemodel",{"_index":344,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanename",{"_index":271,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["airplanes",{"_index":297,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanes'})@apiokresponse({description",{"_index":309,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplanes.controller",{"_index":334,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["airplanes.service",{"_index":317,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{}}}],["airplanes/airplanes.module",{"_index":547,"title":{},"body":{"modules/AppModule.html":{}}}],["airplaneschema",{"_index":293,"title":{},"body":{"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airplanescontroller",{"_index":295,"title":{"controllers/AirplanesController.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"coverage.html":{}}}],["airplanesmodule",{"_index":329,"title":{"modules/AirplanesModule.html":{}},"body":{"modules/AirplanesModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airplanesservice",{"_index":316,"title":{"injectables/AirplanesService.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"coverage.html":{},"overview.html":{}}}],["airplane})@apibadrequestresponse({description",{"_index":301,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@apiparam({name",{"_index":307,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airport",{"_index":369,"title":{"classes/Airport.html":{}},"body":{"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"coverage.html":{}}}],["airport'})@apicreatedresponse({description",{"_index":411,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@apiokresponse({description",{"_index":416,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@prop({required",{"_index":386,"title":{},"body":{"classes/Airport.html":{},"classes/Flight.html":{}}}],["airport'})@prop({trim",{"_index":382,"title":{},"body":{"classes/Airport.html":{}}}],["airport.airportcountryeng",{"_index":472,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryru",{"_index":476,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryua",{"_index":474,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameeng",{"_index":478,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameru",{"_index":482,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameua",{"_index":480,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttowneng",{"_index":484,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownru",{"_index":488,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownua",{"_index":486,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.dto",{"_index":430,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{}}}],["airport.dto.ts",{"_index":745,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["airport.dto.ts:16",{"_index":752,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:25",{"_index":750,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:34",{"_index":751,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:41",{"_index":758,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:50",{"_index":749,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:59",{"_index":746,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:68",{"_index":747,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:77",{"_index":755,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:86",{"_index":753,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:95",{"_index":754,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.iata",{"_index":470,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.name",{"_index":444,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airport.save",{"_index":489,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportcountryeng",{"_index":371,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryru",{"_index":372,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryua",{"_index":373,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportdocument",{"_index":402,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"miscellaneous/typealiases.html":{}}}],["airportdto",{"_index":415,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airportdto.airportcountryeng",{"_index":471,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryru",{"_index":475,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryua",{"_index":473,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameeng",{"_index":477,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameru",{"_index":481,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameua",{"_index":479,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttowneng",{"_index":483,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownru",{"_index":487,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownua",{"_index":485,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.iata",{"_index":466,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportid",{"_index":458,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportmodel",{"_index":453,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportnameeng",{"_index":374,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameru",{"_index":375,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameua",{"_index":376,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airports",{"_index":408,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airports'})@apiokresponse({description",{"_index":419,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airports.controller",{"_index":443,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airports.service",{"_index":428,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{}}}],["airports/airports.module",{"_index":542,"title":{},"body":{"modules/AppModule.html":{}}}],["airportschema",{"_index":404,"title":{},"body":{"classes/Airport.html":{},"modules/AirportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airportscontroller",{"_index":406,"title":{"controllers/AirportsController.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"coverage.html":{}}}],["airportsmodule",{"_index":438,"title":{"modules/AirportsModule.html":{}},"body":{"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airportsservice",{"_index":427,"title":{"injectables/AirportsService.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"coverage.html":{},"overview.html":{}}}],["airporttowneng",{"_index":377,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownru",{"_index":378,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownua",{"_index":379,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airport})@apibadrequestresponse({description",{"_index":412,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@apiparam({name",{"_index":417,"title":{},"body":{"controllers/AirportsController.html":{}}}],["aliases",{"_index":1740,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":239,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["amazing",{"_index":1713,"title":{},"body":{"index.html":{}}}],["amount",{"_index":281,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["amountofseat",{"_index":272,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"injectables/TicketsService.html":{}}}],["apibadrequestresponse",{"_index":132,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":133,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apicookieauth",{"_index":134,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":135,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["apiforbiddenresponse",{"_index":136,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":137,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":138,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":139,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":84,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":140,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":56,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["apiproperty({example",{"_index":21,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["apipropertyoptional",{"_index":815,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{}}}],["apipropertyoptional({example",{"_index":949,"title":{},"body":{"classes/Flight.html":{},"classes/Ticket.html":{}}}],["apiresponse",{"_index":1290,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags",{"_index":141,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags('airlines",{"_index":152,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apitags('airplanes",{"_index":320,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["apitags('airports",{"_index":431,"title":{},"body":{"controllers/AirportsController.html":{}}}],["apitags('app",{"_index":509,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('authentication",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('flights",{"_index":991,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('seats",{"_index":1235,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('sections",{"_index":1294,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags('tickets",{"_index":1401,"title":{},"body":{"controllers/TicketsController.html":{}}}],["apitags('users",{"_index":1531,"title":{},"body":{"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":142,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["app",{"_index":1690,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":539,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":538,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":536,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":491,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1682,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":515,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":525,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arr",{"_index":1078,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arr.push(a",{"_index":1087,"title":{},"body":{"injectables/FlightsService.html":{}}}],["array.from(new",{"_index":1090,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arraynotempty",{"_index":1202,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["arrayunique",{"_index":741,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["arrival",{"_index":781,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["arrivalairport",{"_index":766,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["arrivalairport.airportnameeng",{"_index":1107,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameru",{"_index":1108,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameua",{"_index":1106,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttowneng",{"_index":1111,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownru",{"_index":1112,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownua",{"_index":1110,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.iata",{"_index":1109,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivaltime",{"_index":767,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["async",{"_index":203,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["atr",{"_index":275,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["auth",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":643,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":151,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"guards/RolesGuard.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.decorator.ts",{"_index":1603,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":508,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1116,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":541,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":503,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":507,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/roles.guard",{"_index":551,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":576,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1117,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1119,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1143,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":519,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1723,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":502,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":233,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["b2a3#d1c",{"_index":708,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["baby",{"_index":1366,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["backers",{"_index":1714,"title":{},"body":{"index.html":{}}}],["bad",{"_index":88,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["badrequest",{"_index":322,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/SectionsController.html":{}}}],["badrequest'})@apiunauthorizedresponse({description",{"_index":302,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/SectionsController.html":{}}}],["badrequestexception",{"_index":355,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{}}}],["badrequestexception('airplane",{"_index":364,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["badrequestexception('flight",{"_index":1035,"title":{},"body":{"injectables/FlightsService.html":{}}}],["baggage",{"_index":768,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["bcrypt",{"_index":669,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1579,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(pass",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":687,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.newpassword",{"_index":1587,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.password",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{}}}],["birthday",{"_index":844,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["birthday'})@prop({required",{"_index":1339,"title":{},"body":{"classes/Ticket.html":{}}}],["body",{"_index":123,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["booked",{"_index":877,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":792,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":181,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["break",{"_index":1088,"title":{},"body":{"injectables/FlightsService.html":{}}}],["browse",{"_index":1733,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1731,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1677,"title":{},"body":{"index.html":{}}}],["business",{"_index":1189,"title":{},"body":{"classes/SearchFlightDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["cache",{"_index":555,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":527,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":528,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.registerasync",{"_index":556,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":1158,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1162,"title":{},"body":{"guards/RolesGuard.html":{}}}],["carryonbaggage",{"_index":769,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["catch",{"_index":249,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":1507,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":1504,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(@request",{"_index":1539,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1506,"title":{},"body":{"controllers/UsersController.html":{}}}],["changeuserpassword",{"_index":1550,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassword(userid",{"_index":1559,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassworddto",{"_index":698,"title":{"classes/ChangeUserPasswordDto.html":{}},"body":{"classes/ChangeUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changeuserpassworddto})@apicookieauth()@useguards(jwtauthguard)@patch('/changepassword",{"_index":1511,"title":{},"body":{"controllers/UsersController.html":{}}}],["child",{"_index":1365,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["citizenship",{"_index":857,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenship'})@prop({required",{"_index":1344,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenship'})@prop({trim",{"_index":1341,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenshipeng",{"_index":845,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipru",{"_index":846,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipua",{"_index":847,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["class",{"_index":0,"title":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["class'})@prop({required",{"_index":1260,"title":{},"body":{"classes/Section.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_airlinesmodule",{"_index":184,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_exports",{"_index":186,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_imports",{"_index":185,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_providers",{"_index":187,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule",{"_index":330,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_exports",{"_index":331,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_providers",{"_index":332,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airportsmodule",{"_index":439,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_exports",{"_index":441,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_providers",{"_index":440,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":516,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":517,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":518,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":632,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":633,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":634,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":911,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_exports",{"_index":913,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_filesmodule_providers",{"_index":912,"title":{},"body":{"modules/FilesModule.html":{},"overview.html":{}}}],["cluster_flightsmodule",{"_index":1001,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_exports",{"_index":1003,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_providers",{"_index":1002,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule",{"_index":1239,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_exports",{"_index":1241,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_providers",{"_index":1240,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule",{"_index":1301,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_exports",{"_index":1302,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_providers",{"_index":1303,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":1412,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":1414,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":1415,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":1413,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1543,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1544,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1545,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compression",{"_index":1636,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":562,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_limit",{"_index":565,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":563,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":529,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":552,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":530,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache_ttl",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":651,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":648,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('mongo_db_uri",{"_index":568,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":64,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":209,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(seat.name",{"_index":1253,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1572,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(airlinemodel",{"_index":210,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["constructor(airplanemodel",{"_index":342,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["constructor(airportmodel",{"_index":451,"title":{},"body":{"injectables/AirportsService.html":{}}}],["constructor(authservice",{"_index":1145,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(flightmodel",{"_index":1014,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(jwtservice",{"_index":1159,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(private",{"_index":154,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["constructor(seatmodel",{"_index":1247,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(sectionmodel",{"_index":1313,"title":{},"body":{"injectables/SectionsService.html":{}}}],["constructor(ticketmodel",{"_index":1431,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(usermodel",{"_index":1557,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":1122,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersservice",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":1165,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1174,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1173,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1175,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('airlines",{"_index":153,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["controller('airplanes",{"_index":321,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["controller('airports",{"_index":432,"title":{},"body":{"controllers/AirportsController.html":{}}}],["controller('auth",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('flights",{"_index":992,"title":{},"body":{"controllers/FlightsController.html":{}}}],["controller('seats",{"_index":1236,"title":{},"body":{"controllers/SeatsController.html":{}}}],["controller('sections",{"_index":1295,"title":{},"body":{"controllers/SectionsController.html":{}}}],["controller('tickets",{"_index":1402,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":1532,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":72,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1638,"title":{},"body":{"dependencies.html":{}}}],["cookieextractor",{"_index":1131,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":1183,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["country",{"_index":381,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["coverage",{"_index":1590,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":76,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["create(@body",{"_index":323,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["create(airlinedto",{"_index":81,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["create(airplanedto",{"_index":298,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["create(airportdto",{"_index":409,"title":{},"body":{"controllers/AirportsController.html":{}}}],["create(flightdto",{"_index":964,"title":{},"body":{"controllers/FlightsController.html":{}}}],["create(sectiondto",{"_index":1271,"title":{},"body":{"controllers/SectionsController.html":{}}}],["create(ticketdto",{"_index":1374,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createairline",{"_index":204,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairline(airlinedto",{"_index":215,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairlinedto",{"_index":82,"title":{"classes/CreateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["createairlinedto})@apicookieauth()@roles('admin')@useinterceptors(undefined)@post",{"_index":92,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["createairplane",{"_index":337,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplane(airplanedto",{"_index":345,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplanedto",{"_index":299,"title":{"classes/CreateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["createairplanedto})@apicookieauth()@roles('admin')@post",{"_index":303,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["createairport",{"_index":446,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairport(airportdto",{"_index":454,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairportdto",{"_index":410,"title":{"classes/CreateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["createairportdto})@apicookieauth()@roles('admin')@post",{"_index":413,"title":{},"body":{"controllers/AirportsController.html":{}}}],["created",{"_index":86,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["created'})@useguards(jwtauthguard)@apicookieauth()@post('logout",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["createfile",{"_index":917,"title":{},"body":{"injectables/FilesService.html":{}}}],["createfile(folder",{"_index":918,"title":{},"body":{"injectables/FilesService.html":{}}}],["createflight",{"_index":1008,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflight(flightdto",{"_index":1017,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflightdto",{"_index":763,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["createflightdto})@apicookieauth()@roles('admin')@post",{"_index":967,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createseatdto",{"_index":821,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["createsection",{"_index":1308,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsection(sectiondto",{"_index":1316,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsectiondto",{"_index":824,"title":{"classes/CreateSectionDto.html":{}},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["createsectiondto})@apicookieauth()@roles('admin')@post",{"_index":1274,"title":{},"body":{"controllers/SectionsController.html":{}}}],["createticket",{"_index":1426,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticket(ticketdto",{"_index":1435,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticketdto",{"_index":841,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createticketdto})@apiunauthorizedresponse({description",{"_index":1377,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createuser",{"_index":1551,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(userdto",{"_index":1561,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":598,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@post('signup",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1639,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":1642,"title":{},"body":{"dependencies.html":{}}}],["data",{"_index":107,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data'})@apinotfoundresponse({description",{"_index":112,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data'})@apiokresponse({description",{"_index":118,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data.dto",{"_index":1528,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.dto.ts",{"_index":1483,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["declarations",{"_index":180,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":20,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles",{"_index":1169,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":1215,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":77,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":172,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["delete(@param('id",{"_index":173,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(@request",{"_index":1541,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":97,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(req",{"_index":1513,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteairline",{"_index":205,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairline(airlineid",{"_index":218,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairplane",{"_index":338,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairplane(airplaneid",{"_index":347,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairport",{"_index":447,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteairport(airportid",{"_index":456,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteflight",{"_index":1009,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deleteflight(flightid",{"_index":1019,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deletesection",{"_index":1309,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deletesection(sectionid",{"_index":1318,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deleteuser",{"_index":1552,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1563,"title":{},"body":{"injectables/UsersService.html":{}}}],["departure",{"_index":798,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["departureairport",{"_index":770,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["departureairport.airportnameeng",{"_index":1096,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameru",{"_index":1097,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameua",{"_index":1095,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttowneng",{"_index":1100,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownru",{"_index":1101,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownua",{"_index":1099,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.iata",{"_index":1098,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departuretime",{"_index":771,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["dependencies",{"_index":178,"title":{"dependencies.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":26,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"index.html":{}}}],["descriptioneng",{"_index":13,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionru",{"_index":14,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionua",{"_index":15,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["development",{"_index":1691,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1367,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["dmitry",{"_index":865,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{}}}],["document",{"_index":58,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["document'})@prop({required",{"_index":1346,"title":{},"body":{"classes/Ticket.html":{}}}],["documentation",{"_index":1591,"title":{},"body":{"coverage.html":{}}}],["dto/change",{"_index":1529,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":146,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["dto/search",{"_index":990,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dto/update",{"_index":148,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":896,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["e2e",{"_index":1702,"title":{},"body":{"index.html":{}}}],["each",{"_index":1187,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["economy",{"_index":830,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1678,"title":{},"body":{"index.html":{}}}],["efremov",{"_index":869,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["email",{"_index":667,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["endof('day",{"_index":1077,"title":{},"body":{"injectables/FlightsService.html":{}}}],["english",{"_index":27,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["entities/airlines.entity",{"_index":145,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{}}}],["entities/airplane.entity",{"_index":318,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{}}}],["entities/airport.entity",{"_index":429,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{}}}],["entities/flights.entity",{"_index":988,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{}}}],["entities/seat.entity",{"_index":1233,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["entities/section.entity",{"_index":839,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{}}}],["entities/ticket.entity",{"_index":889,"title":{},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/users.entity",{"_index":1527,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":831,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1663,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":832,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["env",{"_index":1640,"title":{},"body":{"dependencies.html":{}}}],["envfilepath",{"_index":553,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["err",{"_index":250,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":933,"title":{},"body":{"injectables/FilesService.html":{}}}],["example",{"_index":62,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["exchange",{"_index":772,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["exchange'})@prop",{"_index":950,"title":{},"body":{"classes/Flight.html":{}}}],["exec",{"_index":236,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":1163,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exists",{"_index":240,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["expiresin",{"_index":650,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":60,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":183,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":131,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":83,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["extends",{"_index":1118,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["false",{"_index":248,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["female",{"_index":1364,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":932,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname.split('.').pop",{"_index":923,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileextension",{"_index":922,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":129,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["filename",{"_index":243,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{}}}],["filepath",{"_index":925,"title":{},"body":{"injectables/FilesService.html":{}}}],["files.service",{"_index":915,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":546,"title":{},"body":{"modules/AppModule.html":{}}}],["files/files.service",{"_index":230,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["filesmodule",{"_index":188,"title":{"modules/FilesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":212,"title":{"injectables/FilesService.html":{}},"body":{"injectables/AirlinesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":252,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["find(@request",{"_index":1406,"title":{},"body":{"controllers/TicketsController.html":{}}}],["find(req",{"_index":1382,"title":{},"body":{"controllers/TicketsController.html":{}}}],["findall",{"_index":78,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(airlineid",{"_index":253,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyid(airplane._id",{"_index":359,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airplaneid",{"_index":362,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airportid",{"_index":468,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyid(flight.airplane",{"_index":1453,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(flightid",{"_index":1037,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyid(sectionid",{"_index":1332,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyid(ticketdto.flight",{"_index":1448,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketdto.user",{"_index":1451,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketid",{"_index":1458,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(userid",{"_index":1459,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["findbyidanddelete(airlineid",{"_index":268,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyidanddelete(airplaneid",{"_index":368,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyidanddelete(airportid",{"_index":490,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyidanddelete(flightid",{"_index":1063,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyidanddelete(sectionid",{"_index":1337,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyidanddelete(userid",{"_index":1588,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":79,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":167,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":111,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["first",{"_index":866,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["firstdeptime",{"_index":1184,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["firstname",{"_index":678,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["flagship",{"_index":44,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["flight",{"_index":808,"title":{"classes/Flight.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["flight'})@apicreatedresponse({description",{"_index":965,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@apiokresponse({description",{"_index":970,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@prop({required",{"_index":1349,"title":{},"body":{"classes/Ticket.html":{}}}],["flight.airline",{"_index":1040,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.airplane",{"_index":1042,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivalairport",{"_index":1044,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivaltime",{"_index":1046,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.baggage",{"_index":1048,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.carryonbaggage",{"_index":1050,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departureairport",{"_index":1052,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departuretime",{"_index":1054,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.dto",{"_index":989,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts",{"_index":765,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:19",{"_index":809,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:26",{"_index":1194,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:27",{"_index":777,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:35",{"_index":779,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:43",{"_index":799,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:45",{"_index":1201,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:51",{"_index":801,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:54",{"_index":1185,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:59",{"_index":782,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:64",{"_index":1190,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":788,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:72",{"_index":814,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:74",{"_index":1193,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:78",{"_index":791,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:83",{"_index":796,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:87",{"_index":805,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:91",{"_index":811,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.exchange",{"_index":1056,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.flightname",{"_index":1057,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.name",{"_index":1006,"title":{},"body":{"modules/FlightsModule.html":{},"modules/TicketsModule.html":{}}}],["flight.refund",{"_index":1059,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.save",{"_index":1062,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.taxa",{"_index":1061,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdocument",{"_index":957,"title":{},"body":{"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["flightdto",{"_index":969,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flightdto.airline",{"_index":1039,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane",{"_index":1041,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport",{"_index":1043,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivaltime",{"_index":1045,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.baggage",{"_index":1047,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.carryonbaggage",{"_index":1049,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.class",{"_index":1085,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.class.length",{"_index":1080,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.count",{"_index":1082,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport",{"_index":1051,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departuretime",{"_index":1053,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.exchange",{"_index":1055,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.firstdeptime",{"_index":1065,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.flightname",{"_index":1034,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.refund",{"_index":1058,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.seconddeptime",{"_index":1066,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.taxa",{"_index":1060,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightid",{"_index":1021,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightmodel",{"_index":1016,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["flightname",{"_index":773,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["flights",{"_index":962,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apicreatedresponse({description",{"_index":978,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights'})@apiokresponse({description",{"_index":973,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":1005,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.service",{"_index":987,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":544,"title":{},"body":{"modules/AppModule.html":{}}}],["flightschema",{"_index":958,"title":{},"body":{"classes/Flight.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["flightscontroller",{"_index":960,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":520,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["flightsservice",{"_index":986,"title":{"injectables/FlightsService.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"coverage.html":{},"overview.html":{}}}],["flight})@apibadrequestresponse({description",{"_index":966,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@apiparam({name",{"_index":971,"title":{},"body":{"controllers/FlightsController.html":{}}}],["folder",{"_index":229,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{}}}],["forbidden",{"_index":159,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apibadrequestresponse({description",{"_index":1378,"title":{},"body":{"controllers/TicketsController.html":{}}}],["forbidden'})@apibody({type",{"_index":91,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["forbidden'})@apicookieauth()@roles('admin')@delete(':id",{"_index":105,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{}}}],["forbidden'})@apicookieauth()@roles('admin')@get",{"_index":1388,"title":{},"body":{"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apicookieauth()@useguards(jwtauthguard)@delete(':id",{"_index":1392,"title":{},"body":{"controllers/TicketsController.html":{}}}],["forbidden'})@apicookieauth()@useguards(jwtauthguard)@get(':id",{"_index":1384,"title":{},"body":{"controllers/TicketsController.html":{}}}],["forbidden'})@apiparam({name",{"_index":1279,"title":{},"body":{"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apiunauthorizedresponse({description",{"_index":497,"title":{},"body":{"controllers/AppController.html":{}}}],["forwardref",{"_index":638,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":165,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apibadrequestresponse({description",{"_index":119,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/UsersController.html":{}}}],["found'})@apiokresponse({description",{"_index":113,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["found'})@apiparam({name",{"_index":1284,"title":{},"body":{"controllers/SectionsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":104,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["found'})@get(':id",{"_index":311,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{}}}],["framework",{"_index":1676,"title":{},"body":{"index.html":{}}}],["free",{"_index":1213,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/enumerations.html":{}}}],["fs",{"_index":920,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.existssync(filepath",{"_index":928,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.mkdirsync(filepath",{"_index":929,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.writefilesync(path.join(filepath",{"_index":931,"title":{},"body":{"injectables/FilesService.html":{}}}],["function",{"_index":1132,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1670,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuse",{"_index":1029,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(flights",{"_index":1102,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(result",{"_index":1113,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.js",{"_index":1030,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["fuse.search(flightdto.arrival).map((r",{"_index":1114,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.search(flightdto.departure).map((r",{"_index":1103,"title":{},"body":{"injectables/FlightsService.html":{}}}],["get(':id",{"_index":166,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":512,"title":{},"body":{"controllers/AppController.html":{}}}],["getairlinebyid",{"_index":206,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairlinebyid(airlineid",{"_index":221,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairplanebyid",{"_index":339,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairplanebyid(airplaneid",{"_index":350,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairportbyid",{"_index":448,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getairportbyid(airportid",{"_index":459,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallairlines",{"_index":207,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getallairplanes",{"_index":340,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getallairports",{"_index":449,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallflights",{"_index":1010,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getallsections",{"_index":1310,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getalltickets",{"_index":1427,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getallusers",{"_index":1553,"title":{},"body":{"injectables/UsersService.html":{}}}],["getflightbyid",{"_index":1011,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getflightbyid(flightid",{"_index":1023,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getprofile",{"_index":493,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":513,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":494,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(userid",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsectionbyid",{"_index":1311,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getsectionbyid(sectionid",{"_index":1322,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getticketbyid",{"_index":1428,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getticketbyid(userid",{"_index":1438,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getting",{"_index":1672,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":1554,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1566,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1555,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":1568,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1709,"title":{},"body":{"index.html":{}}}],["gte",{"_index":1068,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["guard",{"_index":1155,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1156,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["hand",{"_index":794,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["hashpassword",{"_index":688,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["helmet",{"_index":1645,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1720,"title":{},"body":{"index.html":{}}}],["hours",{"_index":1072,"title":{},"body":{"injectables/FlightsService.html":{}}}],["httpexception",{"_index":226,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('forbidden",{"_index":1180,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpexception('password",{"_index":1583,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception(err",{"_index":251,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1727,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":227,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":241,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":1181,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpstatus.internal_server_error",{"_index":936,"title":{},"body":{"injectables/FilesService.html":{}}}],["httpstatus.not_found",{"_index":254,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["iata",{"_index":380,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{}}}],["iata'})@prop({required",{"_index":400,"title":{},"body":{"classes/Airport.html":{}}}],["id",{"_index":102,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1592,"title":{},"body":{"coverage.html":{}}}],["iev",{"_index":399,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["ignoreexpiration",{"_index":1139,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":1170,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":193,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apibadrequestresponse({description",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["includescore",{"_index":1093,"title":{},"body":{"injectables/FlightsService.html":{}}}],["incorrect",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["initialflights",{"_index":1067,"title":{},"body":{"injectables/FlightsService.html":{}}}],["initialflights.foreach((a",{"_index":1079,"title":{},"body":{"injectables/FlightsService.html":{}}}],["inject",{"_index":560,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":199,"title":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":200,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":228,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(airline.name",{"_index":231,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["injectmodel(airplane.name",{"_index":356,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(airport.name",{"_index":464,"title":{},"body":{"injectables/AirportsService.html":{}}}],["injectmodel(flight.name",{"_index":1032,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(seat.name",{"_index":1327,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(section.name",{"_index":1326,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(ticket.name",{"_index":1446,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectmodel(user.name",{"_index":1447,"title":{},"body":{"injectables/TicketsService.html":{}}}],["installation",{"_index":1687,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1689,"title":{},"body":{"index.html":{}}}],["international",{"_index":24,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["isarray",{"_index":742,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/SearchFlightDto.html":{}}}],["isarray()@arrayunique()@isnotempty()@apiproperty({example",{"_index":739,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isboolean",{"_index":816,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isboolean()@isnotempty()@apiproperty({example",{"_index":793,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isdatestring",{"_index":1203,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isemail",{"_index":908,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":838,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(class",{"_index":840,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{}}}],["isenum(sex",{"_index":890,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(status",{"_index":893,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(type",{"_index":891,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isin",{"_index":1204,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["ismongoid",{"_index":817,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["ismongoid()@isnotempty()@apiproperty({example",{"_index":778,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isnotempty",{"_index":712,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@isarray()@isenum(class",{"_index":1186,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isemail()@apiproperty({example",{"_index":895,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isenum(class)@apiproperty({example",{"_index":829,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["isnotempty()@isenum(sex)@apiproperty({example",{"_index":873,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(status)@apiproperty({example",{"_index":876,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@isenum(type)@apiproperty({example",{"_index":879,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@ismongoid()@apiproperty({example",{"_index":776,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({example",{"_index":737,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isnotempty()@isnumber()@min(1)@max(9)@apiproperty({example",{"_index":1191,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isphonenumber()@apiproperty({example",{"_index":904,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":783,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isstring()@isdatestring()@apiproperty({example",{"_index":1195,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isstring()@isuppercase()@length(2",{"_index":756,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["isnotempty()@isstring()@matches('^(?=.*?[a",{"_index":703,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@maxlength(200)@apiproperty({example",{"_index":728,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["isnotempty()@isstring()@maxlength(50)@apiproperty({example",{"_index":748,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@maxlength(20)@isstring()@apiproperty({example",{"_index":899,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":743,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({example",{"_index":812,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isoptional",{"_index":730,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/SearchFlightDto.html":{}}}],["isoptional()@apipropertyoptional({example",{"_index":802,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@isnotempty()@isstring()@isdatestring()@apipropertyoptional({example",{"_index":1198,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isoptional()@isstring()@apipropertyoptional({example",{"_index":856,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isoptional()@isstring()@maxlength(200)@apiproperty({example",{"_index":725,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["isoptional()@isstring()@maxlength(50)@apiproperty({example",{"_index":720,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{}}}],["isphonenumber",{"_index":909,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":713,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":884,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@length(7",{"_index":861,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@maxlength(50)@apiproperty({example",{"_index":723,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{}}}],["isuppercase",{"_index":759,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["join",{"_index":1716,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":506,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1138,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":641,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":646,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":635,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1724,"title":{},"body":{"index.html":{}}}],["keys",{"_index":1094,"title":{},"body":{"injectables/FlightsService.html":{}}}],["kiev",{"_index":393,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["last",{"_index":870,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lastname",{"_index":680,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lax",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{}}}],["legend",{"_index":179,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":760,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["length(2",{"_index":761,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["length(7",{"_index":892,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["license",{"_index":1730,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1706,"title":{},"body":{"index.html":{}}}],["limit",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1149,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":610,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":636,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":607,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto})@useguards(localauthguard)@post('signin",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["logo",{"_index":16,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["logo'})@prop({required",{"_index":49,"title":{},"body":{"classes/Airline.html":{}}}],["logout",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["lte",{"_index":1075,"title":{},"body":{"injectables/FlightsService.html":{}}}],["luggage",{"_index":795,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["luggage'})@prop({required",{"_index":945,"title":{},"body":{"classes/Flight.html":{}}}],["mail",{"_index":897,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["mail'})@prop({required",{"_index":1485,"title":{},"body":{"classes/User.html":{}}}],["male",{"_index":874,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1631,"title":{},"body":{"dependencies.html":{}}}],["match",{"_index":1449,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":714,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matches('^(?=.*?[a",{"_index":716,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matching",{"_index":68,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1205,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["max(9",{"_index":1208,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["maxlength",{"_index":731,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["maxlength(20",{"_index":910,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(200",{"_index":733,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["maxlength(50",{"_index":732,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/SearchFlightDto.html":{}}}],["message",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":75,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1206,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["min(1",{"_index":1207,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["miscellaneous",{"_index":1662,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1584,"title":{},"body":{"injectables/UsersService.html":{}}}],["mit",{"_index":1705,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1695,"title":{},"body":{"index.html":{}}}],["model",{"_index":211,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":175,"title":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":177,"title":{"modules.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":1031,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["moment(flightdto.firstdeptime",{"_index":1069,"title":{},"body":{"injectables/FlightsService.html":{}}}],["moment(seconddeptime",{"_index":1076,"title":{},"body":{"injectables/FlightsService.html":{}}}],["mongoose",{"_index":59,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":292,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":194,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":197,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":566,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1719,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1725,"title":{},"body":{"index.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name'})@prop({required",{"_index":277,"title":{},"body":{"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["name'})@prop({unique",{"_index":389,"title":{},"body":{"classes/Airport.html":{}}}],["nest",{"_index":1683,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1729,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":128,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":531,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":537,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":642,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1616,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":55,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":640,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":130,"title":{},"body":{"controllers/AirlinesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1620,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":57,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":534,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":238,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":701,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["newpasswordequals",{"_index":1581,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":1675,"title":{},"body":{"index.html":{}}}],["notavailable",{"_index":1220,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1688,"title":{},"body":{"index.html":{}}}],["null",{"_index":789,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":279,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["number'})@prop({required",{"_index":1491,"title":{},"body":{"classes/User.html":{}}}],["numberofseat",{"_index":848,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["objectid",{"_index":98,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":1166,"title":{},"body":{"guards/RolesGuard.html":{}}}],["occurred",{"_index":934,"title":{},"body":{"injectables/FilesService.html":{}}}],["october",{"_index":41,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["old",{"_index":1585,"title":{},"body":{"injectables/UsersService.html":{}}}],["oldpassword",{"_index":702,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["omittype",{"_index":1152,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["omittype(createuserdto",{"_index":1154,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["open",{"_index":1707,"title":{},"body":{"index.html":{}}}],["operating",{"_index":40,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionsforarrival",{"_index":1105,"title":{},"body":{"injectables/FlightsService.html":{}}}],["optionsfordeparture",{"_index":1092,"title":{},"body":{"injectables/FlightsService.html":{}}}],["out",{"_index":191,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out'})@apiunauthorizedresponse({description",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1734,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1611,"title":{"dependencies.html":{}},"body":{}}],["paid",{"_index":1218,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":125,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":1407,"title":{},"body":{"controllers/TicketsController.html":{}}}],["parameters",{"_index":94,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1625,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1153,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["partialtype(createairlinedto",{"_index":1467,"title":{},"body":{"classes/UpdateAirlineDto.html":{}}}],["partialtype(createairplanedto",{"_index":1469,"title":{},"body":{"classes/UpdateAirplaneDto.html":{}}}],["partialtype(createairportdto",{"_index":1471,"title":{},"body":{"classes/UpdateAirportDto.html":{}}}],["partialtype(createflightdto",{"_index":1473,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["partialtype(createseatdto",{"_index":1476,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["partialtype(createsectiondto",{"_index":1478,"title":{},"body":{"classes/UpdateSectionDto.html":{}}}],["partialtype(createticketdto",{"_index":1480,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["pass",{"_index":665,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1129,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":639,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1127,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1136,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":617,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password'})@apiokresponse({description",{"_index":1508,"title":{},"body":{"controllers/UsersController.html":{}}}],["password'})@prop({required",{"_index":1489,"title":{},"body":{"classes/User.html":{}}}],["password.dto",{"_index":1530,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":700,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":709,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["password.dto.ts:9",{"_index":711,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["passwordequals",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":1586,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":124,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["patch('/changepassword",{"_index":1538,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/update",{"_index":1535,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":169,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["patch(':id/update",{"_index":1237,"title":{},"body":{"controllers/SeatsController.html":{}}}],["path",{"_index":361,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["path.resolve(__dirname",{"_index":926,"title":{},"body":{"injectables/FilesService.html":{}}}],["payload",{"_index":672,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["phone",{"_index":906,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["phonenumber",{"_index":682,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":1717,"title":{},"body":{"index.html":{}}}],["populate",{"_index":360,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["post",{"_index":122,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["post('logout",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reserve",{"_index":1403,"title":{},"body":{"controllers/TicketsController.html":{}}}],["post('search",{"_index":994,"title":{},"body":{"controllers/FlightsController.html":{}}}],["post('signin",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":827,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["price'})@prop({required",{"_index":1262,"title":{},"body":{"classes/Section.html":{}}}],["private",{"_index":232,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env}.env",{"_index":554,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["production",{"_index":1697,"title":{},"body":{"index.html":{}}}],["profile",{"_index":510,"title":{},"body":{"controllers/AppController.html":{}}}],["profile'})@apiokresponse({description",{"_index":495,"title":{},"body":{"controllers/AppController.html":{}}}],["progressive",{"_index":1674,"title":{},"body":{"index.html":{}}}],["project",{"_index":1708,"title":{},"body":{"index.html":{}}}],["promise",{"_index":217,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":52,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["properties'})@prop",{"_index":943,"title":{},"body":{"classes/Flight.html":{}}}],["provide",{"_index":573,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":182,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["ps",{"_index":806,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["public",{"_index":202,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["q",{"_index":1084,"title":{},"body":{"injectables/FlightsService.html":{}}}],["r.item",{"_index":1104,"title":{},"body":{"injectables/FlightsService.html":{}}}],["range",{"_index":1197,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["read",{"_index":1718,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":155,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":930,"title":{},"body":{"injectables/FilesService.html":{}}}],["ref",{"_index":287,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["reflect",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1160,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refund",{"_index":774,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["repository",{"_index":1686,"title":{},"body":{"index.html":{}}}],["req",{"_index":500,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["req.cookies",{"_index":1134,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.cookies['access_token",{"_index":1135,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1177,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":157,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apibody({type",{"_index":980,"title":{},"body":{"controllers/FlightsController.html":{}}}],["request'})@apicookieauth()@useguards(jwtauthguard)@post('reserve",{"_index":1379,"title":{},"body":{"controllers/TicketsController.html":{}}}],["request'})@apicreatedresponse({description",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["request'})@apinotfoundresponse({description",{"_index":424,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apiunauthorizedresponse({description",{"_index":89,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["required",{"_index":63,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":1171,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1178,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{}}}],["resbody",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":190,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":67,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":69,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":162,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["return'})@prop",{"_index":953,"title":{},"body":{"classes/Flight.html":{}}}],["return(@request",{"_index":1410,"title":{},"body":{"controllers/TicketsController.html":{}}}],["return(req",{"_index":1390,"title":{},"body":{"controllers/TicketsController.html":{}}}],["returned",{"_index":1219,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["returns",{"_index":96,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnticket",{"_index":1429,"title":{},"body":{"injectables/TicketsService.html":{}}}],["returnticket(userid",{"_index":1441,"title":{},"body":{"injectables/TicketsService.html":{}}}],["rimraf",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":676,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@prop({required",{"_index":1493,"title":{},"body":{"classes/User.html":{}}}],["role.user",{"_index":1499,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":149,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":160,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["roles_key",{"_index":1168,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":550,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rs123456",{"_index":863,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["run",{"_index":1692,"title":{},"body":{"index.html":{}}}],["russian",{"_index":34,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["rxjs",{"_index":1167,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s.class",{"_index":1086,"title":{},"body":{"injectables/FlightsService.html":{}}}],["s.seats.length",{"_index":1089,"title":{},"body":{"injectables/FlightsService.html":{}}}],["salt",{"_index":686,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["samesite",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":1679,"title":{},"body":{"index.html":{}}}],["schema",{"_index":53,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":54,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(airline",{"_index":66,"title":{},"body":{"classes/Airline.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airplane",{"_index":294,"title":{},"body":{"classes/Airplane.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airport",{"_index":405,"title":{},"body":{"classes/Airport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(flight",{"_index":959,"title":{},"body":{"classes/Flight.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(seat",{"_index":1223,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(section",{"_index":1268,"title":{},"body":{"classes/Section.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ticket",{"_index":1370,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1500,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":963,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(@body",{"_index":995,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(flightdto",{"_index":976,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflightdto",{"_index":977,"title":{"classes/SearchFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["searchflightdto})@post('search",{"_index":981,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflights",{"_index":1012,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflights(flightdto",{"_index":1025,"title":{},"body":{"injectables/FlightsService.html":{}}}],["seat",{"_index":291,"title":{"classes/Seat.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"coverage.html":{}}}],["seat'})@prop({default",{"_index":1352,"title":{},"body":{"classes/Ticket.html":{}}}],["seat'})@prop({required",{"_index":282,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["seat.dto",{"_index":1234,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts",{"_index":823,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat.dto.ts:16",{"_index":1475,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.name",{"_index":1244,"title":{},"body":{"modules/SeatsModule.html":{},"modules/SectionsModule.html":{}}}],["seat.save",{"_index":1257,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seat.status",{"_index":1256,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatdocument",{"_index":1217,"title":{},"body":{"classes/Seat.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["seatdto",{"_index":1226,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seatdto.status",{"_index":1255,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatid",{"_index":1252,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatmodel",{"_index":1249,"title":{},"body":{"injectables/SeatsService.html":{},"injectables/SectionsService.html":{}}}],["seats",{"_index":828,"title":{},"body":{"classes/CreateSectionDto.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["seats'})@prop({trim",{"_index":1264,"title":{},"body":{"classes/Section.html":{}}}],["seats.controller",{"_index":1243,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1232,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":548,"title":{},"body":{"modules/AppModule.html":{}}}],["seatschema",{"_index":1222,"title":{},"body":{"classes/Seat.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seatscontroller",{"_index":1224,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":521,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["seatsservice",{"_index":1231,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["seat})@apibadrequestresponse({description",{"_index":1228,"title":{},"body":{"controllers/SeatsController.html":{}}}],["second",{"_index":1200,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["seconddeptime",{"_index":1064,"title":{},"body":{"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{}}}],["secret",{"_index":647,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1140,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":284,"title":{"classes/Section.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{}}}],["section'})@apicreatedresponse({description",{"_index":1272,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@apiokresponse({description",{"_index":1277,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@prop({required",{"_index":1211,"title":{},"body":{"classes/Seat.html":{}}}],["section.class",{"_index":1334,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.dto",{"_index":1293,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{}}}],["section.dto.ts",{"_index":826,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["section.dto.ts:10",{"_index":835,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:20",{"_index":833,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:28",{"_index":837,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.name",{"_index":1306,"title":{},"body":{"modules/SectionsModule.html":{}}}],["section.price",{"_index":1335,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.save",{"_index":1336,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondocument",{"_index":1266,"title":{},"body":{"classes/Section.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["sectiondto",{"_index":1276,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{}}}],["sectiondto.class",{"_index":1330,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondto.price",{"_index":1329,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionid",{"_index":1320,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionmodel",{"_index":1315,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sections",{"_index":273,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["sections'})@apiokresponse({description",{"_index":1282,"title":{},"body":{"controllers/SectionsController.html":{}}}],["sections'})@prop({trim",{"_index":285,"title":{},"body":{"classes/Airplane.html":{}}}],["sections.controller",{"_index":1305,"title":{},"body":{"modules/SectionsModule.html":{}}}],["sections.service",{"_index":1292,"title":{},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{}}}],["sections/sections.module",{"_index":549,"title":{},"body":{"modules/AppModule.html":{}}}],["sectionschema",{"_index":1267,"title":{},"body":{"classes/Section.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sectionscontroller",{"_index":1269,"title":{"controllers/SectionsController.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"coverage.html":{}}}],["sectionsmodule",{"_index":522,"title":{"modules/SectionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SectionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sectionsservice",{"_index":1291,"title":{"injectables/SectionsService.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{},"overview.html":{}}}],["section})@apibadrequestresponse({description",{"_index":1273,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@apinotfoundresponse({description",{"_index":1278,"title":{},"body":{"controllers/SectionsController.html":{}}}],["secure",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":246,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["server",{"_index":1680,"title":{},"body":{"index.html":{}}}],["set(arr",{"_index":1091,"title":{},"body":{"injectables/FlightsService.html":{}}}],["setmetadata(roles_key",{"_index":1748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sex",{"_index":849,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["sex'})@prop({required",{"_index":1354,"title":{},"body":{"classes/Ticket.html":{}}}],["sheremetyevo/шереметьево/svo",{"_index":780,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["side",{"_index":1681,"title":{},"body":{"index.html":{}}}],["sign",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@request",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(req",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":661,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":649,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":1711,"title":{},"body":{"index.html":{}}}],["src/.../airlines.entity.ts",{"_index":1741,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airplane.entity.ts",{"_index":1742,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airport.entity.ts",{"_index":1743,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../files.service.ts",{"_index":1665,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../flights.entity.ts",{"_index":1744,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1671,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seat.entity.ts",{"_index":1668,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../section.entity.ts",{"_index":1664,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ticket.entity.ts",{"_index":1667,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.entity.ts",{"_index":1666,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/airlines.controller.ts",{"_index":73,"title":{},"body":{"controllers/AirlinesController.html":{},"coverage.html":{}}}],["src/airlines/airlines.controller.ts:49",{"_index":93,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:59",{"_index":110,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:68",{"_index":115,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:83",{"_index":121,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:96",{"_index":106,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.module.ts",{"_index":192,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/airlines/airlines.service.ts",{"_index":201,"title":{},"body":{"injectables/AirlinesService.html":{},"coverage.html":{}}}],["src/airlines/airlines.service.ts:11",{"_index":213,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:111",{"_index":219,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:17",{"_index":216,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:50",{"_index":223,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:58",{"_index":222,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:72",{"_index":225,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/dto/create",{"_index":718,"title":{},"body":{"classes/CreateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/dto/update",{"_index":1466,"title":{},"body":{"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/entities/airlines.entity",{"_index":818,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["src/airlines/entities/airlines.entity.ts",{"_index":6,"title":{},"body":{"classes/Airline.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/entities/airlines.entity.ts:14",{"_index":39,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:21",{"_index":33,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:28",{"_index":35,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:36",{"_index":48,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:44",{"_index":46,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:52",{"_index":47,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:59",{"_index":50,"title":{},"body":{"classes/Airline.html":{}}}],["src/airplanes/airplanes.controller.ts",{"_index":296,"title":{},"body":{"controllers/AirplanesController.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.controller.ts:45",{"_index":304,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:52",{"_index":310,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:61",{"_index":312,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:76",{"_index":315,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:89",{"_index":308,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.module",{"_index":1418,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airplanes/airplanes.module.ts",{"_index":333,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["src/airplanes/airplanes.service.ts",{"_index":336,"title":{},"body":{"injectables/AirplanesService.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.service.ts:15",{"_index":343,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:20",{"_index":346,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:36",{"_index":352,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:45",{"_index":351,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:60",{"_index":354,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:82",{"_index":348,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/dto/create",{"_index":734,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/dto/update",{"_index":1468,"title":{},"body":{"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/entities/airplane.entity",{"_index":819,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/airplanes/entities/airplane.entity.ts",{"_index":270,"title":{},"body":{"classes/Airplane.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airplanes/entities/airplane.entity.ts:17",{"_index":278,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:21",{"_index":283,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:29",{"_index":288,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airports/airports.controller.ts",{"_index":407,"title":{},"body":{"controllers/AirportsController.html":{},"coverage.html":{}}}],["src/airports/airports.controller.ts:45",{"_index":414,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:52",{"_index":420,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:61",{"_index":421,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:76",{"_index":426,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:89",{"_index":418,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.module",{"_index":1419,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airports/airports.module.ts",{"_index":442,"title":{},"body":{"modules/AirportsModule.html":{}}}],["src/airports/airports.service.ts",{"_index":445,"title":{},"body":{"injectables/AirportsService.html":{},"coverage.html":{}}}],["src/airports/airports.service.ts:10",{"_index":452,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:115",{"_index":457,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:15",{"_index":455,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:42",{"_index":461,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:50",{"_index":460,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:64",{"_index":463,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/dto/create",{"_index":744,"title":{},"body":{"classes/CreateAirportDto.html":{},"coverage.html":{}}}],["src/airports/dto/update",{"_index":1470,"title":{},"body":{"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["src/airports/entities/airport.entity",{"_index":820,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["src/airports/entities/airport.entity.ts",{"_index":370,"title":{},"body":{"classes/Airport.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airports/entities/airport.entity.ts:11",{"_index":392,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:18",{"_index":390,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:22",{"_index":391,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:26",{"_index":401,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:33",{"_index":387,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:40",{"_index":383,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:47",{"_index":384,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:54",{"_index":398,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:61",{"_index":395,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:68",{"_index":396,"title":{},"body":{"classes/Airport.html":{}}}],["src/app.controller.ts",{"_index":492,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:27",{"_index":499,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":526,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":575,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:39",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:54",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:64",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1548,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":637,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":662,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":663,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":666,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles",{"_index":150,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":1115,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1142,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1157,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:15",{"_index":1161,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:18",{"_index":1164,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1120,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":1123,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:29",{"_index":1126,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1144,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":1148,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":1146,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/files/files.module",{"_index":196,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/files/files.module.ts",{"_index":914,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":916,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/files/files.service.ts:12",{"_index":919,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/flights/dto/create",{"_index":764,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/search",{"_index":1182,"title":{},"body":{"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/update",{"_index":1472,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/entities/flights.entity",{"_index":887,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/flights/entities/flights.entity.ts",{"_index":937,"title":{},"body":{"classes/Flight.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/flights/entities/flights.entity.ts:16",{"_index":952,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:27",{"_index":938,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:38",{"_index":939,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:50",{"_index":947,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:57",{"_index":948,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:69",{"_index":940,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:76",{"_index":942,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:80",{"_index":956,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:87",{"_index":944,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:91",{"_index":946,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:95",{"_index":951,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:99",{"_index":954,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":961,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:46",{"_index":968,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:55",{"_index":982,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:62",{"_index":974,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:71",{"_index":975,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:86",{"_index":985,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:99",{"_index":972,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":1420,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":1004,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service.ts",{"_index":1007,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:105",{"_index":1028,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:174",{"_index":1020,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:18",{"_index":1015,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:200",{"_index":1026,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:23",{"_index":1018,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:59",{"_index":1022,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:79",{"_index":1024,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/main.ts",{"_index":1606,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/seats/dto/create",{"_index":822,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/update",{"_index":1474,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["src/seats/entities/seat.entity",{"_index":888,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{}}}],["src/seats/entities/seat.entity.ts",{"_index":1209,"title":{},"body":{"classes/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/seats/entities/seat.entity.ts:30",{"_index":1212,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:34",{"_index":1210,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:43",{"_index":1216,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1225,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:35",{"_index":1230,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module.ts",{"_index":1242,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1245,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:12",{"_index":1251,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:9",{"_index":1248,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/sections/dto/create",{"_index":825,"title":{},"body":{"classes/CreateSectionDto.html":{},"coverage.html":{}}}],["src/sections/dto/update",{"_index":1477,"title":{},"body":{"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["src/sections/entities/section.entity",{"_index":289,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{}}}],["src/sections/entities/section.entity.ts",{"_index":1259,"title":{},"body":{"classes/Section.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/sections/entities/section.entity.ts:19",{"_index":1263,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:28",{"_index":1261,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:39",{"_index":1265,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/sections.controller.ts",{"_index":1270,"title":{},"body":{"controllers/SectionsController.html":{},"coverage.html":{}}}],["src/sections/sections.controller.ts:46",{"_index":1275,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:53",{"_index":1283,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:62",{"_index":1285,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:77",{"_index":1289,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:90",{"_index":1281,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.module.ts",{"_index":1304,"title":{},"body":{"modules/SectionsModule.html":{}}}],["src/sections/sections.service.ts",{"_index":1307,"title":{},"body":{"injectables/SectionsService.html":{},"coverage.html":{}}}],["src/sections/sections.service.ts:11",{"_index":1314,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:17",{"_index":1317,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:44",{"_index":1321,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:53",{"_index":1323,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:68",{"_index":1325,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:95",{"_index":1319,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/tickets/dto/create",{"_index":842,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/dto/update",{"_index":1479,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/entities/ticket.entity",{"_index":1497,"title":{},"body":{"classes/User.html":{}}}],["src/tickets/entities/ticket.entity.ts",{"_index":1338,"title":{},"body":{"classes/Ticket.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tickets/entities/ticket.entity.ts:102",{"_index":1347,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:106",{"_index":1362,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:115",{"_index":1356,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:122",{"_index":1353,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:39",{"_index":1350,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:47",{"_index":1360,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:56",{"_index":1355,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:65",{"_index":1358,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:69",{"_index":1348,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:73",{"_index":1351,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:77",{"_index":1340,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:84",{"_index":1345,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:91",{"_index":1342,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:98",{"_index":1343,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/tickets.controller.ts",{"_index":1372,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/tickets/tickets.controller.ts:104",{"_index":1393,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:48",{"_index":1380,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:59",{"_index":1389,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:72",{"_index":1385,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:87",{"_index":1397,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.module.ts",{"_index":1416,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/tickets/tickets.service.ts",{"_index":1425,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/tickets/tickets.service.ts:106",{"_index":1444,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:137",{"_index":1442,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:16",{"_index":1433,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:24",{"_index":1436,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:76",{"_index":1437,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:86",{"_index":1440,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/users/dto/change",{"_index":699,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1482,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1484,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/users.entity.ts:19",{"_index":1487,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":1488,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1492,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:31",{"_index":1490,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:38",{"_index":1486,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:47",{"_index":1494,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:58",{"_index":1496,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1502,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:44",{"_index":1519,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:57",{"_index":1521,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:70",{"_index":1525,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:83",{"_index":1512,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:93",{"_index":1517,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":1421,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/users/users.module.ts",{"_index":1546,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":1130,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1549,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1558,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":1564,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:139",{"_index":1567,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1562,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1565,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1569,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1571,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:83",{"_index":1560,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1693,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1696,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1698,"title":{},"body":{"index.html":{}}}],["started",{"_index":1673,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1685,"title":{},"body":{"index.html":{}}}],["startof('day",{"_index":1070,"title":{},"body":{"injectables/FlightsService.html":{}}}],["statements",{"_index":1593,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":927,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["status",{"_index":850,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["status'})@prop({required",{"_index":1214,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{}}}],["status.booked",{"_index":1368,"title":{},"body":{"classes/Ticket.html":{}}}],["status.free",{"_index":1221,"title":{},"body":{"classes/Seat.html":{}}}],["status.returned",{"_index":1464,"title":{},"body":{"injectables/TicketsService.html":{}}}],["stay",{"_index":1721,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":645,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":644,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1128,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":19,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"classes/SearchFlightDto.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apibadrequestresponse({description",{"_index":423,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{}}}],["string'})@apibody({type",{"_index":1287,"title":{},"body":{"controllers/SectionsController.html":{}}}],["string'})@apicookieauth()@roles('admin')@delete(':id",{"_index":1280,"title":{},"body":{"controllers/SectionsController.html":{}}}],["string'})@apicookieauth()@roles('admin')@get(':id",{"_index":1520,"title":{},"body":{"controllers/UsersController.html":{}}}],["string'})@apinotfoundresponse({description",{"_index":103,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{}}}],["string'})@get(':id",{"_index":114,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/SectionsController.html":{}}}],["sub",{"_index":674,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":100,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":156,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1137,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1712,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1732,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1610,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1609,"title":{},"body":{"coverage.html":{}}}],["taxa",{"_index":775,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["taxa'})@prop",{"_index":955,"title":{},"body":{"classes/Flight.html":{}}}],["test",{"_index":1701,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1704,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1703,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":882,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["tests",{"_index":1700,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1710,"title":{},"body":{"index.html":{}}}],["this.airlinemodel",{"_index":234,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.create",{"_index":245,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.findbyid(airlineid).exec",{"_index":255,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinesservice.createairline(airlinedto",{"_index":163,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.deleteairline(id",{"_index":174,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getairlinebyid(id",{"_index":168,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getallairlines",{"_index":164,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.updateairlinedata(id",{"_index":171,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airplanemodel",{"_index":358,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["this.airplanemodel.create",{"_index":357,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanemodel.findbyid(airplaneid).exec",{"_index":363,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanesservice.createairplane(airplanedto",{"_index":324,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.deleteairplane(id",{"_index":328,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getairplanebyid(id",{"_index":326,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getallairplanes",{"_index":325,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.updateairplanedata(id",{"_index":327,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airportmodel",{"_index":465,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.create",{"_index":467,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.findbyid(airportid).exec",{"_index":469,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportsservice.createairport(airportdto",{"_index":433,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.deleteairport(id",{"_index":437,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getairportbyid(id",{"_index":435,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getallairports",{"_index":434,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.updateairportdata(id",{"_index":436,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.authservice.getprofile(req.user._id",{"_index":514,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(req.user",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":629,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1151,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.filesservice.createfile(folder.airline",{"_index":244,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.flightmodel",{"_index":1033,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["this.flightmodel.create",{"_index":1036,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(flightid).exec",{"_index":1038,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(ticket.flight).exec",{"_index":1461,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.flightsservice.createflight(flightdto",{"_index":993,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.deleteflight(id",{"_index":1000,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getallflights",{"_index":997,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getflightbyid(id",{"_index":998,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.searchflights(flightdto",{"_index":996,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.updateflightdata(id",{"_index":999,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":684,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":1176,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1172,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seatmodel.findbyid(seatid).exec",{"_index":1254,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatmodel.findbyid(seatid).select",{"_index":1258,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatsservice.updateseatdata(id",{"_index":1238,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.sectionmodel",{"_index":1331,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.create",{"_index":1328,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.findbyid(sectionid).exec",{"_index":1333,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionsservice.createsection(sectiondto",{"_index":1296,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.deletesection(id",{"_index":1300,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getallsections",{"_index":1297,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getsectionbyid(id",{"_index":1298,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.updatesectiondata(id",{"_index":1299,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.ticketmodel",{"_index":1457,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.create",{"_index":1452,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyid(ticketid).exec",{"_index":1460,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyidanddelete(ticketid).exec",{"_index":1462,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketsservice.createticket(ticketdto",{"_index":1404,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getalltickets",{"_index":1405,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getticketbyid(req.user._id",{"_index":1408,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.returnticket(req.user._id",{"_index":1411,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.updateticketdata(req.user._id",{"_index":1409,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.usermodel",{"_index":1450,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":1573,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1575,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1589,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.getuserbyemail(payload.email",{"_index":1141,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.changeuserpassword(req.user._id",{"_index":1540,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deleteuser(req.user._id",{"_index":1542,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1533,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(userdto.email",{"_index":685,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1534,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(userid",{"_index":671,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuserdata(req.user._id",{"_index":1537,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":533,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":561,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":237,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":804,"title":{"classes/Ticket.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["ticket'})@apicreatedresponse({description",{"_index":1375,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket'})@apiokresponse({description",{"_index":1391,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket.dto",{"_index":1400,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":843,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:105",{"_index":878,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:112",{"_index":872,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:20",{"_index":868,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:25",{"_index":883,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:35",{"_index":875,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:45",{"_index":881,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:50",{"_index":867,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:55",{"_index":871,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:60",{"_index":855,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:68",{"_index":860,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:76",{"_index":858,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:84",{"_index":859,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:90",{"_index":864,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:95",{"_index":886,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.name",{"_index":1423,"title":{},"body":{"modules/TicketsModule.html":{}}}],["ticket.save",{"_index":1465,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticket.status",{"_index":1463,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketdocument",{"_index":1363,"title":{},"body":{"classes/Ticket.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["ticketdto",{"_index":1381,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["ticketid",{"_index":1439,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketmodel",{"_index":1434,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":1373,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{}}}],["tickets'})@apiokresponse({description",{"_index":1386,"title":{},"body":{"controllers/TicketsController.html":{}}}],["tickets'})@prop({trim",{"_index":1495,"title":{},"body":{"classes/User.html":{}}}],["tickets.controller",{"_index":1417,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service",{"_index":1399,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["tickets/tickets.module",{"_index":545,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketschema",{"_index":1369,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ticketscontroller",{"_index":1371,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":523,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":1398,"title":{"injectables/TicketsService.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["ticket})@apibody({type",{"_index":1376,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@apiparam({name",{"_index":1383,"title":{},"body":{"controllers/TicketsController.html":{}}}],["time",{"_index":787,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["time'})@prop({required",{"_index":941,"title":{},"body":{"classes/Flight.html":{}}}],["toisostring",{"_index":1073,"title":{},"body":{"injectables/FlightsService.html":{}}}],["token",{"_index":1133,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["tostring",{"_index":1074,"title":{},"body":{"injectables/FlightsService.html":{}}}],["touch",{"_index":1722,"title":{},"body":{"index.html":{}}}],["town",{"_index":403,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["town'})@prop({required",{"_index":397,"title":{},"body":{"classes/Airport.html":{}}}],["town'})@prop({trim",{"_index":394,"title":{},"body":{"classes/Airport.html":{}}}],["transformer",{"_index":1633,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":31,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true",{"_index":30,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true})@arraynotempty()@apiproperty({example",{"_index":1188,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["try",{"_index":242,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SectionsService.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1728,"title":{},"body":{"index.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@prop({required",{"_index":1357,"title":{},"body":{"classes/Ticket.html":{}}}],["typealiases",{"_index":1739,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1617,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1624,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1627,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1684,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["uia",{"_index":22,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["ukraine",{"_index":23,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["ukrainian",{"_index":36,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["ukranian",{"_index":385,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["unauthorized",{"_index":158,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apibody({type",{"_index":1510,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@apicookieauth()@useguards(jwtauthguard)@delete",{"_index":1516,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@apicookieauth()@useguards(jwtauthguard)@get('profile",{"_index":498,"title":{},"body":{"controllers/AppController.html":{}}}],["unauthorized'})@apicreatedresponse({description",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiforbiddenresponse({description",{"_index":90,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":668,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":286,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":979,"title":{},"body":{"controllers/FlightsController.html":{}}}],["undefined})@apibody({type",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":1387,"title":{},"body":{"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["undefined})@get",{"_index":109,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["unique",{"_index":38,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/User.html":{}}}],["unit",{"_index":1699,"title":{},"body":{"index.html":{}}}],["up",{"_index":626,"title":{},"body":{"controllers/AuthController.html":{}}}],["up'})@apibadrequestresponse({description",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":80,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":170,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(id",{"_index":116,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(req",{"_index":1394,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateairlinedata",{"_index":208,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedata(airlineid",{"_index":224,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedto",{"_index":117,"title":{"classes/UpdateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["updateairlinedto})@apicookieauth()@roles('admin')@patch(':id",{"_index":120,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["updateairplanedata",{"_index":341,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedata(airplaneid",{"_index":353,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedto",{"_index":313,"title":{"classes/UpdateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["updateairplanedto})@apicookieauth()@roles('admin')@patch(':id",{"_index":314,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["updateairportdata",{"_index":450,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdata(airportid",{"_index":462,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdto",{"_index":422,"title":{"classes/UpdateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["updateairportdto})@apicookieauth()@roles('admin')@patch(':id",{"_index":425,"title":{},"body":{"controllers/AirportsController.html":{}}}],["updatedata",{"_index":1505,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(@request",{"_index":1536,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(req",{"_index":1522,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateflightdata",{"_index":1013,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdata(flightid",{"_index":1027,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdto",{"_index":983,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updateflightdto})@apicookieauth()@roles('admin')@patch(':id",{"_index":984,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateseatdata",{"_index":1246,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdata(seatid",{"_index":1250,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdto",{"_index":1227,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updateseatdto})@useguards(jwtauthguard)@apicookieauth()@patch(':id/update",{"_index":1229,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updatesectiondata",{"_index":1312,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondata(sectionid",{"_index":1324,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondto",{"_index":1286,"title":{"classes/UpdateSectionDto.html":{}},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["updatesectiondto})@apicookieauth()@roles('admin')@patch(':id",{"_index":1288,"title":{},"body":{"controllers/SectionsController.html":{}}}],["updateticketdata",{"_index":1430,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdata(userid",{"_index":1443,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdto",{"_index":1395,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["updateticketdto})@apicookieauth()@useguards(jwtauthguard)@patch(':id",{"_index":1396,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateuserdata",{"_index":1556,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdata(userid",{"_index":1570,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdatadto",{"_index":1481,"title":{"classes/UpdateUserDataDto.html":{}},"body":{"classes/UpdateUserDataDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdatadto})@apicookieauth()@useguards(jwtauthguard)@patch('/update",{"_index":1524,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":126,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["uri",{"_index":567,"title":{},"body":{"modules/AppModule.html":{}}}],["useclass",{"_index":574,"title":{},"body":{"modules/AppModule.html":{}}}],["usecreateindex",{"_index":572,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":557,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefindandmodify",{"_index":571,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":501,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":511,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":127,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["useinterceptors(fileinterceptor('logo",{"_index":161,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["usenewurlparser",{"_index":569,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":504,"title":{"classes/User.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiokresponse({description",{"_index":1514,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@prop({required",{"_index":1359,"title":{},"body":{"classes/Ticket.html":{}}}],["user._id",{"_index":675,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":894,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":900,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":902,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":907,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":898,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":903,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":673,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":679,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.lastname",{"_index":681,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":1424,"title":{},"body":{"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phonenumber",{"_index":683,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":677,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":1179,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.save",{"_index":1455,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["user.tickets.push(ticket._id",{"_index":1454,"title":{},"body":{"injectables/TicketsService.html":{}}}],["userdocument",{"_index":1445,"title":{},"body":{"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":1574,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.firstname",{"_index":1576,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.lastname",{"_index":1577,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.newpassword",{"_index":1582,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.oldpassword",{"_index":1580,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.phonenumber",{"_index":1578,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1432,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1150,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1503,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiokresponse({description",{"_index":1518,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1547,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1526,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/users.entity",{"_index":505,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":540,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":670,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":1422,"title":{},"body":{"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1501,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1124,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":524,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":655,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@apibadrequestresponse({description",{"_index":1523,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apiforbiddenresponse({description",{"_index":496,"title":{},"body":{"controllers/AppController.html":{}}}],["user})@apinotfoundresponse({description",{"_index":1509,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apiunauthorizedresponse({description",{"_index":1515,"title":{},"body":{"controllers/UsersController.html":{}}}],["useunifiedtopology",{"_index":570,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":921,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["uuid.v4",{"_index":924,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1121,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1147,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1125,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":664,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":715,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{},"dependencies.html":{}}}],["validity",{"_index":851,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["validity'})@prop({required",{"_index":1361,"title":{},"body":{"classes/Ticket.html":{}}}],["value",{"_index":1669,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1599,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1745,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1694,"title":{},"body":{"index.html":{}}}],["website",{"_index":1726,"title":{},"body":{"index.html":{}}}],["writing",{"_index":935,"title":{},"body":{"injectables/FilesService.html":{}}}],["yefremov",{"_index":901,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["you'd",{"_index":1715,"title":{},"body":{"index.html":{}}}],["z])(?=.*?[0",{"_index":705,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*?[a",{"_index":704,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["zhulyani",{"_index":388,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["zhulyani/жуляни/iev",{"_index":797,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["zoom",{"_index":189,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Airline.html":{"url":"classes/Airline.html","title":"class - Airline","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/entities/airlines.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                airlineNameUa\n                            \n                            \n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Optional\n                                descriptionRu\n                            \n                            \n                                descriptionUa\n                            \n                            \n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'logo', description: 'Airline logo'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirlineDocument = Airline & Document;\n\n@Schema()\nexport class Airline {\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airlineNameUa: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameEng?: string;\n\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameRu?: string;\n\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  @Prop({ required: true, trim: true })\n  descriptionUa: string;\n\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionEng?: string;\n\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionRu?: string;\n\n  @ApiProperty({\n    example: 'logo',\n    description: 'Airline logo',\n  })\n  @Prop({ required: true, trim: true })\n  logo: string;\n}\nexport const AirlineSchema = SchemaFactory.createForClass(Airline);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirlinesController.html":{"url":"controllers/AirlinesController.html","title":"controller - AirlinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirlinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airlines\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airlineDto: CreateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airline'})@ApiCreatedResponse({description: 'Created', type: Airline})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateAirlineDto})@ApiCookieAuth()@Roles('admin')@UseInterceptors(undefined)@Post()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airline'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airlines'})@ApiOkResponse({description: 'Success', type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airline data'})@ApiNotFoundResponse({description: 'Not Found'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airlineDto: UpdateAirlineDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airline data'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateAirlineDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { Airline } from './entities/airlines.entity';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airlines')\n@Controller('airlines')\nexport class AirlinesController {\n  constructor(private readonly airlinesService: AirlinesService) {}\n\n  @ApiOperation({ summary: 'Create a Airline' })\n  @ApiCreatedResponse({ description: 'Created', type: Airline })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateAirlineDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @UseInterceptors(FileInterceptor('logo'))\n  @Post()\n  create(\n    @Body() airlineDto: CreateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.createAirline(airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airlines' })\n  @ApiOkResponse({ description: 'Success', type: [Airline] })\n  @Get()\n  findAll() {\n    return this.airlinesService.getAllAirlines();\n  }\n\n  @ApiOperation({ summary: 'Get Airline data' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airlinesService.getAirlineById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airline data' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateAirlineDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airlineDto: UpdateAirlineDto) {\n    return this.airlinesService.updateAirlineData(id, airlineDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airline' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airlinesService.deleteAirline(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirlinesModule.html":{"url":"modules/AirlinesModule.html","title":"module - AirlinesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirlinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airlines/airlines.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirlinesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { AirlinesController } from './airlines.controller';\nimport { FilesModule } from 'src/files/files.module';\nimport { Airline, AirlineSchema } from './entities/airlines.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airline.name, schema: AirlineSchema }]),\n    FilesModule,\n  ],\n  controllers: [AirlinesController],\n  providers: [AirlinesService],\n  exports: [AirlinesService],\n})\nexport class AirlinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirlinesService.html":{"url":"injectables/AirlinesService.html","title":"injectable - AirlinesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirlinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirline\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirline\n                            \n                            \n                                    Public\n                                    Async\n                                getAirlineById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirlines\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirlineData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airlineModel: Model, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/airlines/airlines.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airlineModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirline(airlineDto: CreateAirlineDto, logo: any)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirline(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:111\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirlineById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirlineById(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirlines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirlines()\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirlineData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirlineData(airlineId: ObjectId, airlineDto: UpdateAirlineDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { FilesService, Folder } from '../files/files.service';\nimport { Airline, AirlineDocument } from './entities/airlines.entity';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\n\n@Injectable()\nexport class AirlinesService {\n  constructor(\n    @InjectModel(Airline.name) private airlineModel: Model,\n    private filesService: FilesService,\n  ) {}\n\n  public async createAirline(\n    airlineDto: CreateAirlineDto,\n    logo: any,\n  ): Promise {\n    let airline = await this.airlineModel\n      .findOne({\n        airlineNameUa: airlineDto.airlineNameUa,\n      })\n      .exec();\n    if (airline) {\n      throw new HttpException(\n        'Airline with this name already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      const fileName = await this.filesService.createFile(Folder.Airline, logo);\n      airline = await this.airlineModel.create({\n        ...airlineDto,\n        logo: fileName,\n      });\n\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirlines(): Promise {\n    const airlines = await this.airlineModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airlines;\n  }\n\n  public async getAirlineById(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n\n  public async updateAirlineData(\n    airlineId: ObjectId,\n    airlineDto: UpdateAirlineDto,\n  ): Promise {\n    let airline = await this.airlineModel.findById(airlineId).exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airlineDto.airlineNameEng) {\n      airline.airlineNameEng = airlineDto.airlineNameEng;\n    }\n    if (airlineDto.airlineNameRu) {\n      airline.airlineNameRu = airlineDto.airlineNameRu;\n    }\n    if (airlineDto.airlineNameUa) {\n      airline.airlineNameUa = airlineDto.airlineNameUa;\n    }\n    if (airlineDto.descriptionEng) {\n      airline.descriptionEng = airlineDto.descriptionEng;\n    }\n    if (airlineDto.descriptionRu) {\n      airline.descriptionRu = airlineDto.descriptionRu;\n    }\n    if (airlineDto.descriptionUa) {\n      airline.descriptionUa = airlineDto.descriptionUa;\n    }\n    await airline.save();\n\n    airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    return airline;\n  }\n\n  public async deleteAirline(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findByIdAndDelete(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airplane.html":{"url":"classes/Airplane.html","title":"class - Airplane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airplane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/entities/airplane.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '45', description: 'Amount Of Seat'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'sections', description: 'Sections'})@Prop({trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type AirplaneDocument = Airplane & Document;\n\n@Schema()\nexport class Airplane {\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airplaneName: string;\n\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  @Prop({ required: true })\n  amountOfSeat: number;\n\n  @ApiProperty({ example: 'sections', description: 'Sections' })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Section',\n  })\n  sections: Section[];\n}\nexport const AirplaneSchema = SchemaFactory.createForClass(Airplane);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirplanesController.html":{"url":"controllers/AirplanesController.html","title":"controller - AirplanesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirplanesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airplanes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airplaneDto: CreateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airplane'})@ApiCreatedResponse({description: 'Created', type: Airplane})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateAirplaneDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airplane'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airplanes'})@ApiOkResponse({description: 'Success', type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airplane data'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airplane data'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateAirplaneDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { Airplane } from './entities/airplane.entity';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airplanes')\n@Controller('airplanes')\nexport class AirplanesController {\n  constructor(private readonly airplanesService: AirplanesService) {}\n\n  @ApiOperation({ summary: 'Create a Airplane' })\n  @ApiCreatedResponse({ description: 'Created', type: Airplane })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateAirplaneDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() airplaneDto: CreateAirplaneDto) {\n    return this.airplanesService.createAirplane(airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airplanes' })\n  @ApiOkResponse({ description: 'Success', type: [Airplane] })\n  @Get()\n  findAll() {\n    return this.airplanesService.getAllAirplanes();\n  }\n\n  @ApiOperation({ summary: 'Get Airplane data' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airplanesService.getAirplaneById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airplane data' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateAirplaneDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airplaneDto: UpdateAirplaneDto) {\n    return this.airplanesService.updateAirplaneData(id, airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airplane' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airplanesService.deleteAirplane(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirplanesModule.html":{"url":"modules/AirplanesModule.html","title":"module - AirplanesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirplanesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airplanes/airplanes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirplanesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { AirplanesController } from './airplanes.controller';\nimport { Airplane, AirplaneSchema } from './entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Airplane.name, schema: AirplaneSchema },\n    ]),\n  ],\n  controllers: [AirplanesController],\n  providers: [AirplanesService],\n  exports: [AirplanesService],\n})\nexport class AirplanesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirplanesService.html":{"url":"injectables/AirplanesService.html","title":"injectable - AirplanesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirplanesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                getAirplaneById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirplanes\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirplaneData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airplaneModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airplanes/airplanes.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirplane(airplaneDto: CreateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirplane(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirplaneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirplaneById(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirplanes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirplanes()\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirplaneData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirplaneData(airplaneId: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Airplane, AirplaneDocument } from './entities/airplane.entity';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\n\n@Injectable()\nexport class AirplanesService {\n  constructor(\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n  ) {}\n\n  public async createAirplane(\n    airplaneDto: CreateAirplaneDto,\n  ): Promise {\n    try {\n      let airplane = await this.airplaneModel.create({ ...airplaneDto });\n      airplane = await this.airplaneModel\n        .findById(airplane._id)\n        .populate({ path: 'sections', select: '-__v' })\n        .select({ __v: false })\n        .exec();\n      return airplane;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirplanes(): Promise {\n    const airplanes = await this.airplaneModel\n      .find()\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplanes;\n  }\n\n  public async getAirplaneById(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n\n  public async updateAirplaneData(\n    airplaneId: ObjectId,\n    airplaneDto: UpdateAirplaneDto,\n  ): Promise {\n    let airplane = await this.airplaneModel.findById(airplaneId).exec();\n    if (!airplane) {\n      throw new BadRequestException('Airplane with this Id not found');\n    }\n\n    if (airplaneDto.airplaneName) {\n      airplane.airplaneName = airplaneDto.airplaneName;\n    }\n    await airplane.save();\n\n    airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplane;\n  }\n\n  public async deleteAirplane(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findByIdAndDelete(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airport.html":{"url":"classes/Airport.html","title":"class - Airport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/entities/airport.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                airportCountryUa\n                            \n                            \n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Optional\n                                airportNameRu\n                            \n                            \n                                airportNameUa\n                            \n                            \n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Optional\n                                airportTownRu\n                            \n                            \n                                airportTownUa\n                            \n                            \n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani', description: 'English airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляны', description: 'Russian airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'IEV', description: 'IATA'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirportDocument = Airport & Document;\n\n@Schema()\nexport class Airport {\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  @Prop({ required: true, unique: true, trim: true })\n  airportNameUa: string;\n\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  @Prop({ unique: true, trim: true })\n  airportNameEng?: string;\n\n  @ApiProperty({ example: 'Жуляны', description: 'Russian airport name' })\n  @Prop({ unique: true, trim: true })\n  airportNameRu?: string;\n\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  @Prop({ required: true, unique: true, trim: true })\n  IATA: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  @Prop({ required: true, trim: true })\n  airportCountryUa: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryRu?: string;\n\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  @Prop({ required: true, trim: true })\n  airportTownUa: string;\n\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownEng?: string;\n\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownRu?: string;\n}\nexport const AirportSchema = SchemaFactory.createForClass(Airport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirportsController.html":{"url":"controllers/AirportsController.html","title":"controller - AirportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airportDto: CreateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airport'})@ApiCreatedResponse({description: 'Created', type: Airport})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateAirportDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airport'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airports'})@ApiOkResponse({description: 'Success', type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airport data'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airport data'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateAirportDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { Airport } from './entities/airport.entity';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airports')\n@Controller('airports')\nexport class AirportsController {\n  constructor(private readonly airportsService: AirportsService) {}\n\n  @ApiOperation({ summary: 'Create a Airport' })\n  @ApiCreatedResponse({ description: 'Created', type: Airport })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateAirportDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() airportDto: CreateAirportDto) {\n    return this.airportsService.createAirport(airportDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airports' })\n  @ApiOkResponse({ description: 'Success', type: [Airport] })\n  @Get()\n  findAll() {\n    return this.airportsService.getAllAirports();\n  }\n\n  @ApiOperation({ summary: 'Get Airport data' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airportsService.getAirportById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airport data' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateAirportDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airportDto: UpdateAirportDto) {\n    return this.airportsService.updateAirportData(id, airportDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airport' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airportsService.deleteAirport(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirportsModule.html":{"url":"modules/AirportsModule.html","title":"module - AirportsModule","body":"\n                   \n\n\n\n\n    Modules\n    AirportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AirportsModule_exports\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airports/airports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { AirportsController } from './airports.controller';\nimport { Airport, AirportSchema } from './entities/airport.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airport.name, schema: AirportSchema }]),\n  ],\n  controllers: [AirportsController],\n  providers: [AirportsService],\n  exports: [AirportsService],\n})\nexport class AirportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirportsService.html":{"url":"injectables/AirportsService.html","title":"injectable - AirportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirport\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirport\n                            \n                            \n                                    Public\n                                    Async\n                                getAirportById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirports\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirportData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airports/airports.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirport(airportDto: CreateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirport(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirportById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirportById(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirports()\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirportData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirportData(airportId: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Airport, AirportDocument } from './entities/airport.entity';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\n\n@Injectable()\nexport class AirportsService {\n  constructor(\n    @InjectModel(Airport.name) private airportModel: Model,\n  ) {}\n\n  public async createAirport(airportDto: CreateAirportDto): Promise {\n    let airport = await this.airportModel\n      .findOne({\n        IATA: airportDto.IATA,\n      })\n      .exec();\n    if (airport) {\n      throw new HttpException(\n        'Airport with this IATA already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      airport = await this.airportModel.create({ ...airportDto });\n      airport = await this.airportModel\n        .findOne({\n          IATA: airportDto.IATA,\n        })\n        .select({ __v: false })\n        .exec();\n      return airport;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirports(): Promise {\n    const airports = await this.airportModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airports;\n  }\n\n  public async getAirportById(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n\n  public async updateAirportData(\n    airportId: ObjectId,\n    airportDto: UpdateAirportDto,\n  ): Promise {\n    let airport = await this.airportModel.findById(airportId).exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airportDto.IATA) {\n      airport.IATA = airportDto.IATA;\n    }\n    if (airportDto.airportCountryEng) {\n      airport.airportCountryEng = airportDto.airportCountryEng;\n    }\n    if (airportDto.airportCountryUa) {\n      airport.airportCountryUa = airportDto.airportCountryUa;\n    }\n    if (airportDto.airportCountryRu) {\n      airport.airportCountryRu = airportDto.airportCountryRu;\n    }\n    if (airportDto.airportNameEng) {\n      airport.airportNameEng = airportDto.airportNameEng;\n    }\n    if (airportDto.airportNameUa) {\n      airport.airportNameUa = airportDto.airportNameUa;\n    }\n    if (airportDto.airportNameRu) {\n      airport.airportNameRu = airportDto.airportNameRu;\n    }\n    if (airportDto.airportTownEng) {\n      airport.airportTownEng = airportDto.airportTownEng;\n    }\n    if (airportDto.airportTownUa) {\n      airport.airportTownUa = airportDto.airportTownUa;\n    }\n    if (airportDto.airportTownRu) {\n      airport.airportTownRu = airportDto.airportTownRu;\n    }\n    await airport.save();\n\n    airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    return airport;\n  }\n\n  public async deleteAirport(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findByIdAndDelete(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Profile'})@ApiOkResponse({description: 'Success', type: User})@ApiForbiddenResponse({description: 'Forbidden'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport {\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\nimport { AuthService } from './auth/auth.service';\nimport { User } from './users/entities/users.entity';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\n\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Get Profile' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Request() req: any) {\n    return this.authService.getProfile(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAirlinesModule\n\nAirlinesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirlinesModule\n                        \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            SectionsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\n\nimport { AppService } from './app.service';\nimport { AppController } from './app.controller';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AirportsModule } from './airports/airports.module';\nimport { AirlinesModule } from './airlines/airlines.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { TicketsModule } from './tickets/tickets.module';\nimport { FilesModule } from './files/files.module';\nimport { AirplanesModule } from './airplanes/airplanes.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { SectionsModule } from './sections/sections.module';\nimport { RolesGuard } from './auth/guards/roles.guard';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n      cache: true,\n    }),\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        ttl: configService.get('CACHE_TTL'),\n      }),\n      inject: [ConfigService],\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('THROTTLE_TTL'),\n        limit: config.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGO_DB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n        useCreateIndex: true,\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    AirportsModule,\n    AirlinesModule,\n    FlightsModule,\n    TicketsModule,\n    FilesModule,\n    AirplanesModule,\n    SeatsModule,\n    SectionsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Log Out'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiCreatedResponse({description: 'Created'})@UseGuards(JwtAuthGuard)@ApiCookieAuth()@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign In'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBody({type: LoginUserDto})@UseGuards(LocalAuthGuard)@Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign Up'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBody({type: CreateUserDto})@Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Res,\n  Body,\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\n\nimport { AuthService } from './auth.service';\nimport { User } from 'src/users/entities/users.entity';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { LoginUserDto } from 'src/users/dto/login-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Sign In' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCreatedResponse({ description: 'Created', type: [User] })\n  @ApiBody({ type: LoginUserDto })\n  @UseGuards(LocalAuthGuard)\n  @Post('signin')\n  async signIn(@Request() req: any, @Res({ passthrough: true }) res: Response) {\n    const [resBody, jwt] = await this.authService.signIn(req.user);\n    res.cookie('access_token', jwt, {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return resBody;\n  }\n\n  @ApiOperation({ summary: 'Sign Up' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCreatedResponse({ description: 'Created', type: [User] })\n  @ApiBody({ type: CreateUserDto })\n  @Post('signup')\n  async signUp(@Body() userDto: CreateUserDto) {\n    return await this.authService.signUp(userDto);\n  }\n\n  @ApiOperation({ summary: 'Log Out' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiCreatedResponse({ description: 'Created' })\n  @UseGuards(JwtAuthGuard)\n  @ApiCookieAuth()\n  @Post('logout')\n  async logOut(@Res({ passthrough: true }) res: Response) {\n    res.cookie('access_token', '', {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule,\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { UsersService } from '../users/users.service';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getProfile(userId: ObjectId) {\n    return this.usersService.getUserById(userId);\n  }\n\n  async signIn(user: any) {\n    const payload = { email: user.email, sub: user._id, role: user.role };\n    return [\n      {\n        userId: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        role: user.role,\n      },\n      this.jwtService.sign(payload),\n    ];\n  }\n\n  async signUp(userDto: CreateUserDto) {\n    let user = await this.usersService.getUserByEmail(userDto.email);\n    if (user) {\n      throw new HttpException(\n        'User with this email already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hashPassword = await bcrypt.hash(userDto.password, salt);\n    user = await this.usersService.createUser({\n      ...userDto,\n      password: hashPassword,\n    });\n    return user;\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.getUserByEmail(email);\n    const passwordEquals = await bcrypt.compare(pass, user.password);\n    if (user && passwordEquals) {\n      return user;\n    }\n    throw new UnauthorizedException({\n      message: 'Incorrect email or password',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangeUserPasswordDto.html":{"url":"classes/ChangeUserPasswordDto.html","title":"class - ChangeUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangeUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-user-password.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'B2a3#d1c*', description: 'New Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            oldPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nexport class ChangeUserPasswordDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'B2a3#d1c*', description: 'New Password' })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirlineDto.html":{"url":"classes/CreateAirlineDto.html","title":"class - CreateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/create-airline.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                    Readonly\n                                airlineNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionRu\n                            \n                            \n                                    Readonly\n                                descriptionUa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MaxLength(50)@ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(200)@ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(200)@ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(200)@ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:40\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MaxLength } from 'class-validator';\n\nexport class CreateAirlineDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  readonly airlineNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  readonly airlineNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  readonly airlineNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  readonly descriptionUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  readonly descriptionEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  readonly descriptionRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirplaneDto.html":{"url":"classes/CreateAirplaneDto.html","title":"class - CreateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/create-airplane.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                    Readonly\n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MaxLength(50)@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@ApiProperty({example: '45', description: 'Amount Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayUnique()@IsNotEmpty()@ApiProperty({example: 'sections', description: 'Sections'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MaxLength,\n} from 'class-validator';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport class CreateAirplaneDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplaneName: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  amountOfSeat: number;\n\n  @IsArray()\n  @ArrayUnique()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'sections',\n    description: 'Sections',\n  })\n  readonly sections: Section[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirportDto.html":{"url":"classes/CreateAirportDto.html","title":"class - CreateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/create-airport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                    Readonly\n                                airportCountryUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameRu\n                            \n                            \n                                    Readonly\n                                airportNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownRu\n                            \n                            \n                                    Readonly\n                                airportTownUa\n                            \n                            \n                                    Readonly\n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Zhulyani', description: 'English airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Жуляны', description: 'Russian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsUppercase()@Length(2, 4)@ApiProperty({example: 'IEV', description: 'IATA'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUppercase,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateAirportDto {\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  readonly airportNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  readonly airportNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Жуляны',\n    description: 'Russian airport name',\n  })\n  readonly airportNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsUppercase()\n  @Length(2, 4)\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  readonly IATA: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  readonly airportCountryUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  readonly airportCountryEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  readonly airportCountryRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  readonly airportTownUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  readonly airportTownEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  readonly airportTownRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/create-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airline\n                            \n                            \n                                    Readonly\n                                airplane\n                            \n                            \n                                    Readonly\n                                arrivalAirport\n                            \n                            \n                                    Readonly\n                                arrivalTime\n                            \n                            \n                                    Readonly\n                                baggage\n                            \n                            \n                                    Readonly\n                                carryOnBaggage\n                            \n                            \n                                    Readonly\n                                departureAirport\n                            \n                            \n                                    Readonly\n                                departureTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                exchange\n                            \n                            \n                                    Readonly\n                                flightName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                refund\n                            \n                            \n                                    Readonly\n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsMongoId()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsNotEmpty()@ApiProperty({example: 'true', description: 'Hand luggage'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '0.7', description: 'Ticket exchange'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'PS-9065', description: 'Flight name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '0.5', description: 'Ticket return'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '200', description: 'Ticket taxa'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsMongoId,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\nimport { Airport } from 'src/airports/entities/airport.entity';\n\nexport class CreateFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  readonly flightName: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  readonly airline: Airline;\n\n  @IsMongoId()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplane: Airplane;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  readonly departureAirport: Airport;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly departureTime: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  readonly arrivalAirport: Airport;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  readonly arrivalTime: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  readonly taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  readonly baggage: number | null;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  readonly carryOnBaggage: boolean;\n\n  @IsOptional()\n  @ApiPropertyOptional({ example: '0.7', description: 'Ticket exchange' })\n  readonly exchange?: number | null;\n\n  @IsOptional()\n  @ApiPropertyOptional({ example: '0.5', description: 'Ticket return' })\n  readonly refund?: number | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/create-seat.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSeatDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSectionDto.html":{"url":"classes/CreateSectionDto.html","title":"class - CreateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/create-section.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                price\n                            \n                            \n                                    Readonly\n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Class)@ApiProperty({example: 'economy', description: 'Class', enum: Class, enumName: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '1700', description: 'Section Price'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '90', description: 'Seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { Class } from '../entities/section.entity';\n\nexport class CreateSectionDto {\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  readonly price: number;\n\n  @IsNotEmpty()\n  @IsEnum(Class)\n  @ApiProperty({\n    example: 'economy',\n    description: 'Class',\n    enum: Class,\n    enumName: 'Class',\n  })\n  readonly class: Class;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  readonly seats: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/create-ticket.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                birthday\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Readonly\n                                citizenshipUa\n                            \n                            \n                                    Readonly\n                                document\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                flight\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                numberOfSeat\n                            \n                            \n                                    Readonly\n                                sex\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                user\n                            \n                            \n                                    Readonly\n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiPropertyOptional({example: 'Ukraine', description: 'The English name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiPropertyOptional({example: 'Украина', description: 'The Russian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(7, 9)@ApiProperty({example: 'RS123456', description: 'Document'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'PS-9065', description: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Efremov', description: 'Last Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '23', description: 'Number Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Sex)@ApiProperty({example: 'male', description: 'Sex', enum: Sex, enumName: 'Sex'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'booked', description: 'Status', enum: Status, enumName: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Type)@ApiProperty({example: 'adult', description: 'Type', enum: Type, enumName: 'Type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'test@gmail.com', description: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:95\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\n\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\nimport { User } from 'src/users/entities/users.entity';\nimport { Sex, Status, Type } from '../entities/ticket.entity';\n\nexport class CreateTicketDto {\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  readonly flight: Flight;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  readonly user: User;\n\n  @IsNotEmpty()\n  @IsEnum(Sex)\n  @ApiProperty({\n    example: 'male',\n    description: 'Sex',\n    enum: Sex,\n    enumName: 'Sex',\n  })\n  readonly sex: Sex;\n\n  @IsNotEmpty()\n  @IsEnum(Type)\n  @ApiProperty({\n    example: 'adult',\n    description: 'Type',\n    enum: Type,\n    enumName: 'Type',\n  })\n  readonly type: Type;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  readonly birthday: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  readonly citizenshipUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  readonly citizenshipEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  readonly citizenshipRu?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(7, 9)\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  readonly document: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  readonly validity: string;\n\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({\n    example: 'booked',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  readonly status: Status;\n\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  readonly numberOfSeat?: Seat;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()@ApiProperty({example: 'test@gmail.com', description: 'E-mail'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@MaxLength(20)@IsString()@ApiProperty({example: 'Dmitry', description: 'First name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@MaxLength(20)@IsString()@ApiProperty({example: 'Yefremov', description: 'Last name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsPhoneNumber()@ApiProperty({example: '380951234567', description: 'Phone number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsPhoneNumber,\n  IsString,\n  Matches,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @MaxLength(20)\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @MaxLength(20)\n  @IsString()\n  @ApiProperty({ example: 'Yefremov', description: 'Last name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsPhoneNumber()\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  readonly phoneNumber: number;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  readonly email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\n\n@Module({\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFile(folder: Folder, file: any)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport path from 'path';\nimport fs from 'fs';\nimport * as uuid from 'uuid';\n\nexport enum Folder {\n  Airline = 'airline',\n}\n\n@Injectable()\nexport class FilesService {\n  async createFile(folder: Folder, file: any): Promise {\n    try {\n      const fileExtension = file.originalname.split('.').pop();\n      const fileName = uuid.v4() + '.' + fileExtension;\n      const filePath = path.resolve(__dirname, 'static', folder);\n      if (!fs.existsSync(filePath)) {\n        fs.mkdirSync(filePath, { recursive: true });\n      }\n      fs.writeFileSync(path.join(filePath, fileName), file.buffer);\n      return folder + '/' + fileName;\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while writing the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Flight.html":{"url":"classes/Flight.html","title":"class - Flight","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/entities/flights.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                airplane\n                            \n                            \n                                arrivalAirport\n                            \n                            \n                                arrivalTime\n                            \n                            \n                                baggage\n                            \n                            \n                                carryOnBaggage\n                            \n                            \n                                departureAirport\n                            \n                            \n                                departureTime\n                            \n                            \n                                    Optional\n                                exchange\n                            \n                            \n                                flightName\n                            \n                            \n                                    Optional\n                                refund\n                            \n                            \n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})@Prop({required: true, type: undefined, ref: 'Airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, type: undefined, ref: 'Airplane'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'true', description: 'Hand luggage'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: '0.7', description: 'Ticket exchange'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: '0.5', description: 'Ticket return'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '200', description: 'Ticket taxa'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:80\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Airport } from 'src/airports/entities/airport.entity';\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\n\nexport type FlightDocument = Flight & Document;\n\n@Schema()\nexport class Flight {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  @Prop({ required: true, unique: true, trim: true })\n  flightName: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airline',\n  })\n  airline: Airline;\n\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airplane',\n  })\n  airplane: Airplane;\n\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  departureAirport: Airport;\n\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  @Prop({ required: true })\n  departureTime: string;\n\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  arrivalAirport: Airport;\n\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  @Prop({ required: true })\n  arrivalTime: string;\n\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  @Prop({})\n  taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  @Prop({})\n  baggage: number | null;\n\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  @Prop({ required: true })\n  carryOnBaggage: boolean;\n\n  @ApiPropertyOptional({ example: '0.7', description: 'Ticket exchange' })\n  @Prop({})\n  exchange?: number | null;\n\n  @ApiPropertyOptional({ example: '0.5', description: 'Ticket return' })\n  @Prop({})\n  refund?: number | null;\n}\nexport const FlightSchema = SchemaFactory.createForClass(Flight);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                flights\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(flightDto: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Flight'})@ApiCreatedResponse({description: 'Created', type: Flight})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateFlightDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Flight'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Flights'})@ApiOkResponse({description: 'Success', type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Flight data'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(flightDto: SearchFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search Flights'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBadRequestResponse({description: 'Bad Request'})@ApiBody({type: SearchFlightDto})@Post('search')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Flight data'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateFlightDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { Flight } from './entities/flights.entity';\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Flights')\n@Controller('flights')\nexport class FlightsController {\n  constructor(private readonly flightsService: FlightsService) {}\n\n  @ApiOperation({ summary: 'Create a Flight' })\n  @ApiCreatedResponse({ description: 'Created', type: Flight })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateFlightDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() flightDto: CreateFlightDto) {\n    return this.flightsService.createFlight(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Search Flights' })\n  @ApiCreatedResponse({ description: 'Created', type: [Flight] })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiBody({ type: SearchFlightDto })\n  @Post('search')\n  search(@Body() flightDto: SearchFlightDto) {\n    return this.flightsService.searchFlights(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Flights' })\n  @ApiOkResponse({ description: 'Success', type: [Flight] })\n  @Get()\n  findAll() {\n    return this.flightsService.getAllFlights();\n  }\n\n  @ApiOperation({ summary: 'Get Flight data' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.flightsService.getFlightById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Flight data' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateFlightDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() flightDto: UpdateFlightDto) {\n    return this.flightsService.updateFlightData(id, flightDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Flight' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.flightsService.deleteFlight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_FlightsModule_exports\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { Flight, FlightSchema } from './entities/flights.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Flight.name, schema: FlightSchema }]),\n  ],\n  controllers: [FlightsController],\n  providers: [FlightsService],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createFlight\n                            \n                            \n                                    Public\n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Public\n                                    Async\n                                getAllFlights\n                            \n                            \n                                    Public\n                                    Async\n                                getFlightById\n                            \n                            \n                                    Public\n                                    Async\n                                searchFlights\n                            \n                            \n                                    Public\n                                    Async\n                                updateFlightData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(flightModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(flightDto: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllFlights()\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getFlightById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlightById(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            searchFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchFlights(flightDto: SearchFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateFlightData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlightData(flightId: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport Fuse from 'fuse.js';\nimport moment from 'moment';\n\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { Flight, FlightDocument } from './entities/flights.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(\n    @InjectModel(Flight.name) private flightModel: Model,\n  ) {}\n\n  public async createFlight(flightDto: CreateFlightDto): Promise {\n    let flight = await this.flightModel\n      .findOne({\n        flightName: flightDto.flightName,\n      })\n      .exec();\n    if (flight) {\n      throw new BadRequestException('Flight with this name already exists');\n    }\n\n    try {\n      flight = await this.flightModel.create({ ...flightDto });\n      flight = await this.flightModel\n        .findOne({\n          flightName: flightDto.flightName,\n        })\n        .select({ __v: false })\n        .populate({ path: 'airline', select: '-__v' })\n        .populate({\n          path: 'airplane',\n          select: '-__v',\n          populate: {\n            path: 'sections',\n            select: '-__v',\n            populate: { path: 'seats', select: '-__v' },\n          },\n        })\n        .populate({ path: 'departureAirport', select: '-__v' })\n        .populate({ path: 'arrivalAirport', select: '-__v' })\n        .exec();\n      return flight;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllFlights(): Promise {\n    const flights = await this.flightModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flights;\n  }\n\n  public async getFlightById(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return flight;\n  }\n\n  public async updateFlightData(\n    flightId: ObjectId,\n    flightDto: UpdateFlightDto,\n  ): Promise {\n    let flight = await this.flightModel.findById(flightId).exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (flightDto.airline) {\n      flight.airline = flightDto.airline;\n    }\n    if (flightDto.airplane) {\n      flight.airplane = flightDto.airplane;\n    }\n    if (flightDto.arrivalAirport) {\n      flight.arrivalAirport = flightDto.arrivalAirport;\n    }\n    if (flightDto.arrivalTime) {\n      flight.arrivalTime = flightDto.arrivalTime;\n    }\n    if (flightDto.baggage) {\n      flight.baggage = flightDto.baggage;\n    }\n    if (flightDto.carryOnBaggage) {\n      flight.carryOnBaggage = flightDto.carryOnBaggage;\n    }\n    if (flightDto.departureAirport) {\n      flight.departureAirport = flightDto.departureAirport;\n    }\n    if (flightDto.departureTime) {\n      flight.departureTime = flightDto.departureTime;\n    }\n    if (flightDto.exchange) {\n      flight.exchange = flightDto.exchange;\n    }\n    if (flightDto.flightName) {\n      flight.flightName = flightDto.flightName;\n    }\n    if (flightDto.refund) {\n      flight.refund = flightDto.refund;\n    }\n    if (flightDto.taxa) {\n      flight.taxa = flightDto.taxa;\n    }\n    await flight.save();\n\n    flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async deleteFlight(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findByIdAndDelete(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return flight;\n  }\n\n  public async searchFlights(flightDto: SearchFlightDto): Promise {\n    let secondDepTime: string = flightDto.firstDepTime;\n    if (flightDto.secondDepTime) {\n      secondDepTime = flightDto.secondDepTime;\n    }\n\n    const initialFlights = await this.flightModel\n      .find({\n        departureTime: {\n          $gte: moment(flightDto.firstDepTime)\n            .startOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n          $lte: moment(secondDepTime)\n            .endOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n        },\n      })\n      .select({ __v: false })\n      .populate({\n        path: 'airline',\n        select: '-__v',\n      })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    const arr = [];\n    initialFlights.forEach((a) => {\n      if (flightDto.class.length > 1) {\n        if (a.airplane.amountOfSeat >= flightDto.count) {\n          a.airplane.sections.forEach((s) => {\n            for (const q of flightDto.class)\n              if (s.class === q) {\n                arr.push(a);\n                break;\n              }\n          });\n        }\n      } else {\n        a.airplane.sections.forEach((s) => {\n          for (const q of flightDto.class)\n            if (s.class === q) {\n              if (s.seats.length >= flightDto.count) {\n                arr.push(a);\n              }\n            }\n        });\n      }\n    });\n    const flights = Array.from(new Set(arr));\n\n    const optionsForDeparture = {\n      includeScore: true,\n      keys: [\n        'departureAirport.airportNameUa',\n        'departureAirport.airportNameEng',\n        'departureAirport.airportNameRu',\n        'departureAirport.IATA',\n        'departureAirport.airportTownUa',\n        'departureAirport.airportTownEng',\n        'departureAirport.airportTownRu',\n      ],\n    };\n\n    let fuse = new Fuse(flights, optionsForDeparture);\n    let result = fuse.search(flightDto.departure).map((r) => r.item);\n    const optionsForArrival = {\n      includeScore: true,\n      keys: [\n        'arrivalAirport.airportNameUa',\n        'arrivalAirport.airportNameEng',\n        'arrivalAirport.airportNameRu',\n        'arrivalAirport.IATA',\n        'arrivalAirport.airportTownUa',\n        'arrivalAirport.airportTownEng',\n        'arrivalAirport.airportTownRu',\n      ],\n    };\n\n    fuse = new Fuse(result, optionsForArrival);\n    result = fuse.search(flightDto.arrival).map((r) => r.item);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\nimport { UsersService } from 'src/users/users.service';\n\nconst cookieExtractor = function (req: any) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n};\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private userService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: cookieExtractor,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.getUserByEmail(payload.email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginUserDto extends PartialType(\n  OmitType(CreateUserDto, ['firstName', 'lastName', 'phoneNumber'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\n\nimport { ROLES_KEY } from '../decorators/roles-auth.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    try {\n      const requiredRoles = this.reflector.getAllAndOverride(\n        ROLES_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      if (!requiredRoles) {\n        return true;\n      }\n\n      const req = context.switchToHttp().getRequest();\n      let token = null;\n      if (req && req.cookies) {\n        token = req.cookies['access_token'];\n      }\n\n      const user = this.jwtService.verify(token);\n      req.user = user;\n      return requiredRoles.some((role) => user.role?.includes(role));\n    } catch (e) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFlightDto.html":{"url":"classes/SearchFlightDto.html","title":"class - SearchFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/search-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                arrival\n                            \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                count\n                            \n                            \n                                    Readonly\n                                departure\n                            \n                            \n                                    Readonly\n                                firstDepTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                secondDepTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrival\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsArray()@IsEnum(Class, {each: true})@ArrayNotEmpty()@ApiProperty({example: '[\"business\"]', description: 'Class of section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@Min(1)@Max(9)@ApiProperty({example: '3', description: 'Count of seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsDateString()@ApiProperty({example: '2021-05-15T15:35:00.000Z', description: 'First range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            secondDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()@IsString()@IsDateString()@ApiPropertyOptional({example: '2021-05-18T15:35:00.000Z', description: 'Second range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:45\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsIn,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Max,\n  MaxLength,\n  Min,\n} from 'class-validator';\nimport { Class } from 'src/sections/entities/section.entity';\n\nexport class SearchFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure',\n  })\n  readonly departure: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsDateString()\n  @ApiProperty({\n    example: '2021-05-15T15:35:00.000Z',\n    description: 'First range departure time',\n  })\n  readonly firstDepTime: string;\n\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @IsDateString()\n  @ApiPropertyOptional({\n    example: '2021-05-18T15:35:00.000Z',\n    description: 'Second range departure time',\n  })\n  readonly secondDepTime?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival',\n  })\n  readonly arrival: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @IsEnum(Class, { each: true })\n  @ArrayNotEmpty()\n  @ApiProperty({\n    example: '[\"business\"]',\n    description: 'Class of section',\n  })\n  readonly class: Class[];\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(1)\n  @Max(9)\n  @ApiProperty({\n    example: '3',\n    description: 'Count of seats',\n  })\n  readonly count: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seat.html":{"url":"classes/Seat.html","title":"class - Seat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/entities/seat.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                number\n                            \n                            \n                                section\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1', description: 'Number of Seat'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Section', description: 'Section'})@Prop({required: true, trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'free', description: 'Status', enum: Status, enumName: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:43\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type SeatDocument = Seat & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  Free = 'free',\n  NotAvailable = 'notAvailable',\n}\n\n@Schema()\nexport class Seat {\n  @ApiProperty({\n    example: 'Section',\n    description: 'Section',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Section',\n  })\n  section: Section;\n\n  @ApiProperty({ example: '1', description: 'Number of Seat' })\n  @Prop({ required: true, trim: true })\n  number: number;\n\n  @ApiProperty({\n    example: 'free',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Free })\n  status: Status;\n}\nexport const SeatSchema = SchemaFactory.createForClass(Seat);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                seats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Seat data'})@ApiOkResponse({description: 'Success', type: Seat})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateSeatDto})@UseGuards(JwtAuthGuard)@ApiCookieAuth()@Patch(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Patch, UseGuards } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { Seat } from './entities/seat.entity';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Seats')\n@Controller('seats')\nexport class SeatsController {\n  constructor(private readonly seatsService: SeatsService) {}\n\n  @ApiOperation({ summary: 'Update Seat data' })\n  @ApiOkResponse({ description: 'Success', type: Seat })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateSeatDto })\n  @UseGuards(JwtAuthGuard)\n  @ApiCookieAuth()\n  @Patch(':id/update')\n  update(@Param('id') id: ObjectId, @Body() seatDto: UpdateSeatDto) {\n    return this.seatsService.updateSeatData(id, seatDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SeatsModule_exports\n\n\n\n\nSeatsService \n\nSeatsService \n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { Seat, SeatSchema } from './entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SeatsController],\n  providers: [SeatsService],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateSeatData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSeatData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeatData(seatId: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seatId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Seat, SeatDocument } from './entities/seat.entity';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\n\n@Injectable()\nexport class SeatsService {\n  constructor(@InjectModel(Seat.name) private seatModel: Model) {}\n\n  public async updateSeatData(\n    seatId: ObjectId,\n    seatDto: UpdateSeatDto,\n  ): Promise {\n    let seat = await this.seatModel.findById(seatId).exec();\n    if (!seat) {\n      throw new HttpException(\n        'Seat with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    if (seatDto.status) {\n      seat.status = seatDto.status;\n    }\n\n    await seat.save();\n    seat = await this.seatModel.findById(seatId).select({ __v: false }).exec();\n    return seat;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Section.html":{"url":"classes/Section.html","title":"class - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/entities/section.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                price\n                            \n                            \n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'economy', description: 'Class', enum: Class, enumName: 'Class'})@Prop({required: true, trim: true, enum: Class})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1700', description: 'Section Price'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '90', description: 'Seats'})@Prop({trim: true, type: undefined, ref: 'Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type SectionDocument = Section & Document;\n\nexport enum Class {\n  Business = 'business',\n  Economy = 'economy',\n}\n\n@Schema()\nexport class Section {\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  @Prop({ required: true, trim: true })\n  price: number;\n\n  @ApiProperty({\n    example: 'economy',\n    description: 'Class',\n    enum: Class,\n    enumName: 'Class',\n  })\n  @Prop({ required: true, trim: true, enum: Class })\n  class: Class;\n\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Seat',\n  })\n  seats: Seat[];\n}\nexport const SectionSchema = SchemaFactory.createForClass(Section);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SectionsController.html":{"url":"controllers/SectionsController.html","title":"controller - SectionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SectionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sections\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(sectionDto: CreateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Section'})@ApiCreatedResponse({description: 'Created', type: Section})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateSectionDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Section'})@ApiOkResponse({description: 'Success', type: Section})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:90\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Sections'})@ApiOkResponse({description: 'Success', type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Section data'})@ApiOkResponse({description: 'Success', type: Section})@ApiNotFoundResponse({description: 'Not Found'})@ApiParam({name: 'id', type: 'string'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Section data'})@ApiOkResponse({description: 'Success', type: Section})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiBody({type: UpdateSectionDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:77\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section } from './entities/section.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Sections')\n@Controller('sections')\nexport class SectionsController {\n  constructor(private readonly sectionsService: SectionsService) {}\n\n  @ApiOperation({ summary: 'Create a Section' })\n  @ApiCreatedResponse({ description: 'Created', type: Section })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateSectionDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() sectionDto: CreateSectionDto) {\n    return this.sectionsService.createSection(sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Sections' })\n  @ApiOkResponse({ description: 'Success', type: [Section] })\n  @Get()\n  findAll() {\n    return this.sectionsService.getAllSections();\n  }\n\n  @ApiOperation({ summary: 'Get Section data' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.sectionsService.getSectionById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Section data' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBody({ type: UpdateSectionDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() sectionDto: UpdateSectionDto) {\n    return this.sectionsService.updateSectionData(id, sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Section' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.sectionsService.deleteSection(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SectionsModule.html":{"url":"modules/SectionsModule.html","title":"module - SectionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SectionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\n\nSectionsService \n\nSectionsService \n\n\n\nSectionsModule\n\nSectionsModule\n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sections/sections.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SectionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { SectionsController } from './sections.controller';\nimport { Section, SectionSchema } from './entities/section.entity';\nimport { Seat, SeatSchema } from 'src/seats/entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Section.name, schema: SectionSchema }]),\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SectionsController],\n  providers: [SectionsService],\n  exports: [SectionsService],\n})\nexport class SectionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SectionsService.html":{"url":"injectables/SectionsService.html","title":"injectable - SectionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SectionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createSection\n                            \n                            \n                                    Public\n                                    Async\n                                deleteSection\n                            \n                            \n                                    Public\n                                    Async\n                                getAllSections\n                            \n                            \n                                    Public\n                                    Async\n                                getSectionById\n                            \n                            \n                                    Public\n                                    Async\n                                updateSectionData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sectionModel: Model, seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sections/sections.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSection(sectionDto: CreateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSection(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllSections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllSections()\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getSectionById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionById(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSectionData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSectionData(sectionId: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Section, SectionDocument } from './entities/section.entity';\nimport { Seat, SeatDocument } from 'src/seats/entities/seat.entity';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\n\n@Injectable()\nexport class SectionsService {\n  constructor(\n    @InjectModel(Section.name) private sectionModel: Model,\n    @InjectModel(Seat.name) private seatModel: Model,\n  ) {}\n\n  public async createSection(sectionDto: CreateSectionDto): Promise {\n    try {\n      let section = await this.sectionModel.create({\n        price: sectionDto.price,\n        class: sectionDto.class,\n        seats: [],\n      });\n      for (let i = 1; i  {\n    const sections = await this.sectionModel\n      .find()\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return sections;\n  }\n\n  public async getSectionById(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findById(sectionId)\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n\n  public async updateSectionData(\n    sectionId: ObjectId,\n    sectionDto: UpdateSectionDto,\n  ): Promise {\n    let section = await this.sectionModel.findById(sectionId).exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (sectionDto.class) {\n      section.class = sectionDto.class;\n    }\n    if (sectionDto.price) {\n      section.price = sectionDto.price;\n    }\n\n    await section.save();\n    section = await this.sectionModel\n      .findById(sectionId)\n      .select({ __v: false })\n      .exec();\n    return section;\n  }\n\n  public async deleteSection(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findByIdAndDelete(sectionId)\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ticket.html":{"url":"classes/Ticket.html","title":"class - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/entities/ticket.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthday\n                            \n                            \n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                citizenshipUa\n                            \n                            \n                                document\n                            \n                            \n                                firstName\n                            \n                            \n                                flight\n                            \n                            \n                                lastName\n                            \n                            \n                                numberOfSeat\n                            \n                            \n                                sex\n                            \n                            \n                                status\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                            \n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: 'Ukraine', description: 'The English name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: 'Украина', description: 'The Russian name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'RS123456', description: 'Document'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:102\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Dmitry', description: 'First Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight'})@Prop({required: true, type: undefined, ref: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Efremov', description: 'Last Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Number Of Seat'})@Prop({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:122\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'male', description: 'Sex', enum: Sex, enumName: 'Sex'})@Prop({required: true, trim: true, enum: Sex})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'booked', description: 'Status', enum: Status, enumName: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'adult', description: 'Type', enum: Type, enumName: 'Type'})@Prop({required: true, trim: true, enum: Type})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'User'})@Prop({required: true, type: undefined, ref: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:106\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { User } from 'src/users/entities/users.entity';\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type TicketDocument = Ticket & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  NotAvailable = 'notAvailable',\n}\n\nexport enum Sex {\n  Male = 'male',\n  Female = 'female',\n}\n\nexport enum Type {\n  Adult = 'adult',\n  Child = 'child',\n  Baby = 'baby',\n  Disabled = 'disabled',\n}\n\n@Schema()\nexport class Ticket {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Flight',\n  })\n  flight: Flight;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n  })\n  user: User;\n\n  @ApiProperty({\n    example: 'male',\n    description: 'Sex',\n    enum: Sex,\n    enumName: 'Sex',\n  })\n  @Prop({ required: true, trim: true, enum: Sex })\n  sex: Sex;\n\n  @ApiProperty({\n    example: 'adult',\n    description: 'Type',\n    enum: Type,\n    enumName: 'Type',\n  })\n  @Prop({ required: true, trim: true, enum: Type })\n  type: Type;\n\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  @Prop({ required: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  @Prop({ required: true })\n  lastName: string;\n\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  @Prop({ required: true })\n  birthday: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  @Prop({ required: true, trim: true })\n  citizenshipUa: string;\n\n  @ApiPropertyOptional({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipEng?: string;\n\n  @ApiPropertyOptional({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipRu?: string;\n\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  @Prop({ required: true, trim: true })\n  document: string;\n\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  @Prop({ required: true })\n  validity: string;\n\n  @ApiProperty({\n    example: 'booked',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Booked })\n  status: Status;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  @Prop({ default: null })\n  numberOfSeat: Seat | null;\n}\nexport const TicketSchema = SchemaFactory.createForClass(Ticket);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                findAll\n                            \n                            \n                                return\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(ticketDto: CreateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Ticket'})@ApiCreatedResponse({description: 'Created', type: Ticket})@ApiBody({type: CreateTicketDto})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Post('reserve')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(req: any, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Ticket data'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Tickets'})@ApiOkResponse({description: 'Success', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            return\n                        \n                        \n                    \n                \n            \n            \n                \nreturn(req: any, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Return Ticket'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:104\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(req: any, id: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Ticket data'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateTicketDto})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { TicketsService } from './tickets.service';\nimport { Ticket } from './entities/ticket.entity';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Tickets')\n@Controller('tickets')\nexport class TicketsController {\n  constructor(private readonly ticketsService: TicketsService) {}\n\n  @ApiOperation({ summary: 'Create a Ticket' })\n  @ApiCreatedResponse({ description: 'Created', type: Ticket })\n  @ApiBody({ type: CreateTicketDto })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('reserve')\n  create(@Body() ticketDto: CreateTicketDto) {\n    return this.ticketsService.createTicket(ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Tickets' })\n  @ApiOkResponse({ description: 'Success', type: [Ticket] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.ticketsService.getAllTickets();\n  }\n\n  @ApiOperation({ summary: 'Get Ticket data' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  find(@Request() req: any, @Param('id') id: ObjectId) {\n    return this.ticketsService.getTicketById(req.user._id, id);\n  }\n\n  @ApiOperation({ summary: 'Update Ticket data' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateTicketDto })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(\n    @Request() req: any,\n    @Param('id') id: ObjectId,\n    @Body() ticketDto: UpdateTicketDto,\n  ) {\n    return this.ticketsService.updateTicketData(req.user._id, id, ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Return Ticket' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  return(@Request() req: any, @Param('id') id: ObjectId) {\n    return this.ticketsService.returnTicket(req.user._id, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_imports\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tickets/tickets.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { TicketsService } from './tickets.service';\nimport { TicketsController } from './tickets.controller';\nimport { AirplanesModule } from 'src/airplanes/airplanes.module';\nimport { AirportsModule } from 'src/airports/airports.module';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { User, UserSchema } from 'src/users/entities/users.entity';\nimport { Flight, FlightSchema } from 'src/flights/entities/flights.entity';\nimport { Ticket, TicketSchema } from './entities/ticket.entity';\nimport {\n  Airplane,\n  AirplaneSchema,\n} from 'src/airplanes/entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Ticket.name, schema: TicketSchema },\n      { name: Flight.name, schema: FlightSchema },\n      { name: Airplane.name, schema: AirplaneSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n    UsersModule,\n    AirportsModule,\n    FlightsModule,\n    AirplanesModule,\n  ],\n  controllers: [TicketsController],\n  providers: [TicketsService],\n  exports: [TicketsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTicket\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTickets\n                            \n                            \n                                    Public\n                                    Async\n                                getTicketById\n                            \n                            \n                                    Public\n                                    Async\n                                returnTicket\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicketData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketModel: Model, flightModel: Model, airplaneModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/tickets.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTicket(ticketDto: CreateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllTickets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTickets()\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getTicketById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTicketById(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            returnTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnTicket(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateTicketData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTicketData(userId: ObjectId, ticketId: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Status, Ticket, TicketDocument } from './entities/ticket.entity';\nimport { Flight, FlightDocument } from 'src/flights/entities/flights.entity';\nimport { User, UserDocument } from 'src/users/entities/users.entity';\nimport {\n  Airplane,\n  AirplaneDocument,\n} from 'src/airplanes/entities/airplane.entity';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\n\n@Injectable()\nexport class TicketsService {\n  constructor(\n    @InjectModel(Ticket.name) private ticketModel: Model,\n    @InjectModel(Flight.name) private flightModel: Model,\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  public async createTicket(ticketDto: CreateTicketDto): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const user = await this.userModel\n      .findById(ticketDto.user)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const ticket = await this.ticketModel.create({ ...ticketDto });\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    user.tickets.push(ticket._id);\n    await user.save();\n    airplane.amountOfSeat -= 1;\n    await airplane.save();\n    return ticket;\n  }\n\n  public async getAllTickets(): Promise {\n    const tickets = await this.ticketModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    return tickets;\n  }\n\n  public async getTicketById(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    const ticket = await this.ticketModel\n      .findById(ticketId)\n      // .findOne({ user: userId })\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    if (!ticket) {\n      throw new HttpException(\n        'Ticket with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return ticket;\n  }\n\n  public async updateTicketData(\n    userId: ObjectId,\n    ticketId: ObjectId,\n    ticketDto: UpdateTicketDto,\n  ): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    return ticket;\n  }\n\n  public async returnTicket(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    let ticket = await this.ticketModel.findById(ticketId).exec();\n    const flight = await this.flightModel.findById(ticket.flight).exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    ticket = await this.ticketModel.findByIdAndDelete(ticketId).exec();\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    ticket.status = Status.Returned;\n    await ticket.save();\n    airplane.amountOfSeat += 1;\n    await airplane.save();\n    return ticket;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirlineDto.html":{"url":"classes/UpdateAirlineDto.html","title":"class - UpdateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/update-airline.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirlineDto } from './create-airline.dto';\n\nexport class UpdateAirlineDto extends PartialType(CreateAirlineDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirplaneDto.html":{"url":"classes/UpdateAirplaneDto.html","title":"class - UpdateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/update-airplane.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirplaneDto } from './create-airplane.dto';\n\nexport class UpdateAirplaneDto extends PartialType(CreateAirplaneDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirportDto.html":{"url":"classes/UpdateAirportDto.html","title":"class - UpdateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/update-airport.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirportDto } from './create-airport.dto';\n\nexport class UpdateAirportDto extends PartialType(CreateAirportDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/update-flight.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class UpdateFlightDto extends PartialType(CreateFlightDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/update-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'Booked', description: 'Class', enum: Status, enumName: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/update-seat.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class UpdateSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({\n    example: 'Booked',\n    description: 'Class',\n    enum: Status,\n    enumName: 'Status',\n  })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSectionDto.html":{"url":"classes/UpdateSectionDto.html","title":"class - UpdateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/update-section.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateSectionDto } from './create-section.dto';\n\nexport class UpdateSectionDto extends PartialType(CreateSectionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/update-ticket.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateTicketDto } from './create-ticket.dto';\n\nexport class UpdateTicketDto extends PartialType(CreateTicketDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDataDto.html":{"url":"classes/UpdateUserDataDto.html","title":"class - UpdateUserDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-data.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDataDto extends PartialType(\n  OmitType(CreateUserDto, ['password'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                role\n                            \n                            \n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'E-mail'})@Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Іван', description: 'First name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Шевченко', description: 'Last name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'A1b2@c3d!', description: 'Password'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '380951234567', description: 'Phone number'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user', description: 'Role', enum: Role, enumName: 'Role'})@Prop({required: true, trim: true, enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Ticket[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'tickets', description: 'Tickets'})@Prop({trim: true, type: undefined, ref: 'Ticket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:58\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Ticket } from 'src/tickets/entities/ticket.entity';\n\nexport type UserDocument = User & Document;\n\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n\n@Schema()\nexport class User {\n  @ApiProperty({ example: 'Іван', description: 'First name' })\n  @Prop({ required: true, trim: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Шевченко', description: 'Last name' })\n  @Prop({ required: true, trim: true })\n  lastName: string;\n\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  @Prop({ required: true })\n  phoneNumber: number;\n\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  @Prop({ required: true })\n  password: string;\n\n  @ApiProperty({\n    example: 'test@gmail.com',\n    description: 'E-mail',\n  })\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'Role',\n    enum: Role,\n    enumName: 'Role',\n  })\n  @Prop({ required: true, trim: true, enum: Role, default: Role.User })\n  role: Role;\n\n  @ApiProperty({\n    example: 'tickets',\n    description: 'Tickets',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Ticket',\n  })\n  tickets: Ticket[];\n}\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \nchangePassword(req: any, userDto: ChangeUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Change User password'})@ApiOkResponse({description: 'Success', type: User})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: ChangeUserPasswordDto})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch('/changepassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete User'})@ApiOkResponse({description: 'Success', type: User})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Delete('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Users'})@ApiOkResponse({description: 'Success', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiCookieAuth()@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get User data'})@ApiOkResponse({description: 'Success', type: User})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiCookieAuth()@Roles('admin')@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateData\n                        \n                        \n                    \n                \n            \n            \n                \nupdateData(req: any, userDto: UpdateUserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update User data'})@ApiOkResponse({description: 'Success', type: User})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateUserDataDto})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch('/update')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { UsersService } from './users.service';\nimport { User } from './entities/users.entity';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOperation({ summary: 'Get data all Users' })\n  @ApiOkResponse({ description: 'Success', type: [User] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @ApiOperation({ summary: 'Get User data' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.usersService.getUserById(id);\n  }\n\n  @ApiOperation({ summary: 'Update User data' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateUserDataDto })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('/update')\n  updateData(@Request() req: any, @Body() userDto: UpdateUserDataDto) {\n    return this.usersService.updateUserData(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Change User password' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: ChangeUserPasswordDto })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('/changepassword')\n  changePassword(@Request() req: any, @Body() userDto: ChangeUserPasswordDto) {\n    return this.usersService.changeUserPassword(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Delete User' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('')\n  delete(@Request() req: any) {\n    return this.usersService.deleteUser(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { User, UserSchema } from './entities/users.entity';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getUserById\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(userId: ObjectId, userDto: ChangeUserPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUserData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserData(userId: ObjectId, userDto: UpdateUserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User, UserDocument } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  public async createUser(userDto: CreateUserDto): Promise {\n    try {\n      let user = await this.userModel.create({ ...userDto });\n      user = await this.userModel\n        .findOne({ email: userDto.email })\n        .select({ password: false, __v: false })\n        .exec();\n      return user;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllUsers(): Promise {\n    const users = await this.userModel\n      .find()\n      .select({ password: false, __v: false })\n      .exec();\n    return users;\n  }\n\n  public async getUserById(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async updateUserData(\n    userId: ObjectId,\n    userDto: UpdateUserDataDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (userDto.email) {\n      user.email = userDto.email;\n    }\n    if (userDto.firstName) {\n      user.firstName = userDto.firstName;\n    }\n    if (userDto.lastName) {\n      user.lastName = userDto.lastName;\n    }\n    if (userDto.phoneNumber) {\n      user.phoneNumber = userDto.phoneNumber;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async changeUserPassword(\n    userId: ObjectId,\n    userDto: ChangeUserPasswordDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const passwordEquals = await bcrypt.compare(\n      userDto.oldPassword,\n      user.password,\n    );\n    const newPasswordEquals = await bcrypt.compare(\n      userDto.newPassword,\n      user.password,\n    );\n\n    if (!passwordEquals) {\n      throw new HttpException('Password mismatch', HttpStatus.BAD_REQUEST);\n    } else if (newPasswordEquals) {\n      throw new HttpException(\n        'New and old passwords must not match',\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const salt = await bcrypt.genSalt();\n      const hashPassword = await bcrypt.hash(userDto.newPassword, salt);\n      user.password = hashPassword;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async deleteUser(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findByIdAndDelete(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async getUserByEmail(email: string): Promise {\n    const user = await this.userModel.findOne({ email: email }).exec();\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/airlines/airlines.controller.ts\n            \n            controller\n            AirlinesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airlines/airlines.service.ts\n            \n            injectable\n            AirlinesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/create-airline.dto.ts\n            \n            class\n            CreateAirlineDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/update-airline.dto.ts\n            \n            class\n            UpdateAirlineDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            class\n            Airline\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            variable\n            AirlineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.controller.ts\n            \n            controller\n            AirplanesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.service.ts\n            \n            injectable\n            AirplanesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airplanes/dto/create-airplane.dto.ts\n            \n            class\n            CreateAirplaneDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/dto/update-airplane.dto.ts\n            \n            class\n            UpdateAirplaneDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            class\n            Airplane\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            variable\n            AirplaneSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/airports.controller.ts\n            \n            controller\n            AirportsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airports/airports.service.ts\n            \n            injectable\n            AirportsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airports/dto/create-airport.dto.ts\n            \n            class\n            CreateAirportDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/dto/update-airport.dto.ts\n            \n            class\n            UpdateAirportDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            class\n            Airport\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            variable\n            AirportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            variable\n            cookieExtractor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/flights/dto/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/dto/search-flight.dto.ts\n            \n            class\n            SearchFlightDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/dto/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            class\n            Flight\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            variable\n            FlightSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            variable\n            SeatSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sections/dto/create-section.dto.ts\n            \n            class\n            CreateSectionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/dto/update-section.dto.ts\n            \n            class\n            UpdateSectionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            class\n            Section\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            variable\n            SectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/sections.controller.ts\n            \n            controller\n            SectionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sections/sections.service.ts\n            \n            injectable\n            SectionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tickets/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            class\n            Ticket\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            variable\n            TicketSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/change-user-password.dto.ts\n            \n            class\n            ChangeUserPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-data.dto.ts\n            \n            class\n            UpdateUserDataDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            - : 0.0.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/throttler : ^1.1.4\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/multer : ^1.4.5\n        \n            bcrypt : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            cache-manager : ^3.4.3\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.5\n        \n            cross-env : ^7.0.3\n        \n            csurf : ^1.11.0\n        \n            fuse.js : ^6.4.6\n        \n            helmet : ^4.6.0\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.12.9\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Class   (src/.../section.entity.ts)\n                        \n                        \n                            Folder   (src/.../files.service.ts)\n                        \n                        \n                            Role   (src/.../users.entity.ts)\n                        \n                        \n                            Sex   (src/.../ticket.entity.ts)\n                        \n                        \n                            Status   (src/.../seat.entity.ts)\n                        \n                        \n                            Status   (src/.../ticket.entity.ts)\n                        \n                        \n                            Type   (src/.../ticket.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/sections/entities/section.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Class\n                    \n                \n                        \n                            \n                                 Business\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 Economy\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/files/files.service.ts\n    \n        \n            \n                \n                    \n                        \n                        Folder\n                    \n                \n                        \n                            \n                                 Airline\n                            \n                        \n                        \n                            \n                                Value : airline\n                            \n                        \n            \n        \n\n    src/users/entities/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Type\n                    \n                \n                        \n                            \n                                 Adult\n                            \n                        \n                        \n                            \n                                Value : adult\n                            \n                        \n                        \n                            \n                                 Child\n                            \n                        \n                        \n                            \n                                Value : child\n                            \n                        \n                        \n                            \n                                 Baby\n                            \n                        \n                        \n                            \n                                Value : baby\n                            \n                        \n                        \n                            \n                                 Disabled\n                            \n                        \n                        \n                            \n                                Value : disabled\n                            \n                        \n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 Free\n                            \n                        \n                        \n                            \n                                Value : free\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AirlinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirplanesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SectionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_exports\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nSectionsService \n\nSectionsService \n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineDocument   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneDocument   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportDocument   (src/.../airport.entity.ts)\n                        \n                        \n                            FlightDocument   (src/.../flights.entity.ts)\n                        \n                        \n                            SeatDocument   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionDocument   (src/.../section.entity.ts)\n                        \n                        \n                            TicketDocument   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirlineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airplanes/entities/airplane.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirplaneDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airports/entities/airport.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirportDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/flights/entities/flights.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FlightDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/seats/entities/seat.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SeatDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/sections/entities/section.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tickets/entities/ticket.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TicketDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/entities/users.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineSchema   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneSchema   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportSchema   (src/.../airport.entity.ts)\n                        \n                        \n                            cookieExtractor   (src/.../jwt.strategy.ts)\n                        \n                        \n                            FlightSchema   (src/.../flights.entity.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            Roles   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            SeatSchema   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionSchema   (src/.../section.entity.ts)\n                        \n                        \n                            TicketSchema   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirlineSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airline)\n                        \n                    \n\n\n            \n        \n\n    src/airplanes/entities/airplane.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirplaneSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airplane)\n                        \n                    \n\n\n            \n        \n\n    src/airports/entities/airport.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airport)\n                        \n                    \n\n\n            \n        \n\n    src/auth/strategies/jwt.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cookieExtractor\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (req: any) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n                        \n                    \n\n\n            \n        \n\n    src/flights/entities/flights.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FlightSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Flight)\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles-auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...role: string[]) => SetMetadata(ROLES_KEY, role)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'role'\n                        \n                    \n\n\n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SeatSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Seat)\n                        \n                    \n\n\n            \n        \n\n    src/sections/entities/section.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Section)\n                        \n                    \n\n\n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TicketSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Ticket)\n                        \n                    \n\n\n            \n        \n\n    src/users/entities/users.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
