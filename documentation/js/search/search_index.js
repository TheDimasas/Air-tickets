var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Airline.html",[0,0.204,1,1.743]],["body/classes/Airline.html",[0,0.149,1,3.275,2,0.69,3,0.1,4,0.089,5,0.089,6,2.081,7,0.338,8,1.492,9,1.531,10,4.513,11,4.513,12,4.067,13,4.513,14,4.513,15,4.513,16,4.515,17,0.882,18,0.014,19,2.699,20,1.601,21,3.737,22,3.115,23,3.605,24,4.144,25,3.603,26,2.597,27,3.603,28,0.902,29,4.332,30,3.36,31,4.114,32,0.975,33,2.894,34,3.603,35,2.894,36,5.01,37,4.332,38,3.849,39,2.894,40,3.766,41,3.766,42,3.812,43,5.63,44,3.766,45,4.332,46,2.894,47,2.894,48,2.894,49,2.894,50,2.894,51,0.2,52,3.842,53,1.677,54,1.611,55,0.77,56,2.377,57,0.533,58,2.288,59,0.69,60,0.18,61,2.267,62,2.312,63,2.889,64,0.924,65,2.081,66,2.516,67,0.005,68,0.007,69,0.005]],["title/controllers/AirlinesController.html",[70,1.27,71,2.859]],["body/controllers/AirlinesController.html",[0,0.168,1,3.321,3,0.113,4,0.101,5,0.101,7,0.382,9,1.355,16,4.788,17,0.985,18,0.014,20,1.547,25,2.962,28,0.851,32,0.942,51,0.276,57,0.602,59,0.78,60,0.113,67,0.006,68,0.008,69,0.006,70,1.044,71,3.408,72,1.044,73,2.842,74,1.727,75,1.406,76,2.321,77,3.819,78,3.597,79,2.381,80,3.402,81,3.269,82,3.821,83,5.573,84,3.261,85,4.738,86,3.718,87,3.269,88,3.269,89,1.813,90,5.882,91,1.925,92,2.044,93,2.453,94,3.269,95,3.269,96,2.727,97,3.402,98,3.269,99,2.044,100,3.269,101,2.044,102,2.637,103,3.269,104,3.269,105,1.924,106,4.082,107,3.269,108,3.269,109,2.789,110,2.801,111,1.819,112,1.819,113,4.738,114,3.269,115,0.557,116,3.269,117,2.842,118,2.561,119,3.4,120,3.766,121,1.643,122,3.484,123,2.842,124,1.433,125,3.712,126,1.265,127,2.561,128,3.269,129,3.269,130,1.497,131,1.126,132,3.261,133,2.615,134,3.269,135,1.725,136,3.269,137,3.269,138,1.924,139,2.044,140,3.269,141,2.044,142,1.924,143,3.269,144,1.924,145,2.044,146,3.269]],["title/modules/AirlinesModule.html",[147,1.096,148,2.655]],["body/modules/AirlinesModule.html",[0,0.25,1,2.132,3,0.168,4,0.15,5,0.15,18,0.014,28,0.677,51,0.294,53,1.883,55,1.294,60,0.168,65,4.47,67,0.008,68,0.011,69,0.008,71,4.926,72,1.985,115,0.829,122,5.056,123,4.229,127,3.811,147,1.889,148,5.295,149,2.043,150,2.043,151,2.228,152,2.228,153,2.043,154,3.137,155,3.137,156,4.229,157,4.229,158,4.229,159,4.49,160,2.847,161,2.228,162,2.132,163,4.864,164,2.569,165,4.864,166,4.864,167,2.445,168,2.707,169,4.864]],["title/injectables/AirlinesService.html",[122,2.485,170,0.85]],["body/injectables/AirlinesService.html",[0,0.141,1,3.408,3,0.095,4,0.084,5,0.084,7,0.32,9,1.337,12,3.259,16,4.723,17,0.77,18,0.014,25,2.601,28,0.884,32,0.921,51,0.254,55,0.729,59,0.654,60,0.095,61,2.149,64,1.791,67,0.005,68,0.007,69,0.005,75,1.234,79,2.091,82,3.507,89,1.788,90,5.517,91,1.788,93,2.351,96,2.025,106,3.746,115,0.468,122,2.601,124,1.202,125,3.259,126,1.062,127,2.149,135,1.603,159,3.881,170,0.889,171,1.062,172,2.385,173,4.193,174,2.916,175,5.026,176,4.16,177,4.16,178,5.609,179,5.026,180,1.905,181,2.743,182,3.122,183,2.743,184,4.16,185,2.743,186,2.743,187,3.248,188,4.16,189,2.743,190,5.609,191,4.16,192,2.743,193,2.743,194,2.743,195,2.743,196,2.89,197,1.315,198,1.527,199,2.149,200,2.743,201,2.743,202,1.994,203,3.248,204,6.346,205,5.609,206,3.532,207,2.643,208,2.43,209,1.973,210,1.973,211,2.601,212,1.527,213,3.617,214,2.743,215,2.743,216,3.549,217,3.356,218,3.03,219,1.615,220,1.832,221,1.832,222,1.527,223,4.16,224,2.797,225,2.958,226,2.743,227,4.16,228,2.743,229,4.16,230,2.743,231,2.743,232,4.16,233,2.743,234,4.16,235,2.743,236,4.16,237,2.743,238,2.743,239,2.743]],["title/classes/Airplane.html",[0,0.204,240,1.821]],["body/classes/Airplane.html",[0,0.218,2,1.013,3,0.147,4,0.131,5,0.131,7,0.496,8,1.959,17,0.959,18,0.014,19,2.035,20,1.53,21,3.569,26,2.437,28,0.591,30,3.279,31,3.569,32,0.931,38,3.799,51,0.275,52,3.812,53,2.202,54,2.364,55,1.13,56,2.359,57,0.782,58,3.004,59,1.53,60,0.222,62,2.208,63,3.166,64,1.357,67,0.007,68,0.01,69,0.007,240,3.271,241,3.055,242,5.575,243,4.612,244,4.326,245,4.091,246,4.091,247,4.091,248,2.837,249,4.248,250,2.726,251,4.945,252,4.945,253,3.693,254,4.248,255,3.772,256,4.248,257,2.656,258,3.556,259,4.248,260,3.693,261,3.055,262,1.862,263,2.656,264,2.837,265,3.693]],["title/controllers/AirplanesController.html",[70,1.27,266,2.859]],["body/controllers/AirplanesController.html",[0,0.174,3,0.117,4,0.104,5,0.104,7,0.394,9,1.376,17,0.99,18,0.014,20,1.567,28,0.864,32,0.954,51,0.272,57,0.622,59,0.805,60,0.117,67,0.006,68,0.008,69,0.006,70,1.079,72,1.079,74,1.784,75,1.439,76,2.22,77,3.868,78,3.652,79,2.438,80,3.453,84,3.303,86,3.745,89,1.84,91,1.949,92,2.111,93,2.471,96,2.757,97,3.453,99,2.111,101,2.111,102,2.7,105,1.988,109,2.855,110,2.438,111,1.88,112,1.88,115,0.576,119,3.438,120,3.808,121,1.697,124,1.48,126,1.307,130,1.547,131,1.163,132,3.303,133,2.648,135,1.747,138,1.988,139,2.111,141,2.111,142,1.988,144,1.988,145,2.111,240,3.491,266,3.488,267,2.936,268,4.217,269,3.377,270,3.879,271,4.851,272,3.377,273,3.377,274,5.948,275,3.377,276,3.377,277,3.377,278,3.377,279,3.377,280,3.377,281,4.144,282,3.377,283,3.377,284,3.549,285,2.936,286,3.8,287,2.645,288,3.377,289,3.377,290,2.255,291,3.377,292,3.377,293,3.377,294,3.377,295,3.377]],["title/modules/AirplanesModule.html",[147,1.096,296,2.485]],["body/modules/AirplanesModule.html",[0,0.257,3,0.173,4,0.154,5,0.154,18,0.014,28,0.696,51,0.29,53,1.936,55,1.33,60,0.173,67,0.009,68,0.011,69,0.009,72,2.021,115,0.853,147,1.914,149,2.101,150,2.101,151,2.291,152,2.291,153,2.101,154,3.178,155,3.178,160,2.898,161,2.291,162,2.193,164,2.642,167,2.514,168,2.784,240,2.291,264,4.225,266,4.991,284,5.076,285,4.349,287,3.919,296,4.878,297,4.349,298,4.349,299,4.349,300,5.002,301,5.002,302,4.349]],["title/injectables/AirplanesService.html",[170,0.85,284,2.485]],["body/injectables/AirplanesService.html",[0,0.151,3,0.101,4,0.09,5,0.09,7,0.342,9,1.375,17,0.792,18,0.014,28,0.864,32,0.944,51,0.251,55,0.779,59,0.699,60,0.101,64,1.67,67,0.005,68,0.007,69,0.005,75,1.297,89,1.84,91,1.84,93,2.39,96,2.107,115,0.499,124,1.284,126,1.134,135,1.649,170,0.934,171,1.134,173,4.242,174,2.95,180,2.002,182,3.227,187,3.302,196,2.506,197,1.404,198,1.63,202,1.404,203,3.173,206,3.452,207,2.541,208,2.336,211,1.831,212,1.63,216,4.243,217,4.013,218,3.117,219,1.724,220,1.956,221,1.956,222,1.63,224,2.91,225,2.573,240,3.516,244,3.651,261,2.106,268,3.8,270,3.624,274,5.656,281,3.872,284,2.732,286,3.424,287,2.295,303,2.547,304,5.228,305,4.371,306,4.371,307,5.797,308,5.228,309,2.929,310,2.929,311,3.8,312,2.929,313,2.929,314,4.371,315,2.929,316,5.797,317,4.371,318,2.929,319,2.929,320,2.929,321,2.929,322,2.106,323,2.547,324,2.929,325,5.392,326,2.929,327,4.46,328,3.877,329,4.371,330,2.929,331,2.929,332,4.371,333,2.929,334,2.547,335,2.929]],["title/classes/Airport.html",[0,0.204,336,2.1]],["body/classes/Airport.html",[0,0.144,2,0.666,3,0.097,4,0.086,5,0.086,7,0.326,8,1.453,9,1.627,17,0.925,18,0.014,19,2.789,20,1.699,21,3.965,23,2.348,26,2.585,27,3.995,28,1.052,30,3.418,31,4.239,32,1.034,34,3.995,38,4.268,51,0.196,52,4.029,53,1.633,54,1.555,55,0.743,56,2.492,57,0.514,58,2.228,59,0.666,60,0.176,62,2.453,63,3.152,64,0.892,67,0.005,68,0.007,69,0.005,248,1.866,336,4.075,337,2.01,338,4.419,339,4.419,340,4.419,341,4.419,342,4.419,343,4.419,344,4.419,345,4.419,346,4.419,347,4.436,348,5.556,349,4.219,350,2.794,351,2.794,352,4.596,353,2.429,354,2.794,355,3.668,356,4.219,357,2.794,358,2.794,359,2.794,360,3.668,361,4.219,362,2.794,363,2.794,364,2.794,365,2.794,366,3.668,367,2.794,368,2.794,369,2.189,370,4.419,371,2.01,372,2.429]],["title/controllers/AirportsController.html",[70,1.27,373,2.859]],["body/controllers/AirportsController.html",[0,0.174,3,0.117,4,0.104,5,0.104,7,0.394,9,1.376,17,0.99,18,0.014,20,1.567,28,0.864,32,0.954,51,0.272,57,0.622,59,0.805,60,0.117,67,0.006,68,0.008,69,0.006,70,1.079,72,1.079,74,1.784,75,1.439,76,2.22,77,3.868,78,3.652,79,2.438,80,3.453,84,3.303,86,3.745,89,1.84,91,1.949,92,2.111,93,2.471,96,2.757,97,3.453,99,2.111,101,2.111,102,2.7,105,1.988,109,2.855,110,2.438,111,1.88,112,1.88,115,0.576,119,3.438,120,3.808,121,1.697,124,1.48,126,1.307,130,1.547,131,1.163,132,3.303,133,2.648,135,1.747,138,1.988,139,2.111,141,2.111,142,1.988,144,1.988,145,2.111,290,2.255,336,4.026,373,3.488,374,2.936,375,4.217,376,3.377,377,3.879,378,4.851,379,3.377,380,3.377,381,5.948,382,3.377,383,3.377,384,3.377,385,3.377,386,3.377,387,3.377,388,4.144,389,3.377,390,3.377,391,3.549,392,2.936,393,3.8,394,2.645,395,3.377,396,3.377,397,3.377,398,3.377,399,3.377,400,3.377,401,3.377]],["title/modules/AirportsModule.html",[147,1.096,402,2.485]],["body/modules/AirportsModule.html",[0,0.259,3,0.174,4,0.155,5,0.155,18,0.014,28,0.7,51,0.29,53,1.946,55,1.337,60,0.174,67,0.009,68,0.011,69,0.009,72,2.027,115,0.857,147,1.918,149,2.112,150,2.112,151,2.303,152,2.303,153,2.112,154,3.186,155,3.186,160,2.907,161,2.303,162,2.204,164,2.655,167,2.527,168,2.798,336,2.655,371,4.565,373,5.003,391,5.079,392,4.371,394,3.939,402,4.884,403,4.371,404,4.371,405,4.371,406,5.028,407,5.028,408,5.028]],["title/injectables/AirportsService.html",[170,0.85,391,2.485]],["body/injectables/AirportsService.html",[0,0.142,3,0.096,4,0.085,5,0.085,7,0.322,9,1.34,17,0.772,18,0.014,28,0.842,32,0.923,51,0.245,55,0.734,59,0.658,60,0.096,64,1.611,67,0.005,68,0.007,69,0.005,75,1.239,79,2.1,89,1.793,91,1.793,93,2.354,96,2.032,115,0.47,124,1.209,126,1.068,135,1.607,170,0.893,171,1.068,173,4.197,174,2.919,180,1.914,182,3.131,187,3.252,196,2.696,197,1.322,198,1.535,202,1.322,203,3.19,206,3.54,207,2.649,208,2.436,209,1.984,210,1.984,211,2.612,212,1.535,216,3.557,217,3.364,218,3.038,219,1.624,220,1.842,221,1.842,222,1.535,224,2.807,225,2.459,322,1.984,336,4.089,347,3.951,369,2.161,375,3.632,377,3.517,381,5.255,388,3.757,391,2.612,393,3.273,394,2.161,409,2.398,410,4.178,411,4.178,412,4.178,413,5.625,414,5.043,415,2.759,416,2.759,417,4.178,418,4.178,419,2.759,420,4.178,421,2.759,422,5.625,423,4.178,424,2.759,425,2.759,426,2.759,427,2.759,428,2.759,429,6.36,430,5.625,431,2.759,432,4.178,433,2.759,434,2.759,435,2.759,436,4.178,437,2.759,438,4.178,439,2.759,440,4.178,441,2.759,442,4.178,443,2.759,444,4.178,445,2.759,446,4.178,447,2.759,448,4.178,449,2.759,450,4.178,451,2.759,452,4.178,453,2.759,454,2.759,455,2.759]],["title/controllers/AppController.html",[70,1.27,456,2.859]],["body/controllers/AppController.html",[0,0.266,3,0.179,4,0.159,5,0.159,7,0.604,9,1.148,18,0.014,20,1.234,28,0.721,32,0.751,51,0.285,57,0.953,60,0.179,67,0.009,68,0.011,69,0.009,70,2.064,72,1.653,75,1.917,84,2.601,89,1.535,91,1.535,115,0.882,119,3.248,121,2.601,130,2.37,132,2.601,135,1.376,174,2.728,456,4.648,457,4.499,458,5.62,459,5.175,460,5.175,461,5.175,462,4.317,463,4.499,464,4.054,465,3.923,466,5.175,467,3.456,468,5.175,469,4.499,470,5.175,471,5.175,472,4.499,473,5.175,474,5.175,475,5.175]],["title/modules/AppModule.html",[147,1.096,476,2.859]],["body/modules/AppModule.html",[0,0.162,3,0.109,4,0.097,5,0.097,18,0.014,30,2.524,51,0.305,55,0.838,60,0.109,67,0.005,68,0.008,69,0.005,72,1.474,115,0.537,147,1.505,148,4.461,149,1.324,150,1.324,151,1.444,152,1.444,153,1.324,154,2.5,155,1.444,160,2.113,161,1.444,162,1.382,164,1.665,167,3.213,174,1.786,218,1.584,296,4.176,328,1.971,402,4.176,456,3.926,476,5.803,477,2.741,478,2.741,479,2.741,480,4.176,481,4.461,482,4.176,483,4.461,484,4.461,485,4.461,486,3.932,487,4.461,488,3.152,489,4.614,490,3.152,491,5.223,492,5.655,493,2.267,494,4.614,495,3.152,496,2.741,497,5.458,498,4.614,499,2.47,500,2.741,501,3.152,502,3.152,503,2.741,504,3.152,505,3.152,506,3.152,507,3.152,508,3.152,509,3.152,510,3.152,511,2.741,512,3.615,513,3.152,514,3.152,515,3.152,516,3.319,517,3.152,518,2.741,519,2.741,520,2.741,521,2.741,522,3.152,523,4.746,524,4.614,525,3.152,526,4.746,527,3.152,528,3.152,529,3.152,530,3.152,531,3.152,532,3.152,533,3.152,534,3.152,535,3.152,536,3.152,537,3.152,538,3.152,539,3.152,540,3.152,541,3.152,542,5.458,543,5.458]],["title/injectables/AppService.html",[170,0.85,487,2.655]],["body/injectables/AppService.html",[0,0.317,3,0.213,4,0.189,5,0.189,18,0.014,51,0.237,60,0.213,67,0.011,68,0.012,69,0.011,115,1.05,170,1.535,171,2.384,487,4.795,544,5.355]],["title/controllers/AuthController.html",[70,1.27,545,2.859]],["body/controllers/AuthController.html",[0,0.193,3,0.13,4,0.116,5,0.116,7,0.439,9,1.335,17,0.769,18,0.014,20,1.436,28,0.839,30,2.735,32,0.874,51,0.28,57,0.693,60,0.13,64,1.202,67,0.006,68,0.009,69,0.006,70,1.202,72,1.202,74,1.987,75,1.553,84,3.027,89,1.786,91,1.786,109,2.215,110,1.891,115,0.641,118,2.948,119,3.272,121,1.891,130,1.723,132,3.027,135,1.601,162,1.649,174,2.914,203,2.398,462,3.497,463,3.271,464,2.948,465,3.352,467,2.513,469,4.552,472,3.271,545,3.766,546,3.271,547,3.763,548,5.236,549,4.552,550,4.552,551,3.763,552,7.269,553,5.236,554,3.763,555,3.763,556,7.269,557,3.763,558,6.511,559,3.763,560,3.763,561,3.271,562,3.439,563,3.763,564,3.763,565,3.766,566,2.706,567,2.352,568,2.948,569,3.763,570,2.706,571,3.763,572,3.763,573,3.763,574,3.763,575,3.763,576,3.763,577,5.236,578,5.236,579,4.102,580,3.763,581,5.236,582,5.236,583,5.236,584,5.236,585,5.236,586,5.236,587,5.236,588,3.763,589,3.763,590,3.763,591,3.763,592,3.763,593,3.763]],["title/modules/AuthModule.html",[147,1.096,480,2.485]],["body/modules/AuthModule.html",[0,0.224,3,0.151,4,0.134,5,0.134,18,0.014,51,0.299,60,0.151,67,0.007,68,0.01,69,0.007,72,1.846,115,0.742,147,1.79,149,1.828,150,1.828,151,1.993,152,1.993,153,1.828,154,2.973,155,2.973,160,2.648,161,1.993,162,1.908,167,2.905,174,1.685,465,4.43,480,4.941,486,3.403,491,5.026,492,5.418,493,3.13,503,3.784,518,3.784,519,3.784,520,3.784,523,3.784,526,3.784,545,4.668,568,3.41,594,3.784,595,3.784,596,3.784,597,4.943,598,4.943,599,4.352,600,5.026,601,5.781,602,2.721,603,5.781,604,3.13,605,4.352,606,4.352,607,4.352,608,4.352,609,4.352,610,3.784,611,4.352,612,4.352,613,4.352]],["title/injectables/AuthService.html",[170,0.85,465,2.213]],["body/injectables/AuthService.html",[0,0.178,3,0.12,4,0.106,5,0.106,7,0.404,9,1.471,17,0.848,18,0.014,19,2.468,28,0.924,32,0.963,51,0.266,59,0.826,60,0.12,64,2.119,67,0.006,68,0.008,69,0.006,75,1.464,89,1.968,91,1.861,93,2.08,115,0.59,135,1.669,170,1.055,171,1.34,174,2.964,180,2.261,187,2.261,196,2.366,197,1.659,202,2.366,203,3.159,207,2.164,208,1.99,209,2.489,210,2.489,211,2.164,458,4.292,465,2.748,549,4.292,550,4.292,561,4.292,562,3.314,565,3.55,566,2.489,567,2.164,604,2.489,614,3.009,615,4.937,616,3.461,617,3.839,618,6.172,619,3.461,620,4.937,621,3.461,622,4.292,623,4.937,624,3.461,625,2.748,626,3.461,627,4.937,628,5.755,629,3.461,630,4.431,631,3.868,632,3.868,633,3.461,634,3.461,635,3.009,636,4.292,637,3.461,638,4.937,639,3.55,640,4.937,641,2.312,642,3.009,643,2.312,644,3.009,645,2.711,646,3.009,647,3.461,648,3.461,649,4.292,650,3.009,651,4.292,652,3.461,653,3.461,654,2.748,655,3.461,656,4.292,657,3.461,658,3.009,659,3.461,660,3.461]],["title/classes/ChangeUserPasswordDto.html",[0,0.204,661,2.655]],["body/classes/ChangeUserPasswordDto.html",[0,0.31,2,1.108,3,0.161,4,0.143,5,0.143,7,0.542,8,2.077,17,0.771,18,0.014,19,2.538,20,1.439,26,2.352,32,0.876,51,0.273,56,2.307,57,0.855,60,0.161,62,2.077,67,0.008,68,0.01,69,0.008,76,1.661,131,2.594,208,2.431,562,2.452,567,2.903,625,2.493,654,3.948,661,4.029,662,5.825,663,4.037,664,6.7,665,6.7,666,5.245,667,6.167,668,6.167,669,5.557,670,5.245,671,6.032,672,4.643,673,4.726,674,4.643,675,2.127,676,3.339,677,3.339,678,3.212,679,3.729,680,4.037,681,2.127,682,1.797,683,3.638,684,5.245,685,5.245]],["title/classes/CreateAirlineDto.html",[0,0.204,82,2.485]],["body/classes/CreateAirlineDto.html",[0,0.239,1,3.364,2,0.761,3,0.11,4,0.098,5,0.098,7,0.372,8,1.602,9,1.574,10,4.777,11,4.777,12,4.304,13,4.777,14,4.777,15,4.777,17,0.857,18,0.014,19,2.697,20,1.6,22,3.346,23,3.733,24,4.344,25,3.776,26,2.607,27,3.776,28,0.934,32,0.974,34,3.776,36,5.252,40,4.046,41,4.046,42,3.948,43,5.831,44,4.046,51,0.179,56,2.385,57,0.587,60,0.11,62,2.31,67,0.005,68,0.008,69,0.005,82,2.909,131,2.708,678,2.634,679,3.855,681,1.46,686,6.021,687,2.498,688,4.732,689,3.189,690,3.189,691,2.498,692,3.189,693,3.189,694,3.189,695,1.993,696,3.189,697,4.62]],["title/classes/CreateAirplaneDto.html",[0,0.204,270,2.485]],["body/classes/CreateAirplaneDto.html",[0,0.309,2,1.1,3,0.16,4,0.142,5,0.142,7,0.538,8,2.068,17,0.853,18,0.014,19,2.148,20,1.593,26,2.493,28,0.836,32,0.969,51,0.257,56,2.436,57,0.849,59,1.1,60,0.16,62,2.299,67,0.008,68,0.01,69,0.008,93,2.214,131,2.589,240,2.75,242,5.805,243,4.802,244,4.508,245,4.318,246,4.318,247,4.318,250,2.878,251,5.22,252,5.22,262,2.632,270,3.754,678,3.391,679,3.342,681,2.112,691,3.612,698,6.15,699,3.612,700,4.61,701,4.61,702,4.61,703,4.61,704,4.61,705,6.004,706,6.004,707,4.704]],["title/classes/CreateAirportDto.html",[0,0.204,377,2.485]],["body/classes/CreateAirportDto.html",[0,0.225,2,0.699,3,0.101,4,0.09,5,0.09,7,0.342,8,1.505,9,1.643,17,0.921,18,0.014,19,2.807,20,1.72,23,2.433,26,2.601,27,4.067,28,1.082,32,1.047,34,4.067,51,0.169,56,2.52,57,0.539,60,0.101,62,2.482,67,0.005,68,0.007,69,0.005,131,2.784,336,4.104,338,4.546,339,4.546,340,4.546,341,4.546,342,4.546,343,4.546,344,4.546,345,4.546,346,4.546,347,4.859,348,5.656,352,4.678,355,3.8,360,3.8,366,3.8,370,5.656,377,2.732,678,2.973,679,4.073,681,1.342,688,5.096,695,3.269,697,4.847,708,6.362,709,2.295,710,2.929,711,2.929,712,2.929,713,2.929,714,2.929,715,2.929,716,2.929,717,2.929,718,2.929,719,2.929,720,2.929,721,2.929,722,4.371,723,2.547,724,2.929,725,2.929]],["title/classes/CreateFlightDto.html",[0,0.204,726,2.34]],["body/classes/CreateFlightDto.html",[0,0.213,1,2.633,2,0.649,3,0.094,4,0.084,5,0.084,7,0.318,8,1.923,9,1.238,17,0.932,18,0.014,19,2.263,20,1.739,22,2.973,23,2.301,24,2.973,25,2.584,26,2.618,28,0.881,30,1.736,32,1.059,51,0.193,56,2.541,57,0.501,59,0.649,60,0.094,62,2.511,67,0.005,68,0.007,69,0.005,86,2.077,93,2.3,131,2.796,135,1.099,240,2.751,245,2.973,246,2.973,247,2.973,250,3.247,336,2.95,678,3.447,679,2.301,681,1.246,695,1.7,697,3.596,707,3.238,726,2.433,727,6.415,728,1.956,729,3.596,730,4.347,731,5.222,732,4.347,733,3.596,734,3.917,735,5.222,736,3.917,737,4.347,738,5.222,739,4.347,740,2.72,741,2.72,742,2.72,743,3.238,744,4.375,745,2.72,746,4.347,747,4.375,748,4.375,749,3.594,750,4.375,751,2.72,752,3.954,753,2.973,754,2.72,755,3.238,756,2.72,757,3.594,758,3.594,759,2.72,760,3.238,761,4.375,762,2.72,763,3.238,764,2.72,765,3.594,766,3.594,767,3.341,768,2.72,769,2.973,770,2.973,771,1.981,772,2.72,773,3.594,774,2.72,775,2.365,776,2.72,777,4.134,778,5.222]],["title/classes/CreateSeatDto.html",[0,0.204,779,2.655]],["body/classes/CreateSeatDto.html",[0,0.322,2,1.493,3,0.217,4,0.192,5,0.192,18,0.013,60,0.217,67,0.011,68,0.012,69,0.011,779,4.84,780,5.441,781,4.501]],["title/classes/CreateSectionDto.html",[0,0.204,782,2.485]],["body/classes/CreateSectionDto.html",[0,0.408,2,1.113,3,0.162,4,0.143,5,0.143,7,0.545,8,2.084,17,0.858,18,0.014,20,1.602,26,2.501,32,0.975,51,0.259,56,2.447,57,0.859,60,0.162,62,2.312,67,0.008,68,0.01,69,0.008,131,2.709,250,3.406,255,3.196,678,3.406,681,2.137,707,5.261,775,5.261,782,3.783,783,6.178,784,3.655,785,5.768,786,5.295,787,3.655,788,4.74,789,4.666,790,5.261,791,4.666,792,5.261,793,4.666,794,3.655,795,3.355,796,4.666,797,4.666]],["title/classes/CreateTicketDto.html",[0,0.204,798,2.485]],["body/classes/CreateTicketDto.html",[0,0.202,2,0.609,3,0.088,4,0.078,5,0.078,7,0.298,8,1.356,9,1.368,17,0.992,18,0.014,19,2.682,20,1.755,23,2.191,26,2.631,27,2.461,28,0.969,32,1.069,34,2.461,51,0.225,56,2.559,57,0.47,58,3.083,59,0.609,60,0.088,62,2.534,67,0.004,68,0.007,69,0.004,93,1.935,131,2.805,133,2.675,250,1.887,262,2.559,352,2.831,625,2.171,641,3.21,643,3.21,669,1.999,678,3.444,679,3.791,681,1.169,688,3.084,691,1.999,695,3.377,697,3.885,723,2.219,739,3.423,753,2.831,765,2.219,769,2.831,770,2.831,771,2.798,778,4.178,798,2.461,799,6.461,800,1.999,801,5.075,802,4.178,803,4.178,804,4.178,805,4.178,806,5.2,807,5.075,808,3.423,809,4.697,810,4.697,811,2.552,812,5.362,813,2.552,814,2.552,815,2.552,816,2.552,817,2.552,818,3.423,819,2.552,820,3.084,821,2.831,822,2.552,823,2.552,824,3.423,825,2.831,826,2.552,827,2.552,828,2.552,829,3.084,830,2.552,831,2.552,832,2.461,833,2.552,834,2.552,835,3.084,836,2.552,837,2.831,838,2.552,839,3.423,840,2.552,841,2.552,842,1.705,843,1.835,844,2.552,845,2.552,846,2.552,847,2.552]],["title/classes/CreateUserDto.html",[0,0.204,562,2.1]],["body/classes/CreateUserDto.html",[0,0.283,2,0.963,3,0.14,4,0.124,5,0.124,7,0.471,8,1.892,17,0.896,18,0.014,19,2.698,20,1.674,26,2.563,28,0.934,32,1.019,51,0.212,56,2.493,57,0.743,60,0.14,62,2.416,67,0.007,68,0.009,69,0.007,131,2.756,250,3.215,562,2.902,566,5.207,630,4.173,641,4.173,643,4.173,645,4.895,654,3.906,666,3.509,667,4.778,668,4.778,669,4.305,670,3.509,673,4.305,678,3.47,679,3.733,680,3.509,681,1.849,684,3.509,685,3.509,695,3.435,820,4.305,821,3.952,825,3.952,837,3.952,848,3.162,849,4.036,850,3.952,851,4.778,852,4.036,853,4.036,854,5.495,855,4.036,856,4.036,857,4.036,858,4.778,859,4.778,860,4.036,861,5.495,862,5.495]],["title/modules/FilesModule.html",[147,1.096,481,2.655]],["body/modules/FilesModule.html",[0,0.288,3,0.194,4,0.172,5,0.172,18,0.014,51,0.262,60,0.194,67,0.01,68,0.012,69,0.01,115,0.956,147,2.014,149,2.356,150,2.356,151,2.569,152,2.569,153,2.356,154,3.346,155,2.569,159,4.651,160,3.11,161,2.569,162,2.458,481,5.278,863,5.608,864,5.608,865,5.608,866,5.608]],["title/injectables/FilesService.html",[159,2.34,170,0.85]],["body/injectables/FilesService.html",[0,0.202,1,2.362,3,0.136,4,0.121,5,0.226,7,0.458,9,0.87,17,0.501,18,0.014,28,0.546,30,2.264,32,0.569,51,0.256,60,0.187,64,2.292,67,0.007,68,0.009,69,0.007,75,1.598,89,1.163,91,1.163,115,0.669,135,1.433,159,3.172,170,1.152,171,1.518,174,2.565,187,2.819,196,2.951,197,1.88,199,6.023,207,2.362,208,2.172,212,2.999,213,6.24,219,3.172,328,3.369,512,4.221,850,3.875,867,3.072,868,5.388,869,5.388,870,3.922,871,5.388,872,4.685,873,2.619,874,6.627,875,5.388,876,5.388,877,5.388,878,5.388,879,5.388,880,5.388,881,5.388,882,5.388,883,5.388,884,5.388,885,5.388,886,5.388,887,5.388,888,3.922,889,3.922]],["title/classes/Flight.html",[0,0.204,771,1.906]],["body/classes/Flight.html",[0,0.128,1,3.026,2,0.592,3,0.086,4,0.076,5,0.076,7,0.29,8,1.627,9,1.181,17,0.984,18,0.014,19,2.183,20,1.703,21,3.974,22,2.772,23,2.146,24,2.772,25,2.41,26,2.588,28,0.658,30,3.302,31,3.395,32,1.037,38,2.575,51,0.245,52,4.027,53,1.492,54,1.382,55,0.66,56,2.491,57,0.457,58,2.036,59,1.127,60,0.164,62,2.458,63,3.662,64,0.793,67,0.004,68,0.007,69,0.004,86,1.937,135,0.66,240,3.162,245,2.772,246,2.772,247,2.772,248,3.155,250,3.154,257,3.329,258,4.113,263,3.329,336,3.713,353,3.352,729,3.398,730,4.107,731,5.012,732,4.107,733,3.398,734,3.701,735,4.629,736,3.701,737,4.107,738,4.629,743,3.02,744,4.171,747,4.171,748,4.171,749,3.352,750,3.02,752,3.814,753,2.772,755,3.02,757,3.352,758,2.159,760,3.02,761,4.171,763,3.02,766,3.352,767,3.222,769,2.772,770,2.772,771,2.763,773,3.352,890,1.786,891,5.154,892,2.484,893,2.484,894,2.484,895,3.855,896,2.484,897,2.484,898,2.484,899,2.484,900,2.484,901,2.484,902,2.484,903,2.484,904,2.484,905,2.484,906,2.484,907,2.484,908,2.484,909,2.484,910,2.484,911,2.484,912,1.946,913,1.786,914,1.659,915,2.159]],["title/controllers/FlightsController.html",[70,1.27,916,2.859]],["body/controllers/FlightsController.html",[0,0.16,3,0.108,4,0.096,5,0.096,7,0.364,9,1.411,17,0.996,18,0.014,20,1.587,28,0.886,32,0.966,51,0.272,57,0.574,59,0.743,60,0.108,67,0.005,68,0.008,69,0.005,70,0.995,72,0.995,74,1.646,75,1.358,76,2.138,77,3.746,78,3.517,79,2.3,80,3.326,84,3.344,86,3.772,89,1.888,91,1.974,92,1.949,93,2.426,96,2.682,97,3.326,99,1.949,101,1.949,102,2.547,105,1.835,109,2.694,110,2.3,111,1.735,112,1.735,115,0.531,119,3.456,120,3.827,121,1.567,124,1.366,126,1.206,130,1.428,131,1.073,132,3.344,133,2.682,135,1.769,138,1.835,139,1.949,141,1.949,142,1.835,144,1.835,145,1.949,290,2.082,726,3.517,771,3.633,916,3.291,917,2.71,918,4.715,919,5.975,920,3.117,921,4.576,922,3.117,923,3.117,924,6.133,925,3.117,926,3.117,927,4.576,928,3.117,929,3.117,930,3.117,931,3.117,932,3.991,933,3.117,934,3.117,935,3.991,936,3.117,937,3.117,938,3.39,939,2.71,940,3.9,941,2.71,942,2.442,943,3.117,944,3.117,945,3.117,946,3.117,947,3.117,948,3.117,949,3.117,950,3.117,951,3.117,952,3.117]],["title/modules/FlightsModule.html",[147,1.096,482,2.485]],["body/modules/FlightsModule.html",[0,0.259,3,0.174,4,0.155,5,0.155,18,0.014,28,0.7,51,0.29,53,1.946,55,1.337,60,0.174,67,0.009,68,0.011,69,0.009,72,2.027,115,0.857,147,1.918,149,2.112,150,2.112,151,2.303,152,2.303,153,2.112,154,3.186,155,3.186,160,2.907,161,2.303,162,2.204,164,2.655,167,2.527,168,2.798,482,4.884,771,2.41,914,4.239,916,5.003,938,5.079,939,4.371,942,3.939,953,4.371,954,4.371,955,4.371,956,5.028,957,5.028,958,4.371]],["title/injectables/FlightsService.html",[170,0.85,938,2.485]],["body/injectables/FlightsService.html",[0,0.095,1,1.334,3,0.064,4,0.057,5,0.057,7,0.216,9,1.186,17,0.683,18,0.014,28,0.822,30,1.278,32,0.821,42,1.088,51,0.236,55,0.492,59,0.441,60,0.064,64,1.708,67,0.008,68,0.005,69,0.003,75,0.903,79,1.529,89,1.586,91,1.586,93,2.09,115,0.315,124,0.81,126,0.715,135,1.422,170,0.651,171,0.715,173,3.982,174,2.769,180,1.394,182,2.503,187,3.021,196,0.886,197,0.886,198,1.029,202,0.886,203,2.886,206,3.147,207,1.7,208,2.004,209,1.329,210,1.329,211,1.156,212,1.029,216,4.599,217,4.349,218,2.688,219,1.088,220,1.234,221,1.234,222,1.694,224,1.029,240,2.886,243,1.329,244,3.148,322,1.329,327,5.517,328,4.796,726,2.647,729,3.846,733,3.846,734,1.448,736,2.384,771,3.271,913,1.329,918,2.646,924,4.649,932,3.003,935,3.003,938,1.902,940,2.79,941,1.607,942,1.448,959,1.607,960,3.043,961,3.043,962,4.496,963,3.043,964,3.043,965,3.879,966,1.848,967,1.848,968,2.646,969,3.043,970,1.848,971,3.043,972,1.848,973,4.496,974,1.848,975,3.043,976,1.848,977,3.043,978,1.848,979,1.848,980,1.848,981,3.879,982,1.607,983,2.646,984,1.607,985,4.915,986,4.496,987,2.646,988,1.848,989,3.043,990,1.848,991,1.848,992,1.848,993,1.848,994,1.848,995,1.848,996,1.848,997,1.848,998,1.848,999,1.848,1000,3.043,1001,1.848,1002,3.043,1003,1.848,1004,3.043,1005,1.848,1006,1.848,1007,1.848,1008,1.848,1009,3.043,1010,1.848,1011,3.043,1012,1.848,1013,1.848,1014,3.043,1015,1.848,1016,3.043,1017,1.848,1018,1.848,1019,1.848,1020,1.848,1021,2.646,1022,3.043,1023,1.848,1024,3.043,1025,3.043,1026,3.043,1027,3.043,1028,1.848,1029,1.848,1030,1.448,1031,3.043,1032,3.043,1033,3.043,1034,1.848,1035,1.848,1036,1.848,1037,1.848,1038,1.848,1039,1.848,1040,1.848,1041,1.848,1042,1.848,1043,3.043,1044,3.043,1045,1.848,1046,1.848,1047,1.848,1048,1.848,1049,1.848,1050,1.848,1051,1.848,1052,1.848,1053,1.848]],["title/injectables/JwtAuthGuard.html",[170,0.85,467,2.655]],["body/injectables/JwtAuthGuard.html",[0,0.309,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,60,0.208,67,0.01,68,0.012,69,0.01,115,1.024,170,1.512,171,2.325,467,4.725,602,3.755,682,2.325,1054,5.222,1055,4.706,1056,5.222,1057,6.007]],["title/injectables/JwtStrategy.html",[170,0.85,597,2.655]],["body/injectables/JwtStrategy.html",[0,0.232,3,0.156,4,0.139,5,0.139,7,0.527,9,1.313,17,0.757,18,0.014,28,0.825,32,0.86,51,0.281,60,0.156,64,1.891,67,0.008,68,0.01,69,0.008,75,1.757,89,1.757,91,1.339,115,0.769,135,1.575,170,1.266,171,1.747,174,2.558,180,2.712,202,2.839,203,2.067,207,1.979,208,1.819,218,2.269,462,3.955,492,5.969,493,3.246,579,3.536,597,3.955,602,2.822,610,3.925,617,3.905,625,2.459,631,4.639,635,3.925,682,1.747,752,2.822,1058,3.536,1059,5.149,1060,4.514,1061,4.514,1062,5.922,1063,5.922,1064,4.514,1065,3.925,1066,3.925,1067,3.536,1068,4.514,1069,4.639,1070,3.536,1071,5.178,1072,3.536,1073,3.536,1074,3.925,1075,3.925,1076,4.514,1077,4.514,1078,4.514,1079,4.514]],["title/injectables/LocalAuthGuard.html",[170,0.85,570,2.859]],["body/injectables/LocalAuthGuard.html",[0,0.309,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,60,0.208,67,0.01,68,0.012,69,0.01,115,1.024,170,1.512,171,2.325,570,5.088,602,3.755,682,2.325,1055,4.706,1056,5.222,1080,5.222,1081,6.007]],["title/injectables/LocalStrategy.html",[170,0.85,598,2.655]],["body/injectables/LocalStrategy.html",[0,0.248,3,0.167,4,0.148,5,0.148,7,0.562,9,1.37,17,0.789,18,0.014,19,2.722,28,0.86,32,0.897,51,0.277,60,0.167,64,1.538,67,0.008,68,0.011,69,0.008,75,1.832,89,1.832,91,1.429,115,0.821,130,2.206,135,1.281,170,1.32,171,1.864,174,2.639,180,2.206,187,2.829,203,2.206,207,2.111,208,1.941,465,4.235,568,3.773,598,4.125,602,3.011,625,2.536,630,4.125,631,4.838,654,4.003,682,1.864,1059,5.37,1065,4.187,1066,4.187,1067,3.773,1074,4.187,1075,4.187,1082,4.187,1083,4.816,1084,4.816,1085,6.176,1086,4.816,1087,4.187,1088,4.816,1089,4.816]],["title/classes/LoginUserDto.html",[0,0.204,1090,3.114]],["body/classes/LoginUserDto.html",[0,0.308,2,1.428,3,0.207,4,0.184,5,0.184,18,0.014,51,0.272,60,0.207,67,0.01,68,0.012,69,0.01,76,2.143,562,3.163,567,3.744,675,2.743,676,4.306,677,4.306,682,2.318,683,4.691,848,4.691,1090,5.533,1091,5.206]],["title/guards/RolesGuard.html",[516,2.859,1092,3.114]],["body/guards/RolesGuard.html",[0,0.221,3,0.149,4,0.132,5,0.132,7,0.503,9,1.273,17,0.733,18,0.014,28,0.799,30,1.808,32,0.833,51,0.277,60,0.149,64,2.062,67,0.007,68,0.01,69,0.007,75,1.702,89,1.702,91,1.277,115,0.734,130,1.971,135,1.526,170,1.227,180,1.971,187,2.628,196,2.063,197,2.063,202,2.063,207,1.887,208,1.735,212,2.396,219,2.533,462,3.833,499,3.372,516,4.127,604,3.095,618,6.414,625,2.135,752,2.691,755,4.496,850,3.095,1071,4.496,1072,3.372,1073,3.372,1093,4.304,1094,3.742,1095,7.173,1096,4.304,1097,7.531,1098,4.304,1099,4.304,1100,6.886,1101,4.304,1102,5.738,1103,6.455,1104,3.742,1105,4.496,1106,4.304,1107,3.742,1108,4.304,1109,5.738,1110,4.304,1111,4.304,1112,4.304,1113,4.304,1114,4.304,1115,4.304,1116,4.304,1117,4.304,1118,4.304,1119,4.304,1120,4.304]],["title/classes/SearchFlightDto.html",[0,0.204,932,2.655]],["body/classes/SearchFlightDto.html",[0,0.309,2,1.1,3,0.16,4,0.142,5,0.142,7,0.538,8,2.068,17,0.853,18,0.014,19,2.691,20,1.593,26,2.493,32,0.969,51,0.257,56,2.436,57,0.849,60,0.16,62,2.299,67,0.008,68,0.01,69,0.008,76,1.65,131,2.703,675,2.112,678,3.391,679,3.717,681,2.112,682,1.784,695,3.754,726,2.714,728,3.316,743,4.704,744,5.746,746,4.008,747,4.704,748,4.704,750,4.704,760,4.704,761,6,763,4.704,932,4.01,940,3.316,1121,6.15,1122,6.677,1123,4.61,1124,4.61,1125,4.61,1126,4.008]],["title/classes/Seat.html",[0,0.204,262,1.743]],["body/classes/Seat.html",[0,0.207,2,0.959,3,0.139,4,0.124,5,0.124,7,0.469,8,1.887,17,0.924,18,0.014,20,1.487,21,3.47,26,2.397,30,3.301,31,4.025,32,0.905,42,3.225,51,0.27,52,3.727,53,2.121,54,2.237,55,1.069,56,2.306,57,0.74,58,2.894,59,1.487,60,0.232,62,2.147,63,3.47,64,1.284,67,0.007,68,0.009,69,0.007,133,3.078,250,3.547,253,3.494,255,4.118,257,3.426,258,3.426,260,3.494,262,2.935,263,2.513,788,5.246,832,3.426,873,4.164,891,4.293,1127,2.684,1128,4.019,1129,4.019,1130,4.019,1131,3.494,1132,3.941,1133,4.019,1134,2.891,1135,4.293,1136,4.293,1137,4.293,1138,3.149,1139,2.684,1140,3.494]],["title/controllers/SeatsController.html",[70,1.27,1141,2.859]],["body/controllers/SeatsController.html",[0,0.227,3,0.153,4,0.136,5,0.136,7,0.515,9,0.978,17,0.888,18,0.014,20,1.052,28,0.614,32,0.641,51,0.286,57,0.812,59,1.052,60,0.153,67,0.008,68,0.01,69,0.008,70,1.409,72,1.409,74,2.33,75,1.73,80,4.025,84,2.217,86,3.284,89,1.309,91,1.309,93,2.398,96,2.634,97,3.247,102,2.455,105,2.597,110,3.284,111,2.455,112,2.455,115,0.752,119,3.284,120,3.637,121,2.217,126,1.707,130,2.021,131,1.519,132,2.932,133,2.351,135,1.551,142,2.597,262,3.256,786,3.173,1141,4.195,1142,3.835,1143,6.459,1144,4.644,1145,4.412,1146,4.412,1147,3.173,1148,2.946,1149,4.086,1150,3.835,1151,4.412,1152,4.412,1153,3.835,1154,4.412,1155,4.412,1156,4.412,1157,3.173,1158,4.412]],["title/modules/SeatsModule.html",[147,1.096,483,2.655]],["body/modules/SeatsModule.html",[0,0.259,3,0.174,4,0.155,5,0.155,18,0.014,28,0.7,51,0.29,53,1.946,55,1.337,60,0.174,67,0.009,68,0.011,69,0.009,72,2.027,115,0.857,147,1.918,149,2.112,150,2.112,151,2.303,152,2.303,153,2.112,154,3.186,155,3.186,160,2.907,161,2.303,162,2.204,164,2.655,167,2.527,168,2.798,262,2.204,483,5.217,1139,4.239,1141,5.003,1148,3.358,1149,5.079,1150,4.371,1159,4.371,1160,4.371,1161,4.371,1162,5.028,1163,5.028,1164,4.371]],["title/injectables/SeatsService.html",[170,0.85,1149,2.485]],["body/injectables/SeatsService.html",[0,0.233,3,0.157,4,0.139,5,0.139,7,0.53,9,1.317,17,0.759,18,0.014,28,0.827,32,0.862,51,0.281,55,1.206,59,1.082,60,0.157,67,0.008,68,0.01,69,0.008,75,1.762,89,1.762,91,1.345,93,2.33,96,1.828,115,0.773,126,1.755,135,1.206,170,1.27,171,1.755,173,3.687,174,2.564,180,2.077,182,3.912,187,2.721,196,2.847,197,2.174,198,2.524,202,2.174,203,3.034,206,2.524,207,1.988,208,1.828,217,2.524,218,2.279,224,2.524,225,2.669,262,3.282,1134,3.261,1143,5.759,1144,4.694,1147,3.261,1148,3.029,1149,3.714,1165,3.943,1166,6.624,1167,4.535,1168,4.535,1169,5.164,1170,4.535,1171,4.535,1172,5.94,1173,4.535,1174,4.535,1175,5.94,1176,4.535,1177,4.535,1178,4.535]],["title/classes/Section.html",[0,0.204,255,2.1]],["body/classes/Section.html",[0,0.4,2,0.994,3,0.144,4,0.128,5,0.128,7,0.486,8,1.933,17,0.954,18,0.014,20,1.515,21,3.534,26,2.423,30,3.267,31,3.948,32,0.922,51,0.273,52,3.782,53,2.173,54,2.319,55,1.108,56,2.34,57,0.767,58,2.965,59,1.515,60,0.235,62,2.187,63,3.125,64,1.33,67,0.007,68,0.01,69,0.007,250,2.691,255,3.747,257,2.604,258,3.51,262,3.11,263,2.604,785,5.324,786,4.887,790,4.881,792,4.881,842,2.782,873,4.241,1179,2.782,1180,5.908,1181,4.166,1182,4.166,1183,4.166,1184,4.166,1185,4.166,1186,4.166,1187,3.263,1188,4.881,1189,2.996,1190,3.622]],["title/controllers/SectionsController.html",[70,1.27,1191,2.859]],["body/controllers/SectionsController.html",[0,0.174,3,0.117,4,0.104,5,0.104,7,0.394,9,1.376,17,0.99,18,0.014,20,1.567,28,0.864,32,0.954,51,0.272,57,0.622,59,0.805,60,0.117,67,0.006,68,0.008,69,0.006,70,1.079,72,1.079,74,1.784,75,1.439,76,2.22,77,3.868,78,3.652,79,2.438,80,3.453,84,3.303,86,3.745,89,1.84,91,1.949,92,2.111,93,2.471,96,2.757,97,3.453,99,2.111,101,2.111,102,2.7,105,1.988,109,2.855,110,2.438,111,1.88,112,1.88,115,0.576,119,3.438,120,3.808,121,1.697,124,1.48,126,1.307,130,1.547,131,1.163,132,3.303,133,2.648,135,1.747,138,1.988,139,2.111,141,2.111,142,1.988,144,1.988,145,2.111,244,2.855,255,4.026,290,2.255,782,3.879,795,2.429,1191,3.488,1192,2.936,1193,3.377,1194,4.851,1195,3.377,1196,3.377,1197,5.948,1198,3.377,1199,3.377,1200,3.377,1201,3.377,1202,3.377,1203,3.377,1204,4.144,1205,3.377,1206,3.377,1207,3.549,1208,2.936,1209,3.8,1210,3.377,1211,3.377,1212,3.377,1213,3.377,1214,3.377,1215,3.377,1216,3.377]],["title/modules/SectionsModule.html",[147,1.096,484,2.655]],["body/modules/SectionsModule.html",[0,0.251,3,0.169,4,0.15,5,0.15,18,0.014,28,0.867,51,0.294,53,2.41,55,1.297,60,0.169,67,0.008,68,0.011,69,0.008,72,1.988,115,0.831,147,1.891,149,2.048,150,2.048,151,2.233,152,2.233,153,2.048,154,3.141,155,3.141,160,2.851,161,2.233,162,2.138,164,2.576,167,2.451,168,3.465,255,2.576,262,2.138,484,5.182,795,3.507,842,3.257,1139,4.158,1164,4.24,1189,4.477,1191,4.932,1207,5.058,1208,4.24,1217,4.24,1218,4.24,1219,4.24,1220,4.876,1221,4.876,1222,4.876]],["title/injectables/SectionsService.html",[170,0.85,1207,2.485]],["body/injectables/SectionsService.html",[0,0.23,3,0.105,4,0.093,5,0.093,7,0.353,9,1.393,17,0.803,18,0.014,28,0.875,32,0.955,42,1.778,51,0.262,55,0.803,59,0.72,60,0.105,64,1.7,67,0.005,68,0.008,69,0.005,75,1.326,89,1.864,91,1.864,93,2.408,96,2.146,115,0.515,124,1.324,126,1.169,135,1.565,170,0.956,171,1.169,173,4.231,174,2.942,180,2.048,182,3.789,187,3.27,196,2.821,197,1.448,198,1.681,202,2.143,203,3.118,206,3.276,207,2.334,208,2.146,212,1.681,216,3.872,217,3.662,218,2.958,222,1.681,224,2.963,225,3.134,244,2.632,255,4.047,262,1.324,327,3.216,328,2.795,782,3.679,785,2.366,786,3.829,795,2.172,842,2.017,1134,2.172,1169,4.629,1187,2.366,1197,5.117,1204,3.93,1207,2.795,1209,3.503,1223,2.626,1224,4.471,1225,4.471,1226,5.324,1227,4.471,1228,5.324,1229,3.02,1230,3.02,1231,4.471,1232,4.471,1233,3.02,1234,4.471,1235,3.02,1236,5.885,1237,3.02,1238,4.471,1239,3.02,1240,3.02,1241,3.02,1242,3.02,1243,3.02,1244,3.02,1245,5.324,1246,5.324,1247,5.885,1248,4.471,1249,3.02,1250,3.02,1251,3.02,1252,3.02,1253,3.02]],["title/classes/SelectSeatDto.html",[0,0.204,1157,2.859]],["body/classes/SelectSeatDto.html",[0,0.38,2,1.241,3,0.18,4,0.16,5,0.16,7,0.607,8,2.233,17,0.665,18,0.014,20,1.241,26,2.15,32,0.755,51,0.285,56,2.233,57,0.958,60,0.18,62,1.792,67,0.009,68,0.011,69,0.009,76,1.862,131,2.433,133,3.128,675,2.383,678,3.108,681,2.383,682,2.014,779,3.475,781,3.742,787,4.076,794,5.08,832,4.054,1138,4.076,1147,3.742,1148,3.475,1157,4.664,1254,5.638,1255,4.523,1256,4.523,1257,4.076,1258,4.523,1259,4.523,1260,4.076]],["title/classes/Ticket.html",[0,0.204,767,2.1]],["body/classes/Ticket.html",[0,0.115,2,0.534,3,0.077,4,0.069,5,0.069,7,0.261,8,1.223,9,1.294,17,0.998,18,0.014,19,2.614,20,1.706,21,3.981,23,1.977,26,2.59,27,2.221,28,0.884,30,3.35,31,3.872,32,1.038,34,2.221,51,0.236,52,4.026,53,1.375,54,1.246,55,0.595,56,2.491,57,0.412,58,3.083,59,1.053,60,0.202,62,2.463,63,3.806,64,0.715,67,0.004,68,0.006,69,0.004,133,2.635,248,2.372,250,1.703,257,3.144,258,3.144,262,2.204,263,2.221,352,2.554,625,2.432,641,2.95,643,2.95,752,2.761,753,2.554,767,2.333,769,2.554,770,2.554,771,3.134,801,4.372,802,3.84,803,3.84,804,3.84,805,3.84,806,5.123,807,4.372,808,3.088,809,4.372,810,4.372,812,3.84,818,3.088,820,2.783,821,2.554,824,3.088,825,2.554,829,3.939,832,3.144,835,3.939,837,2.554,839,3.088,842,1.495,873,4.367,891,3.939,1131,1.946,1132,3.176,1135,2.783,1136,2.783,1137,2.783,1257,1.753,1261,1.495,1262,2.238,1263,2.238,1264,3.552,1265,2.238,1266,2.238,1267,2.238,1268,2.238,1269,2.238,1270,2.238,1271,2.238,1272,2.238,1273,2.238,1274,2.238,1275,2.238,1276,2.238,1277,2.238,1278,2.238,1279,2.238,1280,2.238,1281,2.238,1282,2.238,1283,2.238,1284,2.238,1285,2.238,1286,1.753,1287,1.753,1288,1.753,1289,3.088,1290,3.088,1291,3.088,1292,3.088,1293,1.609,1294,1.946]],["title/controllers/TicketsController.html",[70,1.27,1295,2.859]],["body/controllers/TicketsController.html",[0,0.174,3,0.117,4,0.104,5,0.104,7,0.394,9,1.376,17,0.99,18,0.014,20,1.567,28,0.864,32,0.954,51,0.272,57,0.622,59,0.805,60,0.117,67,0.006,68,0.008,69,0.006,70,1.079,72,1.079,74,1.784,75,1.439,76,2.22,77,1.988,78,3.652,80,3.453,84,3.303,86,3.745,89,1.84,91,1.949,93,2.471,96,2.757,97,3.453,99,2.111,102,2.7,105,1.988,109,1.988,110,2.438,111,1.88,112,1.88,115,0.576,119,3.438,120,3.808,121,1.697,124,1.48,126,1.307,130,1.547,131,1.163,132,3.303,133,2.648,135,1.953,138,1.988,141,2.111,142,1.988,144,1.988,222,2.7,290,2.255,767,4.026,798,3.879,843,2.429,1295,3.488,1296,2.936,1297,3.8,1298,3.377,1299,4.851,1300,3.377,1301,3.377,1302,5.948,1303,3.377,1304,3.377,1305,3.377,1306,3.377,1307,3.377,1308,3.377,1309,3.377,1310,3.377,1311,4.144,1312,3.377,1313,3.377,1314,3.8,1315,3.549,1316,2.936,1317,3.377,1318,3.377,1319,3.377,1320,3.377,1321,3.377,1322,3.377,1323,3.377,1324,3.377,1325,3.377,1326,3.377]],["title/modules/TicketsModule.html",[147,1.096,485,2.655]],["body/modules/TicketsModule.html",[0,0.209,3,0.141,4,0.125,5,0.125,18,0.014,28,0.936,51,0.304,53,2.603,55,1.08,60,0.141,67,0.007,68,0.009,69,0.007,72,1.762,115,0.692,147,1.729,149,1.706,150,1.706,151,1.86,152,1.86,153,1.706,154,2.871,155,2.871,160,2.528,161,1.86,162,1.78,164,2.145,167,2.773,168,2.26,240,1.86,264,3.686,296,4.535,302,3.531,402,4.535,482,4.535,485,5.349,486,4.269,625,1.511,767,2.145,771,1.947,843,2.921,912,3.182,914,3.686,958,3.531,1286,3.182,1287,3.182,1293,3.969,1295,4.508,1315,4.922,1316,3.531,1327,3.531,1328,3.531,1329,4.061,1330,3.531,1331,4.061,1332,4.061,1333,4.061,1334,4.061,1335,3.686,1336,4.061,1337,4.061,1338,4.061,1339,3.531]],["title/injectables/TicketsService.html",[170,0.85,1315,2.485]],["body/injectables/TicketsService.html",[0,0.119,1,1.014,3,0.08,4,0.071,5,0.071,7,0.27,9,1.236,17,0.712,18,0.014,28,0.942,32,0.86,42,2.656,51,0.255,55,0.615,59,0.552,60,0.08,64,2.203,67,0.004,68,0.006,69,0.004,75,1.081,89,1.653,91,1.653,93,2.243,96,1.469,115,0.394,124,1.014,126,0.895,133,0.932,135,1.482,170,0.779,171,0.895,173,4.055,174,2.819,180,1.67,182,3.961,187,3.098,196,2.163,197,1.108,198,1.287,202,2.455,203,3.398,206,3.574,207,2.716,208,2.497,216,4.431,217,4.19,218,3.4,222,1.287,224,3.449,225,2.146,240,2.941,243,1.663,244,2.656,261,1.663,311,3.923,322,1.663,323,2.01,325,3.169,327,4.962,328,4.313,334,3.169,625,2.305,654,2.029,729,1.663,733,1.663,767,3.573,771,3.167,798,3.202,843,1.663,912,1.811,913,1.663,968,3.923,984,2.01,985,3.169,987,3.923,1021,2.01,1030,1.811,1260,1.811,1286,1.811,1287,1.811,1288,1.811,1297,2.856,1302,4.845,1311,3.42,1314,2.856,1315,2.279,1340,2.01,1341,3.645,1342,5.121,1343,3.645,1344,3.645,1345,4.512,1346,2.312,1347,3.923,1348,2.312,1349,3.645,1350,3.645,1351,2.312,1352,2.312,1353,3.645,1354,2.312,1355,5.121,1356,3.645,1357,2.312,1358,2.312,1359,2.312,1360,1.663,1361,2.312,1362,2.312,1363,3.645,1364,3.169,1365,3.645,1366,3.645,1367,2.312,1368,3.645,1369,2.312,1370,2.01,1371,3.645,1372,3.645,1373,2.312,1374,3.645,1375,2.312,1376,2.312,1377,2.312,1378,2.312]],["title/classes/UpdateAirlineDto.html",[0,0.204,106,2.655]],["body/classes/UpdateAirlineDto.html",[0,0.309,2,1.433,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,57,1.106,60,0.208,67,0.01,68,0.012,69,0.01,76,2.149,82,3.755,106,4.725,125,4.706,675,2.751,682,2.325,687,4.706,1379,5.222,1380,6.007]],["title/classes/UpdateAirplaneDto.html",[0,0.204,281,2.655]],["body/classes/UpdateAirplaneDto.html",[0,0.309,2,1.433,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,57,1.106,60,0.208,67,0.01,68,0.012,69,0.01,76,2.149,270,3.755,281,4.725,286,4.706,675,2.751,682,2.325,699,4.706,1381,5.222,1382,6.007]],["title/classes/UpdateAirportDto.html",[0,0.204,388,2.655]],["body/classes/UpdateAirportDto.html",[0,0.309,2,1.433,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,57,1.106,60,0.208,67,0.01,68,0.012,69,0.01,76,2.149,377,3.755,388,4.725,393,4.706,675,2.751,682,2.325,709,4.706,1383,5.222,1384,6.007]],["title/classes/UpdateFlightDto.html",[0,0.204,935,2.655]],["body/classes/UpdateFlightDto.html",[0,0.309,2,1.433,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,57,1.106,60,0.208,67,0.01,68,0.012,69,0.01,76,2.149,675,2.751,682,2.325,726,3.535,728,4.32,935,4.725,940,4.32,1126,5.222,1385,5.222]],["title/classes/UpdateSeatDto.html",[0,0.204,1144,2.655]],["body/classes/UpdateSeatDto.html",[0,0.38,2,1.241,3,0.18,4,0.16,5,0.16,7,0.607,8,2.233,17,0.665,18,0.014,20,1.241,26,2.15,32,0.755,51,0.285,56,2.233,57,0.958,60,0.18,62,1.792,67,0.009,68,0.011,69,0.009,76,1.862,131,2.433,133,3.128,675,2.383,678,3.108,681,2.383,682,2.014,779,3.475,781,3.742,787,4.076,794,5.08,832,4.054,1138,4.076,1144,4.331,1147,3.742,1148,3.475,1255,4.523,1256,4.523,1257,4.076,1258,4.523,1259,4.523,1260,4.076,1386,5.638]],["title/classes/UpdateSectionDto.html",[0,0.204,1204,2.655]],["body/classes/UpdateSectionDto.html",[0,0.309,2,1.433,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,57,1.106,60,0.208,67,0.01,68,0.012,69,0.01,76,2.149,675,2.751,682,2.325,782,3.755,784,4.706,1204,4.725,1209,4.706,1387,5.222,1388,6.007]],["title/classes/UpdateTicketDto.html",[0,0.204,1311,2.655]],["body/classes/UpdateTicketDto.html",[0,0.309,2,1.433,3,0.208,4,0.185,5,0.185,18,0.014,51,0.273,57,1.106,60,0.208,67,0.01,68,0.012,69,0.01,76,2.149,675,2.751,682,2.325,798,3.755,800,4.706,1311,4.725,1314,4.706,1389,5.222,1390,6.007]],["title/classes/UpdateUserDataDto.html",[0,0.204,1391,2.655]],["body/classes/UpdateUserDataDto.html",[0,0.307,2,1.424,3,0.207,4,0.184,5,0.184,18,0.014,51,0.272,60,0.207,67,0.01,68,0.012,69,0.01,76,2.136,562,3.153,567,3.732,625,2.221,675,2.734,676,4.293,677,4.293,682,2.311,683,4.677,1391,4.708,1392,5.19,1393,5.19]],["title/classes/User.html",[0,0.204,625,1.479]],["body/classes/User.html",[0,0.17,2,0.789,3,0.115,4,0.102,5,0.102,7,0.386,8,1.646,17,0.96,18,0.014,19,2.566,20,1.671,21,3.898,26,2.561,28,0.665,30,3.37,31,3.898,32,1.017,38,3.192,51,0.251,52,3.991,53,1.85,54,1.841,55,0.88,56,2.469,57,0.609,58,2.524,59,1.338,60,0.213,62,2.412,63,3.781,64,1.056,67,0.006,68,0.008,69,0.006,248,3.192,250,2.689,257,2.988,258,2.988,263,2.068,625,2.605,630,3.747,639,5.254,641,3.747,643,3.747,645,4.395,654,3.421,673,3.744,767,3.699,821,3.437,825,3.437,837,3.437,850,3.437,851,2.876,858,4.155,859,4.155,873,3.747,1132,3.437,1297,4.814,1335,2.209,1360,2.379,1394,2.209,1395,3.308,1396,3.308,1397,3.308,1398,3.308,1399,3.308,1400,3.308,1401,3.308,1402,3.308,1403,3.308,1404,3.308,1405,3.308,1406,3.308,1407,3.308,1408,4.155,1409,3.308,1410,2.876]],["title/controllers/UsersController.html",[70,1.27,1411,2.859]],["body/controllers/UsersController.html",[0,0.167,3,0.113,4,0.1,5,0.1,7,0.38,9,1.352,17,0.984,18,0.014,20,1.544,28,0.849,32,0.94,51,0.275,57,0.599,59,0.776,60,0.113,67,0.006,68,0.008,69,0.006,70,1.039,72,1.039,74,1.718,75,1.4,77,3.811,78,3.589,79,2.373,80,2.628,84,3.254,86,3.714,89,1.809,91,1.921,92,2.033,93,2.533,96,2.877,97,3.394,101,2.033,102,2.628,110,2.793,111,1.81,112,1.81,115,0.554,119,3.394,120,3.759,121,1.635,126,1.259,130,1.49,131,1.12,132,3.254,133,2.61,135,1.722,138,1.914,139,2.033,144,1.914,145,2.033,464,2.548,565,5.133,617,3.093,625,2.885,654,1.81,661,4.072,1107,2.828,1153,2.828,1391,4.072,1411,3.395,1412,2.828,1413,4.104,1414,5.557,1415,4.721,1416,3.253,1417,4.721,1418,3.253,1419,3.253,1420,3.253,1421,3.253,1422,3.253,1423,3.253,1424,3.253,1425,3.253,1426,3.253,1427,3.253,1428,3.253,1429,3.253,1430,3.253,1431,3.253,1432,2.828,1433,2.828,1434,2.828,1435,2.828,1436,2.548,1437,2.548,1438,2.548,1439,3.253,1440,3.253,1441,4.721,1442,3.253,1443,3.253,1444,3.253,1445,3.253,1446,3.253,1447,3.253,1448,3.253,1449,3.253]],["title/modules/UsersModule.html",[147,1.096,486,2.34]],["body/modules/UsersModule.html",[0,0.253,3,0.17,4,0.151,5,0.151,18,0.014,28,0.684,51,0.295,53,1.902,55,1.307,60,0.17,67,0.008,68,0.011,69,0.008,72,1.998,115,0.838,147,1.898,149,2.064,150,2.064,151,2.25,152,2.25,153,2.064,154,3.152,155,3.152,160,2.865,161,2.25,162,2.154,164,2.595,167,2.469,168,2.735,480,3.911,486,4.574,600,5.439,617,4.508,625,1.828,1335,4.178,1339,4.272,1411,4.949,1432,4.272,1436,3.849,1450,4.272,1451,4.272,1452,4.272,1453,4.913,1454,4.913,1455,4.913]],["title/injectables/UsersService.html",[170,0.85,617,2.213]],["body/injectables/UsersService.html",[0,0.121,3,0.082,4,0.073,5,0.073,7,0.276,9,1.385,17,0.798,18,0.014,19,1.636,28,0.87,32,0.939,51,0.249,55,0.628,59,0.563,60,0.082,64,2.065,67,0.004,68,0.006,69,0.004,75,1.099,79,1.186,89,1.853,91,1.853,93,2.371,96,2.087,115,0.402,124,1.034,126,0.913,135,1.661,170,0.792,171,0.913,173,4.254,174,2.958,180,1.081,182,2.883,187,3.315,196,2.863,197,1.131,198,1.314,202,1.131,203,3.382,206,3.476,207,2.737,208,2.606,211,2.859,212,1.314,216,3.515,217,3.324,218,3.544,219,1.389,220,1.576,221,1.576,222,1.314,224,2.883,225,3.049,562,2.736,565,4.651,567,1.475,617,2.062,622,5.192,625,2.906,630,3.459,632,2.902,636,2.052,642,2.052,644,2.052,646,2.052,649,3.221,650,2.052,651,3.221,654,3.324,656,3.221,658,3.975,661,3.459,1030,1.849,1347,3.221,1360,1.697,1364,5.192,1370,3.221,1391,3.459,1413,3.221,1433,2.052,1434,2.052,1435,2.052,1436,1.849,1456,2.052,1457,4.572,1458,3.704,1459,3.704,1460,5.179,1461,3.704,1462,3.704,1463,4.572,1464,2.36,1465,2.36,1466,2.36,1467,2.36,1468,3.704,1469,2.36,1470,3.704,1471,2.36,1472,2.36,1473,3.704,1474,2.36,1475,3.704,1476,2.36,1477,2.36,1478,2.36,1479,2.36,1480,2.36,1481,4.572,1482,4.572,1483,3.704,1484,3.704,1485,3.704,1486,3.704,1487,3.704,1488,2.36,1489,3.704,1490,2.36,1491,2.36,1492,2.36,1493,2.36,1494,2.36,1495,2.36,1496,2.36,1497,2.36]],["title/coverage.html",[1498,4.261]],["body/coverage.html",[0,0.409,1,1.157,5,0.081,6,2.905,17,0.337,18,0.014,65,1.898,67,0.005,68,0.007,69,0.005,70,2.242,71,1.898,73,2.294,82,1.65,106,1.762,122,1.65,147,0.728,153,1.108,159,1.553,170,1.599,172,2.294,208,1.063,240,1.209,241,2.905,255,1.394,262,1.157,264,1.762,266,1.898,267,2.294,270,1.65,281,1.762,284,1.65,303,2.294,336,1.394,337,2.905,371,1.898,373,1.898,374,2.294,377,1.65,388,1.762,391,1.65,409,2.294,456,1.898,457,2.294,465,1.469,467,1.762,487,1.762,516,1.898,544,2.294,545,1.898,546,2.294,562,1.394,566,1.898,570,1.898,597,1.762,598,1.762,614,2.294,617,1.469,625,1.825,661,1.762,662,2.294,663,2.294,686,2.294,687,3.164,698,2.294,699,3.164,708,2.294,709,3.164,726,1.553,727,2.294,728,3.529,767,1.394,771,1.265,779,1.762,780,2.294,781,3.529,782,1.65,783,2.294,784,3.164,798,1.65,799,2.294,800,3.164,848,3.164,867,2.067,890,2.905,914,1.762,916,1.898,917,2.294,932,1.762,935,1.762,938,1.65,959,2.294,1054,2.294,1055,3.164,1058,3.164,1069,2.067,1070,2.067,1080,2.294,1082,2.294,1090,2.067,1091,2.294,1092,2.067,1094,2.294,1105,2.067,1121,2.294,1127,2.698,1139,1.762,1141,1.898,1142,2.294,1144,1.762,1149,1.65,1157,1.898,1165,2.294,1179,2.698,1189,1.898,1191,1.898,1192,2.294,1204,1.762,1207,1.65,1223,2.294,1254,2.294,1261,2.698,1293,1.898,1295,1.898,1296,2.294,1311,1.762,1315,1.65,1335,1.762,1340,2.294,1379,2.294,1381,2.294,1383,2.294,1385,2.294,1386,2.294,1387,2.294,1389,2.294,1391,1.762,1392,2.294,1393,2.294,1394,2.698,1411,1.898,1412,2.294,1437,2.067,1438,3.164,1456,2.294,1498,2.067,1499,2.639,1500,2.639,1501,2.639,1502,8.325,1503,6.71,1504,6.505,1505,7.892,1506,4.907,1507,7.242,1508,6.505,1509,4.039,1510,5.926,1511,3.512,1512,5.926,1513,4.039,1514,3.164,1515,4.039,1516,2.639,1517,2.639,1518,2.639]],["title/dependencies.html",[150,2.01,1519,3.313]],["body/dependencies.html",[0,0.31,18,0.014,55,1.232,57,0.853,59,1.105,67,0.008,68,0.01,69,0.008,110,2.328,115,0.79,117,4.027,118,4.718,150,1.946,493,3.331,496,4.027,499,3.629,511,4.027,512,3.629,521,4.027,579,3.629,602,2.896,604,3.331,632,3.629,676,3.331,677,3.331,681,2.122,872,4.027,982,4.027,983,4.027,1067,5.243,1087,4.027,1104,4.027,1520,4.632,1521,6.693,1522,4.632,1523,4.632,1524,4.632,1525,4.632,1526,4.632,1527,4.632,1528,4.632,1529,4.632,1530,6.693,1531,4.632,1532,4.632,1533,6.023,1534,4.632,1535,4.632,1536,4.632,1537,4.632,1538,4.632,1539,4.632,1540,4.632,1541,4.632,1542,4.632,1543,4.632,1544,4.632,1545,4.632,1546,4.632,1547,4.632,1548,4.632,1549,4.632,1550,4.632,1551,4.632,1552,4.632,1553,4.632,1554,4.632,1555,4.632,1556,4.632,1557,4.632,1558,4.632,1559,4.632,1560,4.632,1561,4.632,1562,4.632,1563,4.632,1564,4.632,1565,4.632,1566,4.632]],["title/miscellaneous/enumerations.html",[1567,1.844,1568,4.16]],["body/miscellaneous/enumerations.html",[0,0.315,1,2.686,7,0.555,17,0.783,18,0.014,67,0.008,68,0.01,69,0.008,133,2.885,199,4.8,625,2.279,639,4.407,788,4.8,806,4.8,829,4.8,832,4.475,835,4.8,867,3.727,1127,3.177,1135,5.608,1136,5.608,1137,5.608,1179,3.177,1180,5.327,1188,5.327,1261,3.177,1289,5.327,1290,5.327,1291,5.327,1292,5.327,1394,3.177,1408,5.327,1567,2.648,1568,4.136,1569,3.727,1570,4.757,1571,3.727,1572,5.31,1573,3.727,1574,7.192]],["title/miscellaneous/functions.html",[1567,1.844,1575,4.16]],["body/miscellaneous/functions.html",[7,0.738,18,0.012,67,0.011,68,0.012,69,0.011,153,3.226,1514,4.95,1567,3.517,1575,5.494,1576,5.494]],["title/index.html",[7,0.387,1577,3.313,1578,3.313]],["body/index.html",[4,0.153,18,0.014,26,1.646,67,0.008,68,0.011,69,0.008,500,4.315,1498,3.888,1579,4.964,1580,4.964,1581,6.296,1582,4.964,1583,4.964,1584,4.964,1585,4.964,1586,4.964,1587,4.964,1588,6.915,1589,4.964,1590,4.964,1591,4.964,1592,4.964,1593,7.79,1594,4.964,1595,4.964,1596,4.964,1597,7.668,1598,4.964,1599,4.964,1600,6.296,1601,4.964,1602,4.964,1603,4.964,1604,4.964,1605,6.296,1606,6.296,1607,4.964,1608,4.964,1609,4.964,1610,6.296,1611,6.296,1612,4.964,1613,4.964,1614,4.964,1615,4.964,1616,4.964,1617,4.315,1618,4.964,1619,4.964,1620,4.964,1621,4.964,1622,4.964,1623,4.964,1624,4.964,1625,4.964,1626,4.964,1627,4.964,1628,4.964,1629,4.964,1630,4.964,1631,4.964,1632,4.964,1633,4.964,1634,4.964]],["title/modules.html",[149,2.285]],["body/modules.html",[18,0.011,67,0.009,68,0.011,69,0.009,148,3.651,149,2.296,296,3.417,402,3.417,476,3.931,480,3.417,481,3.651,482,3.417,483,3.651,484,3.651,485,3.651,486,3.217,1617,7.111,1635,8.179,1636,8.179,1637,8.179]],["title/overview.html",[1638,4.728]],["body/overview.html",[2,0.82,18,0.014,42,2.023,67,0.006,68,0.008,69,0.006,72,1.098,122,4.429,147,0.948,148,4.838,149,1.444,150,1.444,151,1.574,152,1.574,153,1.444,154,1.574,155,1.574,156,2.988,157,2.988,158,2.988,159,3.681,160,2.25,161,1.574,162,1.506,171,1.33,284,4.429,296,4.429,297,2.988,298,2.988,299,2.988,391,4.429,402,4.429,403,2.988,404,2.988,405,2.988,465,3.943,476,5.824,477,2.988,478,2.988,479,2.988,480,4.677,481,4.419,482,4.429,483,4.596,484,4.596,485,5.19,486,4.17,487,3.828,594,2.988,595,2.988,596,2.988,597,3.828,598,3.828,617,3.943,938,4.429,953,2.988,954,2.988,955,2.988,1092,2.692,1149,4.429,1159,2.988,1160,2.988,1161,2.988,1207,4.429,1217,2.988,1218,2.988,1219,2.988,1315,4.429,1327,2.988,1328,2.988,1330,2.988,1450,2.988,1451,2.988,1452,2.988,1638,2.988,1639,3.437,1640,3.437,1641,3.437,1642,3.437]],["title/miscellaneous/typealiases.html",[1567,1.844,1643,4.785]],["body/miscellaneous/typealiases.html",[6,4.165,7,0.676,17,0.74,18,0.012,61,5.424,67,0.01,68,0.012,69,0.01,241,4.165,261,4.98,337,4.165,369,5.424,890,4.165,913,4.98,1127,3.868,1134,4.98,1179,3.868,1187,5.424,1261,3.868,1288,5.424,1360,4.98,1394,3.868,1567,3.224,1569,4.537,1571,4.537,1572,4.537,1573,4.537,1644,5.792,1645,5.036,1646,5.036,1647,5.036,1648,5.036]],["title/miscellaneous/variables.html",[1567,1.844,1649,4.16]],["body/miscellaneous/variables.html",[6,3.316,7,0.538,17,0.767,18,0.014,19,2.148,65,4.318,66,4.008,67,0.008,68,0.01,69,0.008,135,1.226,147,1.656,241,3.316,264,4.01,265,4.008,337,3.316,371,4.318,372,4.008,462,4.01,639,4.802,752,2.882,890,3.316,914,4.01,915,4.008,1058,3.612,1069,4.704,1070,3.612,1071,5.231,1072,3.612,1073,3.612,1105,4.704,1127,3.079,1132,5.737,1139,4.01,1140,4.008,1179,3.079,1189,4.318,1190,4.008,1261,3.079,1293,4.318,1294,4.008,1335,4.01,1394,3.079,1410,4.008,1437,4.704,1438,3.612,1511,5.805,1514,3.612,1567,2.566,1569,3.612,1571,3.612,1572,3.612,1573,3.612,1574,6.936,1576,4.008,1645,4.008,1646,4.008,1647,4.008,1648,4.008,1649,4.008,1650,4.61,1651,6.004,1652,4.61]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1502,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1520,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1559,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1540,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1539,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1554,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":773,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0.6.3",{"_index":1522,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":766,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0/1",{"_index":1505,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1509,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1513,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1515,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1510,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1512,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1508,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1503,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1504,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1506,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1516,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":748,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["08",{"_index":809,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["1",{"_index":42,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"overview.html":{}}}],["1.0.0",{"_index":1556,"title":{},"body":{"dependencies.html":{}}}],["1.1.4",{"_index":1528,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1548,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":1535,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1531,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1533,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1542,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1640,"title":{},"body":{"overview.html":{}}}],["11",{"_index":1639,"title":{},"body":{"overview.html":{}}}],["15",{"_index":1641,"title":{},"body":{"overview.html":{}}}],["16t15:35:00.000z",{"_index":763,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["1700",{"_index":790,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["1992",{"_index":43,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["2.1.4",{"_index":1526,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1552,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":86,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["2000",{"_index":808,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2016",{"_index":839,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2021",{"_index":747,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["21t09:15:00.000z",{"_index":749,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["23",{"_index":753,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["28",{"_index":1642,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":1561,"title":{},"body":{"dependencies.html":{}}}],["3.4.3",{"_index":1537,"title":{},"body":{"dependencies.html":{}}}],["31t00:00:00.000z",{"_index":810,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["380951234567",{"_index":858,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["4",{"_index":725,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4)@apiproperty({example",{"_index":720,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4.0.0",{"_index":1555,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1565,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1551,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1527,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":251,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["5.0.1",{"_index":1534,"title":{},"body":{"dependencies.html":{}}}],["5.12.9",{"_index":1553,"title":{},"body":{"dependencies.html":{}}}],["6.4.6",{"_index":1549,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1562,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1546,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1525,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1523,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":1524,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1521,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":247,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["8,12",{"_index":685,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8,12}$')@apiproperty({example",{"_index":670,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8.3.2",{"_index":1566,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":669,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["9)@apiproperty({example",{"_index":817,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["90",{"_index":792,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["9065",{"_index":770,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["__v",{"_index":217,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["a1b2@c3d",{"_index":673,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["access",{"_index":1119,"title":{},"body":{"guards/RolesGuard.html":{}}}],["add",{"_index":581,"title":{},"body":{"controllers/AuthController.html":{}}}],["add(3",{"_index":1024,"title":{},"body":{"injectables/FlightsService.html":{}}}],["admin",{"_index":1408,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["adult",{"_index":835,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["aerospatiale/alenia",{"_index":245,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airline",{"_index":1,"title":{"classes/Airline.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["airline'})@apiresponse({status",{"_index":85,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@prop({required",{"_index":37,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({trim",{"_index":45,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({unique",{"_index":29,"title":{},"body":{"classes/Airline.html":{}}}],["airline.airlinenameeng",{"_index":228,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameru",{"_index":230,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameua",{"_index":231,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptioneng",{"_index":233,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionru",{"_index":235,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionua",{"_index":237,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.dto",{"_index":125,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{}}}],["airline.dto.ts",{"_index":687,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["airline.dto.ts:11",{"_index":692,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:19",{"_index":689,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:27",{"_index":690,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:36",{"_index":696,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:45",{"_index":693,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:54",{"_index":694,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.name",{"_index":169,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airline.save",{"_index":238,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedocument",{"_index":61,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"miscellaneous/typealiases.html":{}}}],["airlinedto",{"_index":90,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameeng",{"_index":227,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameru",{"_index":229,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameua",{"_index":205,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptioneng",{"_index":232,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionru",{"_index":234,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionua",{"_index":236,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlineid",{"_index":190,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinemodel",{"_index":184,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinenameeng",{"_index":10,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameru",{"_index":11,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameua",{"_index":12,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["airlines",{"_index":25,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airlines'})@apiresponse({status",{"_index":98,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airlines.controller",{"_index":166,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airlines.service",{"_index":123,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{}}}],["airlines/airlines.module",{"_index":506,"title":{},"body":{"modules/AppModule.html":{}}}],["airlineschema",{"_index":65,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airlinescontroller",{"_index":71,"title":{"controllers/AirlinesController.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"coverage.html":{}}}],["airlinesmodule",{"_index":148,"title":{"modules/AirlinesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["airlinesservice",{"_index":122,"title":{"injectables/AirlinesService.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"coverage.html":{},"overview.html":{}}}],["airline})@delete(':id",{"_index":94,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@get(':id",{"_index":103,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@patch(':id",{"_index":107,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@post()@useinterceptors(undefined",{"_index":87,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airplane",{"_index":240,"title":{"classes/Airplane.html":{}},"body":{"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["airplane'})@apiresponse({status",{"_index":271,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane.airplanename",{"_index":333,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplane.amountofseat",{"_index":1371,"title":{},"body":{"injectables/TicketsService.html":{}}}],["airplane.dto",{"_index":286,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{}}}],["airplane.dto.ts",{"_index":699,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["airplane.dto.ts:18",{"_index":700,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:23",{"_index":702,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:32",{"_index":704,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.name",{"_index":302,"title":{},"body":{"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{}}}],["airplane.save",{"_index":334,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanedocument",{"_index":261,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["airplanedto",{"_index":274,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanedto.airplanename",{"_index":332,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplaneid",{"_index":316,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplanemodel",{"_index":311,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanename",{"_index":242,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["airplanes",{"_index":268,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanes'})@apiresponse({status",{"_index":277,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplanes.controller",{"_index":301,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["airplanes.service",{"_index":285,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{}}}],["airplanes/airplanes.module",{"_index":513,"title":{},"body":{"modules/AppModule.html":{}}}],["airplaneschema",{"_index":264,"title":{},"body":{"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airplanescontroller",{"_index":266,"title":{"controllers/AirplanesController.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"coverage.html":{}}}],["airplanesmodule",{"_index":296,"title":{"modules/AirplanesModule.html":{}},"body":{"modules/AirplanesModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airplanesservice",{"_index":284,"title":{"injectables/AirplanesService.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"coverage.html":{},"overview.html":{}}}],["airplane})@delete(':id",{"_index":275,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@get(':id",{"_index":279,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@patch(':id",{"_index":282,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@post",{"_index":272,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airport",{"_index":336,"title":{"classes/Airport.html":{}},"body":{"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"coverage.html":{}}}],["airport'})@apiresponse({status",{"_index":378,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@prop({required",{"_index":353,"title":{},"body":{"classes/Airport.html":{},"classes/Flight.html":{}}}],["airport'})@prop({trim",{"_index":349,"title":{},"body":{"classes/Airport.html":{}}}],["airport.airportcountryeng",{"_index":437,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryru",{"_index":441,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryua",{"_index":439,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameeng",{"_index":443,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameru",{"_index":447,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameua",{"_index":445,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttowneng",{"_index":449,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownru",{"_index":453,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownua",{"_index":451,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.dto",{"_index":393,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{}}}],["airport.dto.ts",{"_index":709,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["airport.dto.ts:14",{"_index":715,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:22",{"_index":713,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:30",{"_index":714,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:37",{"_index":721,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:45",{"_index":712,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:53",{"_index":710,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:61",{"_index":711,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:69",{"_index":718,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:77",{"_index":716,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:85",{"_index":717,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.iata",{"_index":435,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.name",{"_index":408,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airport.save",{"_index":454,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportcountryeng",{"_index":338,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryru",{"_index":339,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryua",{"_index":340,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportdocument",{"_index":369,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"miscellaneous/typealiases.html":{}}}],["airportdto",{"_index":381,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airportdto.airportcountryeng",{"_index":436,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryru",{"_index":440,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryua",{"_index":438,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameeng",{"_index":442,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameru",{"_index":446,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameua",{"_index":444,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttowneng",{"_index":448,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownru",{"_index":452,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownua",{"_index":450,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.iata",{"_index":430,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportid",{"_index":422,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportmodel",{"_index":417,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportnameeng",{"_index":341,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameru",{"_index":342,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameua",{"_index":343,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airports",{"_index":375,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airports'})@apiresponse({status",{"_index":384,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airports.controller",{"_index":407,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airports.service",{"_index":392,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{}}}],["airports/airports.module",{"_index":505,"title":{},"body":{"modules/AppModule.html":{}}}],["airportschema",{"_index":371,"title":{},"body":{"classes/Airport.html":{},"modules/AirportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airportscontroller",{"_index":373,"title":{"controllers/AirportsController.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"coverage.html":{}}}],["airportsmodule",{"_index":402,"title":{"modules/AirportsModule.html":{}},"body":{"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["airportsservice",{"_index":391,"title":{"injectables/AirportsService.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"coverage.html":{},"overview.html":{}}}],["airporttowneng",{"_index":344,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownru",{"_index":345,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownua",{"_index":346,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airport})@delete(':id",{"_index":382,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@get(':id",{"_index":386,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@patch(':id",{"_index":389,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@post",{"_index":379,"title":{},"body":{"controllers/AirportsController.html":{}}}],["aliases",{"_index":1644,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":209,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["amazing",{"_index":1618,"title":{},"body":{"index.html":{}}}],["amount",{"_index":252,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["amountofseat",{"_index":243,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["apioperation",{"_index":119,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":84,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":56,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["apiproperty({example",{"_index":21,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["apiresponse",{"_index":120,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags",{"_index":121,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags('airlines",{"_index":128,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apitags('airplanes",{"_index":288,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["apitags('airports",{"_index":395,"title":{},"body":{"controllers/AirportsController.html":{}}}],["apitags('app",{"_index":470,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('authentication",{"_index":572,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('flights",{"_index":943,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('seats",{"_index":1151,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('sections",{"_index":1210,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags('tickets",{"_index":1317,"title":{},"body":{"controllers/TicketsController.html":{}}}],["apitags('users",{"_index":1439,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1595,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":501,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":502,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":497,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":498,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":456,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["applications",{"_index":1587,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":476,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":487,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["arrayunique",{"_index":705,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["arrival",{"_index":744,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["arrivalairport",{"_index":729,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["arrivalairport.airportnameeng",{"_index":1046,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameru",{"_index":1047,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameua",{"_index":1045,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttowneng",{"_index":1050,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownru",{"_index":1051,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownua",{"_index":1049,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.iata",{"_index":1048,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivaltime",{"_index":730,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["async",{"_index":174,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["atr",{"_index":246,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["auth",{"_index":547,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":607,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":1107,"title":{},"body":{"guards/RolesGuard.html":{},"controllers/UsersController.html":{}}}],["auth.decorator.ts",{"_index":1511,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":469,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["auth.guard.ts",{"_index":1055,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":568,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":504,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":466,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":468,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/roles.guard",{"_index":517,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":545,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1056,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1057,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1081,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":480,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1627,"title":{},"body":{"index.html":{}}}],["authservice",{"_index":465,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":203,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["b2a3#d1c",{"_index":671,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["baby",{"_index":1291,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["backers",{"_index":1619,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":322,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["badrequestexception('airplane",{"_index":331,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["badrequestexception('airport",{"_index":434,"title":{},"body":{"injectables/AirportsService.html":{}}}],["badrequestexception('flight",{"_index":987,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["badrequestexception('user",{"_index":1366,"title":{},"body":{"injectables/TicketsService.html":{}}}],["baggage",{"_index":731,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["bcrypt",{"_index":632,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1487,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(pass",{"_index":657,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":650,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.newpassword",{"_index":1495,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.password",{"_index":652,"title":{},"body":{"injectables/AuthService.html":{}}}],["birthday",{"_index":801,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["birthday'})@prop({required",{"_index":1262,"title":{},"body":{"classes/Ticket.html":{}}}],["body",{"_index":110,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["booked",{"_index":832,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":755,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":153,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1637,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1635,"title":{},"body":{"modules.html":{}}}],["building",{"_index":1582,"title":{},"body":{"index.html":{}}}],["business",{"_index":1188,"title":{},"body":{"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["cache",{"_index":521,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":489,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":490,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.registerasync",{"_index":522,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":1095,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1099,"title":{},"body":{"guards/RolesGuard.html":{}}}],["carryonbaggage",{"_index":732,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["catch",{"_index":219,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":1417,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":1414,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(id",{"_index":1416,"title":{},"body":{"controllers/UsersController.html":{}}}],["changeuserpassword",{"_index":1457,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassword(userid",{"_index":1466,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassworddto",{"_index":661,"title":{"classes/ChangeUserPasswordDto.html":{}},"body":{"classes/ChangeUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["child",{"_index":1290,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["citizenship",{"_index":812,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenship'})@prop({required",{"_index":1267,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenship'})@prop({trim",{"_index":1264,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenshipeng",{"_index":802,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipru",{"_index":803,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipua",{"_index":804,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["class",{"_index":0,"title":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["class'})@prop({required",{"_index":1181,"title":{},"body":{"classes/Section.html":{}}}],["class.economy",{"_index":797,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_airlinesmodule",{"_index":156,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_exports",{"_index":157,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airlinesmodule_providers",{"_index":158,"title":{},"body":{"modules/AirlinesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule",{"_index":297,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_exports",{"_index":299,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airplanesmodule_providers",{"_index":298,"title":{},"body":{"modules/AirplanesModule.html":{},"overview.html":{}}}],["cluster_airportsmodule",{"_index":403,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_exports",{"_index":405,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_airportsmodule_providers",{"_index":404,"title":{},"body":{"modules/AirportsModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":477,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":479,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":478,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":594,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":595,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":596,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_filesmodule",{"_index":863,"title":{},"body":{"modules/FilesModule.html":{}}}],["cluster_filesmodule_providers",{"_index":864,"title":{},"body":{"modules/FilesModule.html":{}}}],["cluster_flightsmodule",{"_index":953,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_exports",{"_index":954,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_flightsmodule_providers",{"_index":955,"title":{},"body":{"modules/FlightsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule",{"_index":1159,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_exports",{"_index":1160,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_seatsmodule_providers",{"_index":1161,"title":{},"body":{"modules/SeatsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule",{"_index":1217,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_exports",{"_index":1218,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_sectionsmodule_providers",{"_index":1219,"title":{},"body":{"modules/SectionsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule",{"_index":1327,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_exports",{"_index":1328,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_ticketsmodule_imports",{"_index":1329,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":1330,"title":{},"body":{"modules/TicketsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1450,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1451,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":1452,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["compression",{"_index":1541,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":528,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_limit",{"_index":531,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":529,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":491,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":518,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":492,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache_ttl",{"_index":525,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":613,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":610,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('mongo_db_uri",{"_index":537,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":64,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":180,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(seat.name",{"_index":1173,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1479,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(airlinemodel",{"_index":181,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["constructor(airplanemodel",{"_index":309,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["constructor(airportmodel",{"_index":415,"title":{},"body":{"injectables/AirportsService.html":{}}}],["constructor(authservice",{"_index":1083,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(flightmodel",{"_index":966,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(jwtservice",{"_index":1096,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(private",{"_index":130,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["constructor(seatmodel",{"_index":1167,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(sectionmodel",{"_index":1229,"title":{},"body":{"injectables/SectionsService.html":{}}}],["constructor(ticketmodel",{"_index":1346,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(usermodel",{"_index":1464,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":1060,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersservice",{"_index":616,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":1102,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1112,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1111,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1113,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('airlines",{"_index":129,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["controller('airplanes",{"_index":289,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["controller('airports",{"_index":396,"title":{},"body":{"controllers/AirportsController.html":{}}}],["controller('auth",{"_index":573,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('flights",{"_index":944,"title":{},"body":{"controllers/FlightsController.html":{}}}],["controller('seats",{"_index":1152,"title":{},"body":{"controllers/SeatsController.html":{}}}],["controller('sections",{"_index":1211,"title":{},"body":{"controllers/SectionsController.html":{}}}],["controller('tickets",{"_index":1318,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":1440,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":72,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":1543,"title":{},"body":{"dependencies.html":{}}}],["cookieextractor",{"_index":1069,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["country",{"_index":348,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["coverage",{"_index":1498,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":76,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["create(@body",{"_index":290,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["create(airlinedto",{"_index":81,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["create(airplanedto",{"_index":269,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["create(airportdto",{"_index":376,"title":{},"body":{"controllers/AirportsController.html":{}}}],["create(flightdto",{"_index":920,"title":{},"body":{"controllers/FlightsController.html":{}}}],["create(sectiondto",{"_index":1193,"title":{},"body":{"controllers/SectionsController.html":{}}}],["create(ticketdto",{"_index":1298,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createairline",{"_index":175,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairline(airlinedto",{"_index":185,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairlinedto",{"_index":82,"title":{"classes/CreateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["createairplane",{"_index":304,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplane(airplanedto",{"_index":312,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplanedto",{"_index":270,"title":{"classes/CreateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["createairport",{"_index":410,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairport(airportdto",{"_index":418,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairportdto",{"_index":377,"title":{"classes/CreateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["createfile",{"_index":868,"title":{},"body":{"injectables/FilesService.html":{}}}],["createfile(folder",{"_index":869,"title":{},"body":{"injectables/FilesService.html":{}}}],["createflight",{"_index":960,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflight(flightdto",{"_index":969,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflightdto",{"_index":726,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["createseatdto",{"_index":779,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["createsection",{"_index":1224,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsection(sectiondto",{"_index":1232,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsectiondto",{"_index":782,"title":{"classes/CreateSectionDto.html":{}},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["createticket",{"_index":1341,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticket(ticketdto",{"_index":1350,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticketdto",{"_index":798,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createuser",{"_index":1458,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(userdto",{"_index":1468,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":562,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["cross",{"_index":1544,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":1547,"title":{},"body":{"dependencies.html":{}}}],["data",{"_index":97,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data'})@apiresponse({status",{"_index":102,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data.dto",{"_index":1433,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.dto.ts",{"_index":1393,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["declarations",{"_index":152,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":20,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles",{"_index":1106,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":1132,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":77,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":144,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["delete(@param('id",{"_index":145,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["delete(id",{"_index":92,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["deleteairline",{"_index":176,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairline(airlineid",{"_index":188,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairplane",{"_index":305,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairplane(airplaneid",{"_index":314,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairport",{"_index":411,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteairport(airportid",{"_index":420,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deletefile(folder",{"_index":889,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteflight",{"_index":961,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deleteflight(flightid",{"_index":971,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deletesection",{"_index":1225,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deletesection(sectionid",{"_index":1234,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deleteuser",{"_index":1459,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1470,"title":{},"body":{"injectables/UsersService.html":{}}}],["departure",{"_index":761,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["departureairport",{"_index":733,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["departureairport.airportnameeng",{"_index":1035,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameru",{"_index":1036,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameua",{"_index":1034,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttowneng",{"_index":1039,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownru",{"_index":1040,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownua",{"_index":1038,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.iata",{"_index":1037,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departuretime",{"_index":734,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["dependencies",{"_index":150,"title":{"dependencies.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["deptime",{"_index":1122,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["description",{"_index":26,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"index.html":{}}}],["descriptioneng",{"_index":13,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionru",{"_index":14,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionua",{"_index":15,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["development",{"_index":1596,"title":{},"body":{"index.html":{}}}],["disabled",{"_index":1292,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["dmitry",{"_index":820,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{}}}],["document",{"_index":58,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["document'})@prop({required",{"_index":1269,"title":{},"body":{"classes/Ticket.html":{}}}],["documentation",{"_index":1499,"title":{},"body":{"coverage.html":{}}}],["dto/change",{"_index":1434,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":124,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["dto/search",{"_index":941,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dto/update",{"_index":126,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":850,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["e2e",{"_index":1607,"title":{},"body":{"index.html":{}}}],["economy",{"_index":1180,"title":{},"body":{"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["efficient",{"_index":1583,"title":{},"body":{"index.html":{}}}],["efremov",{"_index":824,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["email",{"_index":630,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["endof('day",{"_index":1029,"title":{},"body":{"injectables/FlightsService.html":{}}}],["english",{"_index":27,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["entities/airlines.entity",{"_index":127,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{}}}],["entities/airplane.entity",{"_index":287,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{}}}],["entities/airport.entity",{"_index":394,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{}}}],["entities/flights.entity",{"_index":942,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{}}}],["entities/seat.entity",{"_index":1148,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["entities/section.entity",{"_index":795,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{}}}],["entities/ticket.entity",{"_index":843,"title":{},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/users.entity",{"_index":1436,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":873,"title":{},"body":{"injectables/FilesService.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1568,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["env",{"_index":1545,"title":{},"body":{"dependencies.html":{}}}],["envfilepath",{"_index":519,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["err",{"_index":220,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":884,"title":{},"body":{"injectables/FilesService.html":{}}}],["example",{"_index":62,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["exchange",{"_index":735,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["exchange'})@prop",{"_index":903,"title":{},"body":{"classes/Flight.html":{}}}],["exec",{"_index":206,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":1100,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exists",{"_index":210,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["expiresin",{"_index":612,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":60,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":155,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":118,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":83,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["extends",{"_index":682,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["false",{"_index":218,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["female",{"_index":1289,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":883,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname.split('.').pop",{"_index":875,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileextension",{"_index":874,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":116,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["filename",{"_index":213,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{}}}],["filepath",{"_index":877,"title":{},"body":{"injectables/FilesService.html":{}}}],["files.service",{"_index":866,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":509,"title":{},"body":{"modules/AppModule.html":{}}}],["files/files.service",{"_index":200,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["filesmodule",{"_index":481,"title":{"modules/FilesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FilesModule.html":{},"modules.html":{},"overview.html":{}}}],["filesservice",{"_index":159,"title":{"injectables/FilesService.html":{}},"body":{"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"overview.html":{}}}],["find",{"_index":222,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["find(@param('id",{"_index":1322,"title":{},"body":{"controllers/TicketsController.html":{}}}],["find(id",{"_index":1303,"title":{},"body":{"controllers/TicketsController.html":{}}}],["findall",{"_index":78,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(airlineid",{"_index":223,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyid(airplane._id",{"_index":326,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airplaneid",{"_index":329,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airportid",{"_index":432,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyid(flight.airplane",{"_index":1368,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(flightid",{"_index":989,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyid(sectionid",{"_index":1248,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyid(ticketdto.flight",{"_index":1363,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketdto.user",{"_index":1365,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketid",{"_index":1373,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(userid",{"_index":1482,"title":{},"body":{"injectables/UsersService.html":{}}}],["findbyidanddelete(airlineid",{"_index":239,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyidanddelete(airplaneid",{"_index":335,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyidanddelete(airportid",{"_index":455,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyidanddelete(flightid",{"_index":1019,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyidanddelete(sectionid",{"_index":1253,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyidanddelete(userid",{"_index":1496,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":79,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":139,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":101,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["first",{"_index":821,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["firstname",{"_index":641,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["flag",{"_index":583,"title":{},"body":{"controllers/AuthController.html":{}}}],["flagship",{"_index":44,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["flight",{"_index":771,"title":{"classes/Flight.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["flight'})@apiresponse({status",{"_index":921,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@prop({required",{"_index":1272,"title":{},"body":{"classes/Ticket.html":{}}}],["flight.airline",{"_index":992,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.airplane",{"_index":995,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivalairport",{"_index":998,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivaltime",{"_index":1001,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.baggage",{"_index":1003,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.carryonbaggage",{"_index":1005,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departureairport",{"_index":1007,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departuretime",{"_index":1010,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.dto",{"_index":940,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts",{"_index":728,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:13",{"_index":1124,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:16",{"_index":772,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:20",{"_index":1125,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:24",{"_index":740,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:28",{"_index":1123,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:32",{"_index":742,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:40",{"_index":762,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:47",{"_index":764,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:55",{"_index":745,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:62",{"_index":751,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":776,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:74",{"_index":754,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:79",{"_index":759,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:83",{"_index":768,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:87",{"_index":774,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.exchange",{"_index":1012,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.flightname",{"_index":1013,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.name",{"_index":958,"title":{},"body":{"modules/FlightsModule.html":{},"modules/TicketsModule.html":{}}}],["flight.refund",{"_index":1015,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.save",{"_index":1018,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.taxa",{"_index":1017,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdocument",{"_index":913,"title":{},"body":{"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["flightdto",{"_index":924,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flightdto.airline",{"_index":991,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airline.tostring",{"_index":993,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane",{"_index":994,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane.tostring",{"_index":996,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport",{"_index":997,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport.tostring",{"_index":999,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivaltime",{"_index":1000,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.baggage",{"_index":1002,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.carryonbaggage",{"_index":1004,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport",{"_index":1006,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport.tostring",{"_index":1008,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departuretime",{"_index":1009,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.exchange",{"_index":1011,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.flightname",{"_index":986,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.refund",{"_index":1014,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.taxa",{"_index":1016,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightid",{"_index":973,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightmodel",{"_index":968,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["flightname",{"_index":736,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["flights",{"_index":918,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apiresponse({status",{"_index":927,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":957,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.service",{"_index":939,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":507,"title":{},"body":{"modules/AppModule.html":{}}}],["flightschema",{"_index":914,"title":{},"body":{"classes/Flight.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["flightscontroller",{"_index":916,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":482,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["flightsservice",{"_index":938,"title":{"injectables/FlightsService.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"coverage.html":{},"overview.html":{}}}],["flight})@delete(':id",{"_index":925,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@get(':id",{"_index":929,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@patch(':id",{"_index":936,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@post",{"_index":922,"title":{},"body":{"controllers/FlightsController.html":{}}}],["folder",{"_index":199,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{}}}],["forwardref",{"_index":600,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":224,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["framework",{"_index":1581,"title":{},"body":{"index.html":{}}}],["free",{"_index":788,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Seat.html":{},"miscellaneous/enumerations.html":{}}}],["fs",{"_index":871,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.existssync(filepath",{"_index":879,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.mkdirsync(filepath",{"_index":880,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.writefilesync(path.join(filepath",{"_index":882,"title":{},"body":{"injectables/FilesService.html":{}}}],["function",{"_index":1070,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1575,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuse",{"_index":981,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(initialflights",{"_index":1041,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(result",{"_index":1052,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.js",{"_index":982,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["fuse.search(flightdto.arrival).map((r",{"_index":1053,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.search(flightdto.departure).map((r",{"_index":1042,"title":{},"body":{"injectables/FlightsService.html":{}}}],["get(':id",{"_index":138,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":473,"title":{},"body":{"controllers/AppController.html":{}}}],["getairlinebyid",{"_index":177,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairlinebyid(airlineid",{"_index":191,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairplanebyid",{"_index":306,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairplanebyid(airplaneid",{"_index":317,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairportbyid",{"_index":412,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getairportbyid(airportid",{"_index":423,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallairlines",{"_index":178,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getallairplanes",{"_index":307,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getallairports",{"_index":413,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallflights",{"_index":962,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getallsections",{"_index":1226,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getalltickets",{"_index":1342,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getallusers",{"_index":1460,"title":{},"body":{"injectables/UsersService.html":{}}}],["getflightbyid",{"_index":963,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getflightbyid(flightid",{"_index":975,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getprofile",{"_index":458,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":474,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":459,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(userid",{"_index":620,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsectionbyid",{"_index":1227,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getsectionbyid(sectionid",{"_index":1238,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getticketbyid",{"_index":1343,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getticketbyid(ticketid",{"_index":1353,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getting",{"_index":1577,"title":{"index.html":{}},"body":{}}],["getuserbyemail",{"_index":1461,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1473,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1462,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":1475,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":1614,"title":{},"body":{"index.html":{}}}],["gte",{"_index":1021,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["guard",{"_index":1092,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":1093,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":569,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":571,"title":{},"body":{"controllers/AuthController.html":{}}}],["hand",{"_index":757,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["hashpassword",{"_index":651,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["helmet",{"_index":1550,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1624,"title":{},"body":{"index.html":{}}}],["hours",{"_index":1025,"title":{},"body":{"injectables/FlightsService.html":{}}}],["httpexception",{"_index":196,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('no",{"_index":1118,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpexception('password",{"_index":1491,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception(err",{"_index":221,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":585,"title":{},"body":{"controllers/AuthController.html":{}}}],["https://nestjs.com",{"_index":1631,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":197,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":211,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":1120,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpstatus.internal_server_error",{"_index":887,"title":{},"body":{"injectables/FilesService.html":{}}}],["httpstatus.not_found",{"_index":225,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["iata",{"_index":347,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{}}}],["iata'})@prop({required",{"_index":367,"title":{},"body":{"classes/Airport.html":{}}}],["id",{"_index":96,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1500,"title":{},"body":{"coverage.html":{}}}],["iev",{"_index":366,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["ignoreexpiration",{"_index":1077,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":1108,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":167,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@useguards(localauthguard)@post('signin",{"_index":559,"title":{},"body":{"controllers/AuthController.html":{}}}],["includescore",{"_index":1032,"title":{},"body":{"injectables/FlightsService.html":{}}}],["incorrect",{"_index":660,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["initialflights",{"_index":1020,"title":{},"body":{"injectables/FlightsService.html":{}}}],["inject",{"_index":526,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":170,"title":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":171,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectmodel",{"_index":198,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(airline.name",{"_index":201,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["injectmodel(airplane.name",{"_index":323,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(airport.name",{"_index":428,"title":{},"body":{"injectables/AirportsService.html":{}}}],["injectmodel(flight.name",{"_index":984,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(seat.name",{"_index":1243,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(section.name",{"_index":1242,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(ticket.name",{"_index":1361,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectmodel(user.name",{"_index":1362,"title":{},"body":{"injectables/TicketsService.html":{}}}],["installation",{"_index":1592,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1594,"title":{},"body":{"index.html":{}}}],["international",{"_index":24,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["isarray",{"_index":706,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isarray()@arrayunique()@isnotempty()@apiproperty({example",{"_index":703,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isboolean",{"_index":777,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isboolean()@isnotempty()@apiproperty({example",{"_index":756,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isemail",{"_index":861,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":841,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(sex",{"_index":844,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(status",{"_index":847,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(type",{"_index":845,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isin",{"_index":794,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isin([class.business",{"_index":796,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["ismongoid",{"_index":778,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["ismongoid()@isnotempty()@apiproperty({example",{"_index":741,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isnotempty",{"_index":678,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@apiproperty({example",{"_index":746,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@isemail()@apiproperty({example",{"_index":849,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isenum(sex)@apiproperty({example",{"_index":828,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(status)@apiproperty({example",{"_index":831,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(type)@apiproperty({example",{"_index":834,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isin(undefined)@apiproperty({example",{"_index":787,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@ismongoid()@apiproperty({example",{"_index":739,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({example",{"_index":701,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isnotempty()@isphonenumber()@apiproperty({example",{"_index":857,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":695,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@isstring()@isuppercase()@length(2",{"_index":719,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["isnotempty()@isstring()@matches('^(?=.*?[a",{"_index":666,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":707,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({example",{"_index":775,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isoptional",{"_index":697,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@apiproperty({example",{"_index":765,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@isstring()@apiproperty({example",{"_index":688,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["isphonenumber",{"_index":862,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":679,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":691,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@length(7",{"_index":816,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isuppercase",{"_index":722,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["join",{"_index":500,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["join(__dirname",{"_index":534,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt",{"_index":579,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":467,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1076,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":603,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":608,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":618,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":597,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":1628,"title":{},"body":{"index.html":{}}}],["keys",{"_index":1033,"title":{},"body":{"injectables/FlightsService.html":{}}}],["kiev",{"_index":360,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["last",{"_index":825,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lastname",{"_index":643,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lax",{"_index":587,"title":{},"body":{"controllers/AuthController.html":{}}}],["legend",{"_index":151,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":723,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["length(2",{"_index":724,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["length(7",{"_index":846,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["license",{"_index":1634,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":1611,"title":{},"body":{"index.html":{}}}],["limit",{"_index":530,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1087,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":570,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":598,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["log",{"_index":553,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":1090,"title":{"classes/LoginUserDto.html":{}},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["logo",{"_index":16,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["logo'})@prop({required",{"_index":49,"title":{},"body":{"classes/Airline.html":{}}}],["logout",{"_index":548,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":593,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":551,"title":{},"body":{"controllers/AuthController.html":{}}}],["lte",{"_index":1028,"title":{},"body":{"injectables/FlightsService.html":{}}}],["luggage",{"_index":758,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["luggage'})@prop({required",{"_index":899,"title":{},"body":{"classes/Flight.html":{}}}],["mail",{"_index":851,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["mail'})@prop({required",{"_index":1395,"title":{},"body":{"classes/User.html":{}}}],["male",{"_index":829,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1536,"title":{},"body":{"dependencies.html":{}}}],["match",{"_index":1030,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":680,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matches('^(?=.*?[a",{"_index":684,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matching",{"_index":68,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":659,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1558,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":75,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["miscellaneous",{"_index":1567,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1492,"title":{},"body":{"injectables/UsersService.html":{}}}],["mit",{"_index":1610,"title":{},"body":{"index.html":{}}}],["mode",{"_index":1600,"title":{},"body":{"index.html":{}}}],["model",{"_index":182,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":147,"title":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":149,"title":{"modules.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":983,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["moment(flightdto.deptime",{"_index":1022,"title":{},"body":{"injectables/FlightsService.html":{}}}],["mongoose",{"_index":59,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":263,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["mongoose.types.objectid",{"_index":891,"title":{},"body":{"classes/Flight.html":{},"classes/Seat.html":{},"classes/Ticket.html":{}}}],["mongoosemodule",{"_index":164,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":168,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":535,"title":{},"body":{"modules/AppModule.html":{}}}],["more",{"_index":1623,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":1629,"title":{},"body":{"index.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name'})@prop({required",{"_index":248,"title":{},"body":{"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["name'})@prop({unique",{"_index":356,"title":{},"body":{"classes/Airport.html":{}}}],["nest",{"_index":1588,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":1633,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":115,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":493,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":499,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":604,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":676,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"dependencies.html":{}}}],["nestjs/mongoose",{"_index":55,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":602,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":117,"title":{},"body":{"controllers/AirlinesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":511,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":57,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":496,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":208,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":664,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["newpasswordequals",{"_index":1489,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":1580,"title":{},"body":{"index.html":{}}}],["notavailable",{"_index":1137,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["npm",{"_index":1593,"title":{},"body":{"index.html":{}}}],["null",{"_index":752,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":250,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["number'})@prop({required",{"_index":1401,"title":{},"body":{"classes/User.html":{}}}],["numberofseat",{"_index":805,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["objectid",{"_index":93,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":1103,"title":{},"body":{"guards/RolesGuard.html":{}}}],["occurred",{"_index":885,"title":{},"body":{"injectables/FilesService.html":{}}}],["october",{"_index":41,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["old",{"_index":1493,"title":{},"body":{"injectables/UsersService.html":{}}}],["oldpassword",{"_index":665,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["open",{"_index":1612,"title":{},"body":{"index.html":{}}}],["operating",{"_index":40,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionsforarrival",{"_index":1044,"title":{},"body":{"injectables/FlightsService.html":{}}}],["optionsfordeparture",{"_index":1031,"title":{},"body":{"injectables/FlightsService.html":{}}}],["out",{"_index":162,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["out'})@useguards(jwtauthguard)@post('logout",{"_index":554,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1638,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":1519,"title":{"dependencies.html":{}},"body":{}}],["paid",{"_index":1135,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":112,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":1447,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":89,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1530,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":675,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["partialtype(createairlinedto",{"_index":1380,"title":{},"body":{"classes/UpdateAirlineDto.html":{}}}],["partialtype(createairplanedto",{"_index":1382,"title":{},"body":{"classes/UpdateAirplaneDto.html":{}}}],["partialtype(createairportdto",{"_index":1384,"title":{},"body":{"classes/UpdateAirportDto.html":{}}}],["partialtype(createflightdto",{"_index":1126,"title":{},"body":{"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{}}}],["partialtype(createseatdto",{"_index":1256,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["partialtype(createsectiondto",{"_index":1388,"title":{},"body":{"classes/UpdateSectionDto.html":{}}}],["partialtype(createticketdto",{"_index":1390,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["partialtype(createuserdto",{"_index":683,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["pass",{"_index":628,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1067,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":601,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1065,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1074,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":577,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":654,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password'})@apiresponse({status",{"_index":1418,"title":{},"body":{"controllers/UsersController.html":{}}}],["password'})@prop({required",{"_index":1399,"title":{},"body":{"classes/User.html":{}}}],["password.dto",{"_index":1435,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":663,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:12",{"_index":674,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["password.dto.ts:18",{"_index":672,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["passwordequals",{"_index":656,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":1494,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":111,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["patch(':id",{"_index":141,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["patch(':id/changepassword",{"_index":1446,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id/select",{"_index":1155,"title":{},"body":{"controllers/SeatsController.html":{}}}],["patch(':id/update",{"_index":1153,"title":{},"body":{"controllers/SeatsController.html":{},"controllers/UsersController.html":{}}}],["path",{"_index":328,"title":{},"body":{"injectables/AirplanesService.html":{},"modules/AppModule.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["path.resolve(__dirname",{"_index":878,"title":{},"body":{"injectables/FilesService.html":{}}}],["payload",{"_index":635,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["phone",{"_index":859,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["phonenumber",{"_index":645,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["please",{"_index":1621,"title":{},"body":{"index.html":{}}}],["populate",{"_index":327,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["post",{"_index":109,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["post('logout",{"_index":592,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reserve",{"_index":1319,"title":{},"body":{"controllers/TicketsController.html":{}}}],["post('search",{"_index":946,"title":{},"body":{"controllers/FlightsController.html":{}}}],["post('signin",{"_index":575,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":589,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":785,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["price'})@prop({required",{"_index":1183,"title":{},"body":{"classes/Section.html":{}}}],["private",{"_index":202,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env}.env",{"_index":520,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["production",{"_index":1602,"title":{},"body":{"index.html":{}}}],["profile",{"_index":471,"title":{},"body":{"controllers/AppController.html":{}}}],["profile'})@useguards(jwtauthguard)@get('profile",{"_index":460,"title":{},"body":{"controllers/AppController.html":{}}}],["progressive",{"_index":1579,"title":{},"body":{"index.html":{}}}],["project",{"_index":1613,"title":{},"body":{"index.html":{}}}],["promise",{"_index":187,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":52,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["properties'})@prop",{"_index":897,"title":{},"body":{"classes/Flight.html":{}}}],["provide",{"_index":542,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":154,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["ps",{"_index":769,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["public",{"_index":173,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["r.item",{"_index":1043,"title":{},"body":{"injectables/FlightsService.html":{}}}],["read",{"_index":1622,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":131,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":881,"title":{},"body":{"injectables/FilesService.html":{}}}],["ref",{"_index":258,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["reflect",{"_index":1557,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1097,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refund",{"_index":737,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["repository",{"_index":1591,"title":{},"body":{"index.html":{}}}],["req",{"_index":462,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.cookies",{"_index":1072,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.cookies['access_token",{"_index":1073,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1115,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":463,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["required",{"_index":63,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":1109,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1116,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":556,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":584,"title":{},"body":{"controllers/AuthController.html":{}}}],["resbody",{"_index":578,"title":{},"body":{"controllers/AuthController.html":{}}}],["reset",{"_index":161,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":552,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":67,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":69,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":135,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["return'})@prop",{"_index":906,"title":{},"body":{"classes/Flight.html":{}}}],["return(@param('id",{"_index":1325,"title":{},"body":{"controllers/TicketsController.html":{}}}],["return(id",{"_index":1308,"title":{},"body":{"controllers/TicketsController.html":{}}}],["returned",{"_index":1136,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["returns",{"_index":91,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnticket",{"_index":1344,"title":{},"body":{"injectables/TicketsService.html":{}}}],["returnticket(ticketid",{"_index":1356,"title":{},"body":{"injectables/TicketsService.html":{}}}],["rimraf",{"_index":1560,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":639,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@prop({required",{"_index":1403,"title":{},"body":{"classes/User.html":{}}}],["role.user",{"_index":1409,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":1437,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":1441,"title":{},"body":{"controllers/UsersController.html":{}}}],["roles_key",{"_index":1105,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":516,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":533,"title":{},"body":{"modules/AppModule.html":{}}}],["rs123456",{"_index":818,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["run",{"_index":1597,"title":{},"body":{"index.html":{}}}],["russian",{"_index":34,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["rxjs",{"_index":1104,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["salt",{"_index":649,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["samesite",{"_index":586,"title":{},"body":{"controllers/AuthController.html":{}}}],["scalable",{"_index":1584,"title":{},"body":{"index.html":{}}}],["schema",{"_index":53,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":54,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(airline",{"_index":66,"title":{},"body":{"classes/Airline.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airplane",{"_index":265,"title":{},"body":{"classes/Airplane.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airport",{"_index":372,"title":{},"body":{"classes/Airport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(flight",{"_index":915,"title":{},"body":{"classes/Flight.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(seat",{"_index":1140,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(section",{"_index":1190,"title":{},"body":{"classes/Section.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ticket",{"_index":1294,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1410,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":919,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(@body",{"_index":947,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(flightdto",{"_index":931,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflightdto",{"_index":932,"title":{"classes/SearchFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["searchflights",{"_index":964,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflights(flightdto",{"_index":977,"title":{},"body":{"injectables/FlightsService.html":{}}}],["seat",{"_index":262,"title":{"classes/Seat.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"coverage.html":{}}}],["seat'})@prop({default",{"_index":1275,"title":{},"body":{"classes/Ticket.html":{}}}],["seat'})@prop({required",{"_index":253,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["seat.dto",{"_index":1147,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts",{"_index":781,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat.dto.ts:17",{"_index":1255,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.name",{"_index":1164,"title":{},"body":{"modules/SeatsModule.html":{},"modules/SectionsModule.html":{}}}],["seat.save",{"_index":1177,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seat.status",{"_index":1176,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatdocument",{"_index":1134,"title":{},"body":{"classes/Seat.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["seatdto",{"_index":1143,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seatdto.status",{"_index":1175,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatid",{"_index":1172,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatmodel",{"_index":1169,"title":{},"body":{"injectables/SeatsService.html":{},"injectables/SectionsService.html":{}}}],["seats",{"_index":786,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["seats'})@prop({trim",{"_index":1185,"title":{},"body":{"classes/Section.html":{}}}],["seats.controller",{"_index":1163,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1150,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":514,"title":{},"body":{"modules/AppModule.html":{}}}],["seatschema",{"_index":1139,"title":{},"body":{"classes/Seat.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seatscontroller",{"_index":1141,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":483,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeatsModule.html":{},"modules.html":{},"overview.html":{}}}],["seatsservice",{"_index":1149,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"overview.html":{}}}],["seat})@patch(':id/update",{"_index":1145,"title":{},"body":{"controllers/SeatsController.html":{}}}],["secret",{"_index":609,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1078,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":255,"title":{"classes/Section.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateSectionDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{}}}],["section'})@apiresponse({status",{"_index":1194,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@prop({required",{"_index":1129,"title":{},"body":{"classes/Seat.html":{}}}],["section.class",{"_index":1250,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.dto",{"_index":1209,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{}}}],["section.dto.ts",{"_index":784,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["section.dto.ts:10",{"_index":791,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:15",{"_index":789,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:23",{"_index":793,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.name",{"_index":1222,"title":{},"body":{"modules/SectionsModule.html":{}}}],["section.price",{"_index":1251,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.save",{"_index":1252,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondocument",{"_index":1187,"title":{},"body":{"classes/Section.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["sectiondto",{"_index":1197,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{}}}],["sectiondto.class",{"_index":1246,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondto.price",{"_index":1245,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionid",{"_index":1236,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionmodel",{"_index":1231,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sections",{"_index":244,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["sections'})@apiresponse({status",{"_index":1200,"title":{},"body":{"controllers/SectionsController.html":{}}}],["sections'})@prop({trim",{"_index":256,"title":{},"body":{"classes/Airplane.html":{}}}],["sections.controller",{"_index":1221,"title":{},"body":{"modules/SectionsModule.html":{}}}],["sections.service",{"_index":1208,"title":{},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{}}}],["sections/sections.module",{"_index":515,"title":{},"body":{"modules/AppModule.html":{}}}],["sectionschema",{"_index":1189,"title":{},"body":{"classes/Section.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sectionscontroller",{"_index":1191,"title":{"controllers/SectionsController.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"coverage.html":{}}}],["sectionsmodule",{"_index":484,"title":{"modules/SectionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SectionsModule.html":{},"modules.html":{},"overview.html":{}}}],["sectionsservice",{"_index":1207,"title":{"injectables/SectionsService.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{},"overview.html":{}}}],["section})@delete(':id",{"_index":1198,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@get(':id",{"_index":1202,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@patch(':id",{"_index":1205,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@post",{"_index":1195,"title":{},"body":{"controllers/SectionsController.html":{}}}],["secure",{"_index":582,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":216,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["select(@param('id",{"_index":1156,"title":{},"body":{"controllers/SeatsController.html":{}}}],["selectseatdto",{"_index":1157,"title":{"classes/SelectSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"classes/SelectSeatDto.html":{},"coverage.html":{}}}],["server",{"_index":1585,"title":{},"body":{"index.html":{}}}],["servestaticmodule",{"_index":510,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":532,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata(roles_key",{"_index":1652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sex",{"_index":806,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["sex'})@prop({required",{"_index":1277,"title":{},"body":{"classes/Ticket.html":{}}}],["sheremetyevo/шереметьево/svo",{"_index":743,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["side",{"_index":1586,"title":{},"body":{"index.html":{}}}],["sign",{"_index":558,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":549,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@request",{"_index":576,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(req",{"_index":557,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":623,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":611,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":550,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":590,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":561,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["sponsors",{"_index":1616,"title":{},"body":{"index.html":{}}}],["src/.../airlines.entity.ts",{"_index":1645,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airplane.entity.ts",{"_index":1646,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airport.entity.ts",{"_index":1647,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../files.service.ts",{"_index":1570,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../flights.entity.ts",{"_index":1648,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1576,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seat.entity.ts",{"_index":1573,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../section.entity.ts",{"_index":1569,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ticket.entity.ts",{"_index":1572,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.entity.ts",{"_index":1571,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/airlines.controller.ts",{"_index":73,"title":{},"body":{"controllers/AirlinesController.html":{},"coverage.html":{}}}],["src/airlines/airlines.controller.ts:30",{"_index":88,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:40",{"_index":100,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:47",{"_index":104,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:54",{"_index":108,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:61",{"_index":95,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.module.ts",{"_index":163,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/airlines/airlines.service.ts",{"_index":172,"title":{},"body":{"injectables/AirlinesService.html":{},"coverage.html":{}}}],["src/airlines/airlines.service.ts:10",{"_index":183,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:110",{"_index":189,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:16",{"_index":186,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:49",{"_index":193,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:57",{"_index":192,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:71",{"_index":195,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/dto/create",{"_index":686,"title":{},"body":{"classes/CreateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/dto/update",{"_index":1379,"title":{},"body":{"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/entities/airlines.entity",{"_index":911,"title":{},"body":{"classes/Flight.html":{}}}],["src/airlines/entities/airlines.entity.ts",{"_index":6,"title":{},"body":{"classes/Airline.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/entities/airlines.entity.ts:14",{"_index":39,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:21",{"_index":33,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:28",{"_index":35,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:36",{"_index":48,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:44",{"_index":46,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:52",{"_index":47,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:59",{"_index":50,"title":{},"body":{"classes/Airline.html":{}}}],["src/airplanes/airplanes.controller.ts",{"_index":267,"title":{},"body":{"controllers/AirplanesController.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.controller.ts:26",{"_index":273,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:33",{"_index":278,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:40",{"_index":280,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:47",{"_index":283,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:54",{"_index":276,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.module",{"_index":1337,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airplanes/airplanes.module.ts",{"_index":300,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["src/airplanes/airplanes.service.ts",{"_index":303,"title":{},"body":{"injectables/AirplanesService.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.service.ts:15",{"_index":310,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:20",{"_index":313,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:36",{"_index":319,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:45",{"_index":318,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:60",{"_index":321,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:82",{"_index":315,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/dto/create",{"_index":698,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/dto/update",{"_index":1381,"title":{},"body":{"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/entities/airplane.entity",{"_index":912,"title":{},"body":{"classes/Flight.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/airplanes/entities/airplane.entity.ts",{"_index":241,"title":{},"body":{"classes/Airplane.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airplanes/entities/airplane.entity.ts:17",{"_index":249,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:21",{"_index":254,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:29",{"_index":259,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airports/airports.controller.ts",{"_index":374,"title":{},"body":{"controllers/AirportsController.html":{},"coverage.html":{}}}],["src/airports/airports.controller.ts:26",{"_index":380,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:33",{"_index":385,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:40",{"_index":387,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:47",{"_index":390,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:54",{"_index":383,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.module",{"_index":1332,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airports/airports.module.ts",{"_index":406,"title":{},"body":{"modules/AirportsModule.html":{}}}],["src/airports/airports.service.ts",{"_index":409,"title":{},"body":{"injectables/AirportsService.html":{},"coverage.html":{}}}],["src/airports/airports.service.ts:117",{"_index":421,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:15",{"_index":416,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:20",{"_index":419,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:47",{"_index":425,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:55",{"_index":424,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:69",{"_index":427,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/dto/create",{"_index":708,"title":{},"body":{"classes/CreateAirportDto.html":{},"coverage.html":{}}}],["src/airports/dto/update",{"_index":1383,"title":{},"body":{"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["src/airports/entities/airport.entity",{"_index":910,"title":{},"body":{"classes/Flight.html":{}}}],["src/airports/entities/airport.entity.ts",{"_index":337,"title":{},"body":{"classes/Airport.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airports/entities/airport.entity.ts:11",{"_index":359,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:18",{"_index":357,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:22",{"_index":358,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:26",{"_index":368,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:33",{"_index":354,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:40",{"_index":350,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:47",{"_index":351,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:54",{"_index":365,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:61",{"_index":362,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:68",{"_index":363,"title":{},"body":{"classes/Airport.html":{}}}],["src/app.controller.ts",{"_index":457,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:14",{"_index":461,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":488,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":544,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":546,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:25",{"_index":560,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":564,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":555,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1455,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":599,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":614,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":619,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":621,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":624,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":626,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":629,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles",{"_index":1438,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":1054,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1080,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1094,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:14",{"_index":1098,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:17",{"_index":1101,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1058,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":1061,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:29",{"_index":1064,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1082,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":1086,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":1084,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/files/files.module.ts",{"_index":865,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service",{"_index":165,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/files/files.service.ts",{"_index":867,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/files/files.service.ts:12",{"_index":870,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/flights/dto/create",{"_index":727,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/search",{"_index":1121,"title":{},"body":{"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/update",{"_index":1385,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/entities/flights.entity",{"_index":1287,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/flights/entities/flights.entity.ts",{"_index":890,"title":{},"body":{"classes/Flight.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/flights/entities/flights.entity.ts:16",{"_index":905,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:27",{"_index":892,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:38",{"_index":893,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:50",{"_index":901,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:57",{"_index":902,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:69",{"_index":894,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:76",{"_index":896,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:80",{"_index":909,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:87",{"_index":898,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:91",{"_index":900,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:95",{"_index":904,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:99",{"_index":907,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":917,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:27",{"_index":923,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:34",{"_index":934,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:41",{"_index":928,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:48",{"_index":930,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:55",{"_index":937,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:62",{"_index":926,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":1333,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":956,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service.ts",{"_index":959,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:149",{"_index":972,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:165",{"_index":978,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:18",{"_index":967,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:23",{"_index":970,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:55",{"_index":974,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:71",{"_index":976,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:87",{"_index":980,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/main.ts",{"_index":1514,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/seats/dto/create",{"_index":780,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/select",{"_index":1254,"title":{},"body":{"classes/SelectSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/update",{"_index":1386,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["src/seats/entities/seat.entity",{"_index":842,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{}}}],["src/seats/entities/seat.entity.ts",{"_index":1127,"title":{},"body":{"classes/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/seats/entities/seat.entity.ts:30",{"_index":1130,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:34",{"_index":1128,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:38",{"_index":1133,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1142,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:17",{"_index":1146,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module.ts",{"_index":1162,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1165,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:12",{"_index":1171,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:9",{"_index":1168,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/sections/dto/create",{"_index":783,"title":{},"body":{"classes/CreateSectionDto.html":{},"coverage.html":{}}}],["src/sections/dto/update",{"_index":1387,"title":{},"body":{"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["src/sections/entities/section.entity",{"_index":260,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["src/sections/entities/section.entity.ts",{"_index":1179,"title":{},"body":{"classes/Section.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/sections/entities/section.entity.ts:19",{"_index":1184,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:23",{"_index":1182,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:34",{"_index":1186,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/sections.controller.ts",{"_index":1192,"title":{},"body":{"controllers/SectionsController.html":{},"coverage.html":{}}}],["src/sections/sections.controller.ts:26",{"_index":1196,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:33",{"_index":1201,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:40",{"_index":1203,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:47",{"_index":1206,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:54",{"_index":1199,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.module.ts",{"_index":1220,"title":{},"body":{"modules/SectionsModule.html":{}}}],["src/sections/sections.service.ts",{"_index":1223,"title":{},"body":{"injectables/SectionsService.html":{},"coverage.html":{}}}],["src/sections/sections.service.ts:11",{"_index":1230,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:17",{"_index":1233,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:44",{"_index":1237,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:53",{"_index":1239,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:68",{"_index":1241,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:95",{"_index":1235,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/tickets/dto/create",{"_index":799,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/dto/update",{"_index":1389,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/entities/ticket.entity",{"_index":1407,"title":{},"body":{"classes/User.html":{}}}],["src/tickets/entities/ticket.entity.ts",{"_index":1261,"title":{},"body":{"classes/Ticket.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tickets/entities/ticket.entity.ts:100",{"_index":1279,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:107",{"_index":1276,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:39",{"_index":1273,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:47",{"_index":1283,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:51",{"_index":1278,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:55",{"_index":1281,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:59",{"_index":1271,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:63",{"_index":1274,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:67",{"_index":1263,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:74",{"_index":1268,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:81",{"_index":1265,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:88",{"_index":1266,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:92",{"_index":1270,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:96",{"_index":1285,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/tickets.controller.ts",{"_index":1296,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/tickets/tickets.controller.ts:26",{"_index":1301,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:33",{"_index":1307,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:40",{"_index":1305,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:47",{"_index":1313,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:54",{"_index":1310,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.module.ts",{"_index":1331,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/tickets/tickets.service.ts",{"_index":1340,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/tickets/tickets.service.ts:118",{"_index":1357,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:21",{"_index":1348,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:29",{"_index":1351,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:75",{"_index":1352,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:85",{"_index":1354,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:95",{"_index":1359,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/users/dto/change",{"_index":662,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":566,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":1091,"title":{},"body":{"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1392,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":1286,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1394,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/users.entity.ts:19",{"_index":1397,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":1398,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1402,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:31",{"_index":1400,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:35",{"_index":1396,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:39",{"_index":1404,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:50",{"_index":1406,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1412,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:28",{"_index":1426,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:36",{"_index":1428,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:43",{"_index":1431,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:50",{"_index":1420,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":1423,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":1334,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/users/users.module.ts",{"_index":1453,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":1068,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1456,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1465,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:131",{"_index":1471,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:145",{"_index":1474,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1469,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1472,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1476,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1478,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:89",{"_index":1467,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1598,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1601,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1603,"title":{},"body":{"index.html":{}}}],["started",{"_index":1578,"title":{"index.html":{}},"body":{}}],["starter",{"_index":1590,"title":{},"body":{"index.html":{}}}],["startof('day",{"_index":1023,"title":{},"body":{"injectables/FlightsService.html":{}}}],["statements",{"_index":1501,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":512,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilesService.html":{},"dependencies.html":{}}}],["status",{"_index":133,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/CreateTicketDto.html":{},"controllers/FlightsController.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{},"miscellaneous/enumerations.html":{}}}],["status'})@prop({required",{"_index":1131,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{}}}],["status.booked",{"_index":1257,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{}}}],["status.free",{"_index":1138,"title":{},"body":{"classes/Seat.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["status.notavailable",{"_index":1258,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["status.paid",{"_index":1259,"title":{},"body":{"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{}}}],["status.returned",{"_index":1260,"title":{},"body":{"classes/SelectSeatDto.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{}}}],["stay",{"_index":1625,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":606,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":605,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1066,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":19,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"injectables/LocalStrategy.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["sub",{"_index":637,"title":{},"body":{"injectables/AuthService.html":{}}}],["summary",{"_index":132,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1075,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1617,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1636,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1563,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1518,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1517,"title":{},"body":{"coverage.html":{}}}],["taxa",{"_index":738,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["taxa'})@prop",{"_index":908,"title":{},"body":{"classes/Flight.html":{}}}],["test",{"_index":1606,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":1609,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":1608,"title":{},"body":{"index.html":{}}}],["test@gmail.com",{"_index":837,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["tests",{"_index":1605,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":1615,"title":{},"body":{"index.html":{}}}],["this.airlinemodel",{"_index":204,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.create",{"_index":215,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.findbyid(airlineid).exec",{"_index":226,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinesservice.createairline(airlinedto",{"_index":136,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.deleteairline(id",{"_index":146,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getairlinebyid(id",{"_index":140,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getallairlines",{"_index":137,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.updateairlinedata(id",{"_index":143,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airplanemodel",{"_index":325,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["this.airplanemodel.create",{"_index":324,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanemodel.findbyid(airplaneid).exec",{"_index":330,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanesservice.createairplane(airplanedto",{"_index":291,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.deleteairplane(id",{"_index":295,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getairplanebyid(id",{"_index":293,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getallairplanes",{"_index":292,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.updateairplanedata(id",{"_index":294,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airportmodel",{"_index":429,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.create",{"_index":431,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.findbyid(airportid).exec",{"_index":433,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportsservice.createairport(airportdto",{"_index":397,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.deleteairport(id",{"_index":401,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getairportbyid(id",{"_index":399,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getallairports",{"_index":398,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.updateairportdata(id",{"_index":400,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.authservice.getprofile(req.user._id",{"_index":475,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(req.user",{"_index":580,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":591,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1089,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.filesservice.createfile(folder.airline",{"_index":214,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.flightmodel",{"_index":985,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["this.flightmodel.create",{"_index":988,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(flightid).exec",{"_index":990,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(ticket.flight).exec",{"_index":1375,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.flightsservice.createflight(flightdto",{"_index":945,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.deleteflight(id",{"_index":952,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getallflights",{"_index":949,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getflightbyid(id",{"_index":950,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.searchflights(flightdto",{"_index":948,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.updateflightdata(id",{"_index":951,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":647,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":1114,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1110,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seatmodel.findbyid(seatid).exec",{"_index":1174,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatmodel.findbyid(seatid).select",{"_index":1178,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatsservice.selectseat(id",{"_index":1158,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.seatsservice.updateseatdata(id",{"_index":1154,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.sectionmodel",{"_index":1247,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.create",{"_index":1244,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.findbyid(sectionid).exec",{"_index":1249,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionsservice.createsection(sectiondto",{"_index":1212,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.deletesection(id",{"_index":1216,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getallsections",{"_index":1213,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getsectionbyid(id",{"_index":1214,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.updatesectiondata(id",{"_index":1215,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.ticketmodel",{"_index":1372,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.create",{"_index":1367,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyid(ticketid).exec",{"_index":1374,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyidanddelete(ticketid).exec",{"_index":1376,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketsservice.createticket(ticketdto",{"_index":1320,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getalltickets",{"_index":1321,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getticketbyid(id",{"_index":1323,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.returnticket(id",{"_index":1326,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.updateticketdata(id",{"_index":1324,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.usermodel",{"_index":1364,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":1480,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1483,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1497,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.getuserbyemail(payload.email",{"_index":1079,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.changeuserpassword(id",{"_index":1448,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":653,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deleteuser(id",{"_index":1449,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1442,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":655,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(userdto.email",{"_index":648,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1443,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(userid",{"_index":634,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuserdata(id",{"_index":1445,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":494,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":495,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":527,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":207,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":767,"title":{"classes/Ticket.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["ticket'})@apiresponse({status",{"_index":1299,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket.dto",{"_index":1314,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":800,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:18",{"_index":823,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:23",{"_index":838,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:28",{"_index":830,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:33",{"_index":836,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:38",{"_index":822,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:43",{"_index":826,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:48",{"_index":811,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:56",{"_index":815,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:64",{"_index":813,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:72",{"_index":814,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:78",{"_index":819,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:83",{"_index":840,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:88",{"_index":833,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:95",{"_index":827,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.name",{"_index":1338,"title":{},"body":{"modules/TicketsModule.html":{}}}],["ticket.save",{"_index":1378,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticket.status",{"_index":1377,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketdocument",{"_index":1288,"title":{},"body":{"classes/Ticket.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["ticketdto",{"_index":1302,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["ticketid",{"_index":1355,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketmodel",{"_index":1349,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":1297,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{}}}],["tickets'})@apiresponse({status",{"_index":1306,"title":{},"body":{"controllers/TicketsController.html":{}}}],["tickets'})@prop({trim",{"_index":1405,"title":{},"body":{"classes/User.html":{}}}],["tickets.controller",{"_index":1336,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service",{"_index":1316,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["tickets/tickets.module",{"_index":508,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketschema",{"_index":1293,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ticketscontroller",{"_index":1295,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":485,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketsModule.html":{},"modules.html":{},"overview.html":{}}}],["ticketsservice",{"_index":1315,"title":{"injectables/TicketsService.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"overview.html":{}}}],["ticket})@delete(':id",{"_index":1309,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@get(':id",{"_index":1304,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@patch(':id",{"_index":1312,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@post('reserve",{"_index":1300,"title":{},"body":{"controllers/TicketsController.html":{}}}],["time",{"_index":750,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["time'})@prop({required",{"_index":895,"title":{},"body":{"classes/Flight.html":{}}}],["toisostring",{"_index":1026,"title":{},"body":{"injectables/FlightsService.html":{}}}],["token",{"_index":1071,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["tostring",{"_index":1027,"title":{},"body":{"injectables/FlightsService.html":{}}}],["touch",{"_index":1626,"title":{},"body":{"index.html":{}}}],["town",{"_index":370,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["town'})@prop({required",{"_index":364,"title":{},"body":{"classes/Airport.html":{}}}],["town'})@prop({trim",{"_index":361,"title":{},"body":{"classes/Airport.html":{}}}],["transformer",{"_index":1538,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":31,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true",{"_index":30,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["try",{"_index":212,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SectionsService.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":524,"title":{},"body":{"modules/AppModule.html":{}}}],["twitter",{"_index":1632,"title":{},"body":{"index.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/SelectSeatDto.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@prop({required",{"_index":1280,"title":{},"body":{"classes/Ticket.html":{}}}],["typealiases",{"_index":1643,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":677,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"dependencies.html":{}}}],["types/cookie",{"_index":1529,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1532,"title":{},"body":{"dependencies.html":{}}}],["typescript",{"_index":1589,"title":{},"body":{"index.html":{}}}],["ui",{"_index":1564,"title":{},"body":{"dependencies.html":{}}}],["uia",{"_index":22,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["ukraine",{"_index":23,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["ukrainian",{"_index":36,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["ukranian",{"_index":352,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["unauthorizedexception",{"_index":631,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":257,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["undefined})@get",{"_index":99,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["undefined})@get()@roles('admin",{"_index":1425,"title":{},"body":{"controllers/UsersController.html":{}}}],["undefined})@post('search",{"_index":933,"title":{},"body":{"controllers/FlightsController.html":{}}}],["unique",{"_index":38,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/User.html":{}}}],["unit",{"_index":1604,"title":{},"body":{"index.html":{}}}],["up",{"_index":588,"title":{},"body":{"controllers/AuthController.html":{}}}],["up'})@post('signup",{"_index":563,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":80,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":142,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["update(id",{"_index":105,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["updateairlinedata",{"_index":179,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedata(airlineid",{"_index":194,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedto",{"_index":106,"title":{"classes/UpdateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["updateairplanedata",{"_index":308,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedata(airplaneid",{"_index":320,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedto",{"_index":281,"title":{"classes/UpdateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["updateairportdata",{"_index":414,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdata(airportid",{"_index":426,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdto",{"_index":388,"title":{"classes/UpdateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["updatedata",{"_index":1415,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(@param('id",{"_index":1444,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(id",{"_index":1429,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateflightdata",{"_index":965,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdata(flightid",{"_index":979,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdto",{"_index":935,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updateseatdata",{"_index":1166,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdata(seatid",{"_index":1170,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdto",{"_index":1144,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updatesectiondata",{"_index":1228,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondata(sectionid",{"_index":1240,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondto",{"_index":1204,"title":{"classes/UpdateSectionDto.html":{}},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["updateticketdata",{"_index":1345,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdata(ticketid",{"_index":1358,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdto",{"_index":1311,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["updateuserdata",{"_index":1463,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdata(userid",{"_index":1477,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdatadto",{"_index":1391,"title":{"classes/UpdateUserDataDto.html":{}},"body":{"classes/UpdateUserDataDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["uploadedfile",{"_index":113,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["uri",{"_index":536,"title":{},"body":{"modules/AppModule.html":{}}}],["useclass",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["usecreateindex",{"_index":541,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":523,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefindandmodify",{"_index":540,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":464,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":472,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{}}}],["useguards(localauthguard",{"_index":574,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":114,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["useinterceptors(fileinterceptor('logo",{"_index":134,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["usenewurlparser",{"_index":538,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":625,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiresponse({status",{"_index":1421,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@prop({required",{"_index":1282,"title":{},"body":{"classes/Ticket.html":{}}}],["user._id",{"_index":638,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":567,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":848,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:14",{"_index":853,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:19",{"_index":855,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:24",{"_index":860,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:29",{"_index":852,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:35",{"_index":856,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":636,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":642,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.lastname",{"_index":644,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":1339,"title":{},"body":{"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":658,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phonenumber",{"_index":646,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":640,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":1117,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.save",{"_index":1370,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["user.tickets.push(ticket._id",{"_index":1369,"title":{},"body":{"injectables/TicketsService.html":{}}}],["userdocument",{"_index":1360,"title":{},"body":{"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":565,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":1481,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.firstname",{"_index":1484,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.lastname",{"_index":1485,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.newpassword",{"_index":1490,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.oldpassword",{"_index":1488,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.phonenumber",{"_index":1486,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":622,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1347,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1088,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1413,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiresponse({status",{"_index":1424,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1454,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1432,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":503,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":633,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":1335,"title":{},"body":{"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1411,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1062,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":486,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":617,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["user})@delete(':id",{"_index":1422,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@get(':id')@roles('admin",{"_index":1427,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@patch(':id/changepassword",{"_index":1419,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@patch(':id/update",{"_index":1430,"title":{},"body":{"controllers/UsersController.html":{}}}],["useunifiedtopology",{"_index":539,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":872,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["uuid.v4",{"_index":876,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1059,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1085,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1063,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":615,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":627,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":681,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/SelectSeatDto.html":{},"classes/UpdateSeatDto.html":{},"dependencies.html":{}}}],["validity",{"_index":807,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["validity'})@prop({required",{"_index":1284,"title":{},"body":{"classes/Ticket.html":{}}}],["value",{"_index":1574,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1507,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1649,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["watch",{"_index":1599,"title":{},"body":{"index.html":{}}}],["website",{"_index":1630,"title":{},"body":{"index.html":{}}}],["work",{"_index":888,"title":{},"body":{"injectables/FilesService.html":{}}}],["writing",{"_index":886,"title":{},"body":{"injectables/FilesService.html":{}}}],["yefremov",{"_index":854,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["you'd",{"_index":1620,"title":{},"body":{"index.html":{}}}],["z])(?=.*?[0",{"_index":668,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*?[a",{"_index":667,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["zhulyani",{"_index":355,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["zhulyani/жуляни/iev",{"_index":760,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["zoom",{"_index":160,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Airline.html":{"url":"classes/Airline.html","title":"class - Airline","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/entities/airlines.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                airlineNameUa\n                            \n                            \n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Optional\n                                descriptionRu\n                            \n                            \n                                descriptionUa\n                            \n                            \n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Лого', description: 'Airline logo'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirlineDocument = Airline & Document;\n\n@Schema()\nexport class Airline {\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airlineNameUa: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameEng?: string;\n\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameRu?: string;\n\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  @Prop({ required: true, trim: true })\n  descriptionUa: string;\n\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionEng?: string;\n\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionRu?: string;\n\n  @ApiProperty({\n    example: 'Лого',\n    description: 'Airline logo',\n  })\n  @Prop({ required: true, trim: true })\n  logo: string;\n}\nexport const AirlineSchema = SchemaFactory.createForClass(Airline);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirlinesController.html":{"url":"controllers/AirlinesController.html","title":"controller - AirlinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirlinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airlines\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airlineDto: CreateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airline'})@ApiResponse({status: 200, type: Airline})@Post()@UseInterceptors(undefined)\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airline'})@ApiResponse({status: 200, type: Airline})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airlines'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airline data'})@ApiResponse({status: 200, type: Airline})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airlineDto: UpdateAirlineDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airline data'})@ApiResponse({status: 200, type: Airline})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Airline } from './entities/airlines.entity';\n\n@ApiTags('Airlines')\n@Controller('airlines')\nexport class AirlinesController {\n  constructor(private readonly airlinesService: AirlinesService) {}\n\n  @ApiOperation({ summary: 'Create a Airline' })\n  @ApiResponse({ status: 200, type: Airline })\n  @Post()\n  @UseInterceptors(FileInterceptor('logo'))\n  create(\n    @Body() airlineDto: CreateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.createAirline(airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airlines' })\n  @ApiResponse({ status: 200, type: [Airline] })\n  @Get()\n  findAll() {\n    return this.airlinesService.getAllAirlines();\n  }\n\n  @ApiOperation({ summary: 'Get Airline data' })\n  @ApiResponse({ status: 200, type: Airline })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airlinesService.getAirlineById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airline data' })\n  @ApiResponse({ status: 200, type: Airline })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airlineDto: UpdateAirlineDto) {\n    return this.airlinesService.updateAirlineData(id, airlineDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airline' })\n  @ApiResponse({ status: 200, type: Airline })\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airlinesService.deleteAirline(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirlinesModule.html":{"url":"modules/AirlinesModule.html","title":"module - AirlinesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirlinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\n\nAirlinesService \n\nAirlinesService \n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nAirlinesModule -->\n\nFilesService->AirlinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airlines/airlines.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirlinesService\n                        \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirlinesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { FilesService } from 'src/files/files.service';\nimport { AirlinesController } from './airlines.controller';\nimport { Airline, AirlineSchema } from './entities/airlines.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airline.name, schema: AirlineSchema }]),\n  ],\n  controllers: [AirlinesController],\n  providers: [AirlinesService, FilesService],\n  exports: [AirlinesService],\n})\nexport class AirlinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirlinesService.html":{"url":"injectables/AirlinesService.html","title":"injectable - AirlinesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirlinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirline\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirline\n                            \n                            \n                                    Public\n                                    Async\n                                getAirlineById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirlines\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirlineData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airlineModel: Model, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/airlines/airlines.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airlineModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirline(airlineDto: CreateAirlineDto, logo)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirline(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirlineById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirlineById(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirlines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirlines()\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirlineData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirlineData(airlineId: ObjectId, airlineDto: UpdateAirlineDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport { FilesService, Folder } from '../files/files.service';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Airline, AirlineDocument } from './entities/airlines.entity';\n\n@Injectable()\nexport class AirlinesService {\n  constructor(\n    @InjectModel(Airline.name) private airlineModel: Model,\n    private filesService: FilesService,\n  ) {}\n\n  public async createAirline(\n    airlineDto: CreateAirlineDto,\n    logo,\n  ): Promise {\n    let airline = await this.airlineModel\n      .findOne({\n        airlineNameUa: airlineDto.airlineNameUa,\n      })\n      .exec();\n    if (airline) {\n      throw new HttpException(\n        'Airline with this name already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      const fileName = await this.filesService.createFile(Folder.Airline, logo);\n      airline = await this.airlineModel.create({\n        ...airlineDto,\n        logo: fileName,\n      });\n\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirlines(): Promise {\n    const airlines = await this.airlineModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airlines;\n  }\n\n  public async getAirlineById(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n\n  public async updateAirlineData(\n    airlineId: ObjectId,\n    airlineDto: UpdateAirlineDto,\n  ): Promise {\n    let airline = await this.airlineModel.findById(airlineId).exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airlineDto.airlineNameEng) {\n      airline.airlineNameEng = airlineDto.airlineNameEng;\n    }\n    if (airlineDto.airlineNameRu) {\n      airline.airlineNameRu = airlineDto.airlineNameRu;\n    }\n    if (airlineDto.airlineNameUa) {\n      airline.airlineNameUa = airlineDto.airlineNameUa;\n    }\n    if (airlineDto.descriptionEng) {\n      airline.descriptionEng = airlineDto.descriptionEng;\n    }\n    if (airlineDto.descriptionRu) {\n      airline.descriptionRu = airlineDto.descriptionRu;\n    }\n    if (airlineDto.descriptionUa) {\n      airline.descriptionUa = airlineDto.descriptionUa;\n    }\n    await airline.save();\n\n    airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    return airline;\n  }\n\n  public async deleteAirline(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findByIdAndDelete(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airplane.html":{"url":"classes/Airplane.html","title":"class - Airplane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airplane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/entities/airplane.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '45', description: 'Amount Of Seat'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sections', description: 'Sections'})@Prop({trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type AirplaneDocument = Airplane & Document;\n\n@Schema()\nexport class Airplane {\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airplaneName: string;\n\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  @Prop({ required: true })\n  amountOfSeat: number;\n\n  @ApiProperty({ example: 'Sections', description: 'Sections' })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Section',\n  })\n  sections: Section[];\n}\nexport const AirplaneSchema = SchemaFactory.createForClass(Airplane);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirplanesController.html":{"url":"controllers/AirplanesController.html","title":"controller - AirplanesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirplanesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airplanes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airplaneDto: CreateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airplane'})@ApiResponse({status: 200, type: Airplane})@Post()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airplane'})@ApiResponse({status: 200, type: Airplane})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airplanes'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airplane data'})@ApiResponse({status: 200, type: Airplane})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airplane data'})@ApiResponse({status: 200, type: Airplane})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Airplane } from './entities/airplane.entity';\n\n@ApiTags('Airplanes')\n@Controller('airplanes')\nexport class AirplanesController {\n  constructor(private readonly airplanesService: AirplanesService) {}\n\n  @ApiOperation({ summary: 'Create a Airplane' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @Post()\n  create(@Body() airplaneDto: CreateAirplaneDto) {\n    return this.airplanesService.createAirplane(airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airplanes' })\n  @ApiResponse({ status: 200, type: [Airplane] })\n  @Get()\n  findAll() {\n    return this.airplanesService.getAllAirplanes();\n  }\n\n  @ApiOperation({ summary: 'Get Airplane data' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airplanesService.getAirplaneById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airplane data' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airplaneDto: UpdateAirplaneDto) {\n    return this.airplanesService.updateAirplaneData(id, airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airplane' })\n  @ApiResponse({ status: 200, type: Airplane })\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airplanesService.deleteAirplane(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirplanesModule.html":{"url":"modules/AirplanesModule.html","title":"module - AirplanesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirplanesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_providers\n\n\n\ncluster_AirplanesModule_exports\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airplanes/airplanes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirplanesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { AirplanesController } from './airplanes.controller';\nimport { Airplane, AirplaneSchema } from './entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Airplane.name, schema: AirplaneSchema },\n    ]),\n  ],\n  controllers: [AirplanesController],\n  providers: [AirplanesService],\n  exports: [AirplanesService],\n})\nexport class AirplanesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirplanesService.html":{"url":"injectables/AirplanesService.html","title":"injectable - AirplanesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirplanesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                getAirplaneById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirplanes\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirplaneData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airplaneModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airplanes/airplanes.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirplane(airplaneDto: CreateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirplane(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirplaneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirplaneById(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirplanes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirplanes()\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirplaneData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirplaneData(airplaneId: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Airplane, AirplaneDocument } from './entities/airplane.entity';\n\n@Injectable()\nexport class AirplanesService {\n  constructor(\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n  ) {}\n\n  public async createAirplane(\n    airplaneDto: CreateAirplaneDto,\n  ): Promise {\n    try {\n      let airplane = await this.airplaneModel.create({ ...airplaneDto });\n      airplane = await this.airplaneModel\n        .findById(airplane._id)\n        .populate({ path: 'sections', select: '-__v' })\n        .select({ __v: false })\n        .exec();\n      return airplane;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirplanes(): Promise {\n    const airplanes = await this.airplaneModel\n      .find()\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplanes;\n  }\n\n  public async getAirplaneById(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n\n  public async updateAirplaneData(\n    airplaneId: ObjectId,\n    airplaneDto: UpdateAirplaneDto,\n  ): Promise {\n    let airplane = await this.airplaneModel.findById(airplaneId).exec();\n    if (!airplane) {\n      throw new BadRequestException('Airplane with this Id not found');\n    }\n\n    if (airplaneDto.airplaneName) {\n      airplane.airplaneName = airplaneDto.airplaneName;\n    }\n    await airplane.save();\n\n    airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplane;\n  }\n\n  public async deleteAirplane(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findByIdAndDelete(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airport.html":{"url":"classes/Airport.html","title":"class - Airport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/entities/airport.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                airportCountryUa\n                            \n                            \n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Optional\n                                airportNameRu\n                            \n                            \n                                airportNameUa\n                            \n                            \n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Optional\n                                airportTownRu\n                            \n                            \n                                airportTownUa\n                            \n                            \n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani', description: 'English airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляны', description: 'Russian airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'IEV', description: 'IATA'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirportDocument = Airport & Document;\n\n@Schema()\nexport class Airport {\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  @Prop({ required: true, unique: true, trim: true })\n  airportNameUa: string;\n\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  @Prop({ unique: true, trim: true })\n  airportNameEng?: string;\n\n  @ApiProperty({ example: 'Жуляны', description: 'Russian airport name' })\n  @Prop({ unique: true, trim: true })\n  airportNameRu?: string;\n\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  @Prop({ required: true, unique: true, trim: true })\n  IATA: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  @Prop({ required: true, trim: true })\n  airportCountryUa: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryRu?: string;\n\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  @Prop({ required: true, trim: true })\n  airportTownUa: string;\n\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownEng?: string;\n\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownRu?: string;\n}\nexport const AirportSchema = SchemaFactory.createForClass(Airport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirportsController.html":{"url":"controllers/AirportsController.html","title":"controller - AirportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airportDto: CreateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airport'})@ApiResponse({status: 200, type: Airport})@Post()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airport'})@ApiResponse({status: 200, type: Airport})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airports'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airport data'})@ApiResponse({status: 200, type: Airport})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airport data'})@ApiResponse({status: 200, type: Airport})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Airport } from './entities/airport.entity';\n\n@ApiTags('Airports')\n@Controller('airports')\nexport class AirportsController {\n  constructor(private readonly airportsService: AirportsService) {}\n\n  @ApiOperation({ summary: 'Create a Airport' })\n  @ApiResponse({ status: 200, type: Airport })\n  @Post()\n  create(@Body() airportDto: CreateAirportDto) {\n    return this.airportsService.createAirport(airportDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airports' })\n  @ApiResponse({ status: 200, type: [Airport] })\n  @Get()\n  findAll() {\n    return this.airportsService.getAllAirports();\n  }\n\n  @ApiOperation({ summary: 'Get Airport data' })\n  @ApiResponse({ status: 200, type: Airport })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airportsService.getAirportById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airport data' })\n  @ApiResponse({ status: 200, type: Airport })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airportDto: UpdateAirportDto) {\n    return this.airportsService.updateAirportData(id, airportDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airport' })\n  @ApiResponse({ status: 200, type: Airport })\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airportsService.deleteAirport(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirportsModule.html":{"url":"modules/AirportsModule.html","title":"module - AirportsModule","body":"\n                   \n\n\n\n\n    Modules\n    AirportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AirportsModule_exports\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airports/airports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { AirportsController } from './airports.controller';\nimport { Airport, AirportSchema } from './entities/airport.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airport.name, schema: AirportSchema }]),\n  ],\n  controllers: [AirportsController],\n  providers: [AirportsService],\n  exports: [AirportsService],\n})\nexport class AirportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirportsService.html":{"url":"injectables/AirportsService.html","title":"injectable - AirportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirport\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirport\n                            \n                            \n                                    Public\n                                    Async\n                                getAirportById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirports\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirportData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airports/airports.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirport(airportDto: CreateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirport(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:117\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirportById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirportById(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirports()\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirportData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirportData(airportId: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Airport, AirportDocument } from './entities/airport.entity';\n\n@Injectable()\nexport class AirportsService {\n  constructor(\n    @InjectModel(Airport.name) private airportModel: Model,\n  ) {}\n\n  public async createAirport(airportDto: CreateAirportDto): Promise {\n    let airport = await this.airportModel\n      .findOne({\n        IATA: airportDto.IATA,\n      })\n      .exec();\n    if (airport) {\n      throw new HttpException(\n        'Airport with this IATA already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      airport = await this.airportModel.create({ ...airportDto });\n      airport = await this.airportModel\n        .findOne({\n          IATA: airportDto.IATA,\n        })\n        .select({ __v: false })\n        .exec();\n      return airport;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirports(): Promise {\n    const airports = await this.airportModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airports;\n  }\n\n  public async getAirportById(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n\n  public async updateAirportData(\n    airportId: ObjectId,\n    airportDto: UpdateAirportDto,\n  ): Promise {\n    let airport = await this.airportModel.findById(airportId).exec();\n    if (!airport) {\n      throw new BadRequestException('Airport with this Id not found');\n    }\n\n    if (airportDto.IATA) {\n      airport.IATA = airportDto.IATA;\n    }\n    if (airportDto.airportCountryEng) {\n      airport.airportCountryEng = airportDto.airportCountryEng;\n    }\n    if (airportDto.airportCountryUa) {\n      airport.airportCountryUa = airportDto.airportCountryUa;\n    }\n    if (airportDto.airportCountryRu) {\n      airport.airportCountryRu = airportDto.airportCountryRu;\n    }\n    if (airportDto.airportNameEng) {\n      airport.airportNameEng = airportDto.airportNameEng;\n    }\n    if (airportDto.airportNameUa) {\n      airport.airportNameUa = airportDto.airportNameUa;\n    }\n    if (airportDto.airportNameRu) {\n      airport.airportNameRu = airportDto.airportNameRu;\n    }\n    if (airportDto.airportTownEng) {\n      airport.airportTownEng = airportDto.airportTownEng;\n    }\n    if (airportDto.airportTownUa) {\n      airport.airportTownUa = airportDto.airportTownUa;\n    }\n    if (airportDto.airportTownRu) {\n      airport.airportTownRu = airportDto.airportTownRu;\n    }\n    await airport.save();\n\n    airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    return airport;\n  }\n\n  public async deleteAirport(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findByIdAndDelete(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Profile'})@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\n\nimport { AuthService } from './auth/auth.service';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Profile' })\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Request() req) {\n    return this.authService.getProfile(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAirlinesModule\n\nAirlinesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirlinesModule\n                        \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            SectionsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\nimport { join } from 'path';\n\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AirportsModule } from './airports/airports.module';\nimport { AirlinesModule } from './airlines/airlines.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { TicketsModule } from './tickets/tickets.module';\nimport { FilesModule } from './files/files.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { AirplanesModule } from './airplanes/airplanes.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { SectionsModule } from './sections/sections.module';\nimport { RolesGuard } from './auth/guards/roles.guard';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n      cache: true,\n    }),\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        ttl: configService.get('CACHE_TTL'),\n      }),\n      inject: [ConfigService],\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('THROTTLE_TTL'),\n        limit: config.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, 'static'),\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGO_DB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n        useCreateIndex: true,\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    AirportsModule,\n    AirlinesModule,\n    FlightsModule,\n    TicketsModule,\n    FilesModule,\n    AirplanesModule,\n    SeatsModule,\n    SectionsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Log Out'})@UseGuards(JwtAuthGuard)@Post('logOut')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign In'})@UseGuards(LocalAuthGuard)@Post('signIn')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign Up'})@Post('signUp')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Res,\n  Body,\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiTags } from '@nestjs/swagger';\nimport { Response } from 'express';\n\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { AuthService } from './auth.service';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Sign In' })\n  @UseGuards(LocalAuthGuard)\n  @Post('signIn')\n  async signIn(@Request() req, @Res({ passthrough: true }) res: Response) {\n    const [resBody, jwt] = await this.authService.signIn(req.user);\n    // Add secure flag\n    res.cookie('access_token', jwt, { httpOnly: true, sameSite: 'lax' });\n    return resBody;\n  }\n\n  @ApiOperation({ summary: 'Sign Up' })\n  @Post('signUp')\n  async signUp(@Body() userDto: CreateUserDto) {\n    return await this.authService.signUp(userDto);\n  }\n\n  @ApiOperation({ summary: 'Log Out' })\n  @UseGuards(JwtAuthGuard)\n  @Post('logOut')\n  async logOut(@Res({ passthrough: true }) res: Response) {\n    // Add secure flag\n    res.cookie('access_token', '', { httpOnly: true, sameSite: 'lax' });\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { UsersModule } from '../users/users.module';\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule,\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { UsersService } from '../users/users.service';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getProfile(userId: ObjectId) {\n    return this.usersService.getUserById(userId);\n  }\n\n  async signIn(user: any) {\n    const payload = { email: user.email, sub: user._id, role: user.role };\n    return [\n      {\n        userId: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        role: user.role,\n      },\n      this.jwtService.sign(payload),\n    ];\n  }\n\n  async signUp(userDto: CreateUserDto) {\n    let user = await this.usersService.getUserByEmail(userDto.email);\n    if (user) {\n      throw new HttpException(\n        'User with this email already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hashPassword = await bcrypt.hash(userDto.password, salt);\n    user = await this.usersService.createUser({\n      ...userDto,\n      password: hashPassword,\n    });\n    return user;\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.getUserByEmail(email);\n    const passwordEquals = await bcrypt.compare(pass, user.password);\n    if (user && passwordEquals) {\n      return user;\n    }\n    throw new UnauthorizedException({\n      message: 'Incorrect email or password',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangeUserPasswordDto.html":{"url":"classes/ChangeUserPasswordDto.html","title":"class - ChangeUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangeUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-user-password.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'B2a3#d1c*', description: 'New Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            oldPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class ChangeUserPasswordDto extends PartialType(CreateUserDto) {\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'B2a3#d1c*', description: 'New Password' })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirlineDto.html":{"url":"classes/CreateAirlineDto.html","title":"class - CreateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/create-airline.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                    Readonly\n                                airlineNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionRu\n                            \n                            \n                                    Readonly\n                                descriptionUa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:36\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString } from 'class-validator';\n\nexport class CreateAirlineDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  readonly airlineNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  readonly airlineNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  readonly airlineNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  readonly descriptionUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  readonly descriptionEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  readonly descriptionRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirplaneDto.html":{"url":"classes/CreateAirplaneDto.html","title":"class - CreateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/create-airplane.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                    Readonly\n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@ApiProperty({example: '45', description: 'Amount Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayUnique()@IsNotEmpty()@ApiProperty({example: 'Sections', description: 'Sections'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:32\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n} from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class CreateAirplaneDto {\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplaneName: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  amountOfSeat: number;\n\n  @IsArray()\n  @ArrayUnique()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Sections',\n    description: 'Sections',\n  })\n  readonly sections: ObjectId[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirportDto.html":{"url":"classes/CreateAirportDto.html","title":"class - CreateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/create-airport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                    Readonly\n                                airportCountryUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameRu\n                            \n                            \n                                    Readonly\n                                airportNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownRu\n                            \n                            \n                                    Readonly\n                                airportTownUa\n                            \n                            \n                                    Readonly\n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Zhulyani', description: 'English airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Жуляны', description: 'Russian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:85\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsUppercase()@Length(2, 4)@ApiProperty({example: 'IEV', description: 'IATA'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:37\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUppercase,\n  Length,\n} from 'class-validator';\n\nexport class CreateAirportDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  readonly airportNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  readonly airportNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Жуляны',\n    description: 'Russian airport name',\n  })\n  readonly airportNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsUppercase()\n  @Length(2, 4)\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  readonly IATA: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  readonly airportCountryUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  readonly airportCountryEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  readonly airportCountryRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  readonly airportTownUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  readonly airportTownEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  readonly airportTownRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/create-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airline\n                            \n                            \n                                    Readonly\n                                airplane\n                            \n                            \n                                    Readonly\n                                arrivalAirport\n                            \n                            \n                                    Readonly\n                                arrivalTime\n                            \n                            \n                                    Readonly\n                                baggage\n                            \n                            \n                                    Readonly\n                                carryOnBaggage\n                            \n                            \n                                    Readonly\n                                departureAirport\n                            \n                            \n                                    Readonly\n                                departureTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                exchange\n                            \n                            \n                                    Readonly\n                                flightName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                refund\n                            \n                            \n                                    Readonly\n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsMongoId()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '23', description: 'Baggage properties'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsNotEmpty()@ApiProperty({example: 'true', description: 'Hand luggage'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:79\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty({example: '0.7', description: 'Ticket exchange'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'PS-9065', description: 'Flight name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty({example: '0.5', description: 'Ticket return'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '200', description: 'Ticket taxa'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:67\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsMongoId,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\nimport { ObjectId } from 'mongoose';\n\nexport class CreateFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  readonly flightName: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  readonly airline: ObjectId;\n\n  @IsMongoId()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplane: ObjectId;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  readonly departureAirport: ObjectId;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly departureTime: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  readonly arrivalAirport: ObjectId;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  readonly arrivalTime: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  readonly taxa: number;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  readonly baggage: number | null;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  readonly carryOnBaggage: boolean;\n\n  @IsOptional()\n  @ApiProperty({ example: '0.7', description: 'Ticket exchange' })\n  readonly exchange?: number | null;\n\n  @IsOptional()\n  @ApiProperty({ example: '0.5', description: 'Ticket return' })\n  readonly refund?: number | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/create-seat.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSeatDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSectionDto.html":{"url":"classes/CreateSectionDto.html","title":"class - CreateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/create-section.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                price\n                            \n                            \n                                    Readonly\n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)@ApiProperty({example: 'free', description: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '1700', description: 'Section Price'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '90', description: 'Seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:23\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { Class } from '../entities/section.entity';\n\nexport class CreateSectionDto {\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  readonly price: number;\n\n  @IsNotEmpty()\n  @IsIn([Class.Business, Class.Economy])\n  @ApiProperty({ example: 'free', description: 'Class' })\n  readonly class: Class;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  readonly seats: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/create-ticket.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                birthday\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Readonly\n                                citizenshipUa\n                            \n                            \n                                    Readonly\n                                document\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                flight\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                numberOfSeat\n                            \n                            \n                                    Readonly\n                                sex\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                user\n                            \n                            \n                                    Readonly\n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Ukraine', description: 'The English name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:64\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiProperty({example: 'Украина', description: 'The Russian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(7, 9)@ApiProperty({example: 'RS123456', description: 'Document'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'PS-9065', description: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Efremov', description: 'Last Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiProperty({example: '23', description: 'Number Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Sex)@ApiProperty({example: 'male', description: 'Sex'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'booked', description: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Type)@ApiProperty({example: 'adult', description: 'Type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'test@gmail.com', description: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:83\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\nimport { ObjectId } from 'mongoose';\nimport { Seat } from 'src/seats/entities/seat.entity';\nimport { Sex, Status, Type } from '../entities/ticket.entity';\n\nexport class CreateTicketDto {\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  readonly flight: ObjectId;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  readonly user: ObjectId;\n\n  @IsNotEmpty()\n  @IsEnum(Sex)\n  @ApiProperty({ example: 'male', description: 'Sex' })\n  readonly sex: Sex;\n\n  @IsNotEmpty()\n  @IsEnum(Type)\n  @ApiProperty({ example: 'adult', description: 'Type' })\n  readonly type: Type;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  readonly birthday: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  readonly citizenshipUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  readonly citizenshipEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  readonly citizenshipRu?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(7, 9)\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  readonly document: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  readonly validity: string;\n\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({ example: 'booked', description: 'Status' })\n  readonly status: Status;\n\n  @IsOptional()\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  readonly numberOfSeat?: Seat;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()@ApiProperty({example: 'test@gmail.com', description: 'E-mail'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Yefremov', description: 'Last name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsPhoneNumber()@ApiProperty({example: '380951234567', description: 'Phone number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:24\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsPhoneNumber,\n  IsString,\n  Matches,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Yefremov', description: 'Last name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsPhoneNumber()\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  readonly phoneNumber: number;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  readonly email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\n\nFilesService\n\nFilesService\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { FilesService } from './files.service';\n\n@Module({\n  providers: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFile(folder: Folder, file)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport path from 'path';\nimport fs from 'fs';\nimport * as uuid from 'uuid';\n\nexport enum Folder {\n  Airline = 'airline',\n}\n\n@Injectable()\nexport class FilesService {\n  async createFile(folder: Folder, file): Promise {\n    try {\n      const fileExtension = file.originalname.split('.').pop();\n      const fileName = uuid.v4() + '.' + fileExtension;\n      const filePath = path.resolve(__dirname, '..', 'static', folder);\n      if (!fs.existsSync(filePath)) {\n        fs.mkdirSync(filePath, { recursive: true });\n      }\n      fs.writeFileSync(path.join(filePath, fileName), file.buffer);\n      return folder + '/' + fileName;\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while writing the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n  //does not work\n  // async deleteFile(folder: Folder, file): Promise {\n  //   try {\n  //     const fileExtension = file.originalname.split('.').pop();\n  //     const fileName = uuid.v4() + '.' + fileExtension;\n  //     const filePath = path.resolve(__dirname, '..', 'static', folder);\n  //     if (!fs.existsSync(filePath)) {\n  //       fs.mkdirSync(filePath, { recursive: true });\n  //     }\n  //     fs.writeFileSync(path.join(filePath, fileName), file.buffer);\n  //     return folder + '/' + fileName;\n  //   } catch (e) {\n  //     throw new HttpException(\n  //       'An error occurred while writing the file',\n  //       HttpStatus.INTERNAL_SERVER_ERROR,\n  //     );\n  //   }\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Flight.html":{"url":"classes/Flight.html","title":"class - Flight","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/entities/flights.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                airplane\n                            \n                            \n                                arrivalAirport\n                            \n                            \n                                arrivalTime\n                            \n                            \n                                baggage\n                            \n                            \n                                carryOnBaggage\n                            \n                            \n                                departureAirport\n                            \n                            \n                                departureTime\n                            \n                            \n                                    Optional\n                                exchange\n                            \n                            \n                                flightName\n                            \n                            \n                                    Optional\n                                refund\n                            \n                            \n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})@Prop({required: true, type: undefined, ref: 'Airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, type: undefined, ref: 'Airplane'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'true', description: 'Hand luggage'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '0.7', description: 'Ticket exchange'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '0.5', description: 'Ticket return'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '200', description: 'Ticket taxa'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:80\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Airport } from 'src/airports/entities/airport.entity';\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\n\nexport type FlightDocument = Flight & Document;\n\n@Schema()\nexport class Flight {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  @Prop({ required: true, unique: true, trim: true })\n  flightName: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airline',\n  })\n  airline: Airline | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airplane',\n  })\n  airplane: Airplane | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  departureAirport: Airport | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  @Prop({ required: true })\n  departureTime: string;\n\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  arrivalAirport: Airport | mongoose.Types.ObjectId;\n\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  @Prop({ required: true })\n  arrivalTime: string;\n\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  @Prop({})\n  taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  @Prop({})\n  baggage: number | null;\n\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  @Prop({ required: true })\n  carryOnBaggage: boolean;\n\n  @ApiProperty({ example: '0.7', description: 'Ticket exchange' })\n  @Prop({})\n  exchange?: number | null;\n\n  @ApiProperty({ example: '0.5', description: 'Ticket return' })\n  @Prop({})\n  refund?: number | null;\n}\nexport const FlightSchema = SchemaFactory.createForClass(Flight);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                flights\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(flightDto: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Flight'})@ApiResponse({status: 200, type: Flight})@Post()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Flight'})@ApiResponse({status: 200, type: Flight})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Flights'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Flight data'})@ApiResponse({status: 200, type: Flight})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(flightDto: SearchFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search Flights'})@ApiResponse({status: 200, type: undefined})@Post('search')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Flight data'})@ApiResponse({status: 200, type: Flight})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { Flight } from './entities/flights.entity';\n\n@ApiTags('Flights')\n@Controller('flights')\nexport class FlightsController {\n  constructor(private readonly flightsService: FlightsService) {}\n\n  @ApiOperation({ summary: 'Create a Flight' })\n  @ApiResponse({ status: 200, type: Flight })\n  @Post()\n  create(@Body() flightDto: CreateFlightDto) {\n    return this.flightsService.createFlight(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Search Flights' })\n  @ApiResponse({ status: 200, type: [Flight] })\n  @Post('search')\n  search(@Body() flightDto: SearchFlightDto) {\n    return this.flightsService.searchFlights(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Flights' })\n  @ApiResponse({ status: 200, type: [Flight] })\n  @Get()\n  findAll() {\n    return this.flightsService.getAllFlights();\n  }\n\n  @ApiOperation({ summary: 'Get Flight data' })\n  @ApiResponse({ status: 200, type: Flight })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.flightsService.getFlightById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Flight data' })\n  @ApiResponse({ status: 200, type: Flight })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() flightDto: UpdateFlightDto) {\n    return this.flightsService.updateFlightData(id, flightDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Flight' })\n  @ApiResponse({ status: 200, type: Flight })\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.flightsService.deleteFlight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { Flight, FlightSchema } from './entities/flights.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Flight.name, schema: FlightSchema }]),\n  ],\n  controllers: [FlightsController],\n  providers: [FlightsService],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createFlight\n                            \n                            \n                                    Public\n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Public\n                                    Async\n                                getAllFlights\n                            \n                            \n                                    Public\n                                    Async\n                                getFlightById\n                            \n                            \n                                    Public\n                                    Async\n                                searchFlights\n                            \n                            \n                                    Public\n                                    Async\n                                updateFlightData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(flightModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(flightDto: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:149\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllFlights()\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getFlightById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlightById(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            searchFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchFlights(flightDto: SearchFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:165\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateFlightData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlightData(flightId: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport Fuse from 'fuse.js';\nimport moment from 'moment';\n\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { Flight, FlightDocument } from './entities/flights.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(\n    @InjectModel(Flight.name) private flightModel: Model,\n  ) {}\n\n  public async createFlight(flightDto: CreateFlightDto): Promise {\n    let flight = await this.flightModel\n      .findOne({\n        flightName: flightDto.flightName,\n      })\n      .exec();\n    if (flight) {\n      throw new BadRequestException('Flight with this name already exists');\n    }\n\n    try {\n      flight = await this.flightModel.create({ ...flightDto });\n      flight = await this.flightModel\n        .findOne({\n          flightName: flightDto.flightName,\n        })\n        .select({ __v: false })\n        .populate({ path: 'airplane', select: '-__v' })\n        .populate({\n          path: 'airplane',\n          select: '-__v',\n          populate: { path: 'sections', select: '-__v' },\n        })\n        .populate({ path: 'departureAirport', select: '-__v' })\n        .populate({ path: 'arrivalAirport', select: '-__v' })\n        .exec();\n      return flight;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllFlights(): Promise {\n    const flights = await this.flightModel\n      .find()\n      .select({ __v: false })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flights;\n  }\n\n  public async getFlightById(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airplane', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async updateFlightData(\n    flightId: ObjectId,\n    flightDto: UpdateFlightDto,\n  ): Promise {\n    let flight = await this.flightModel.findById(flightId).exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    // if (flightDto.airline) {\n    //   flight.airline = flightDto.airline.toString();\n    // }\n    // if (flightDto.airplane) {\n    //   flight.airplane = flightDto.airplane.toString();\n    // }\n    // if (flightDto.arrivalAirport) {\n    //   flight.arrivalAirport = flightDto.arrivalAirport.toString();\n    // }\n    if (flightDto.arrivalTime) {\n      flight.arrivalTime = flightDto.arrivalTime;\n    }\n    if (flightDto.baggage) {\n      flight.baggage = flightDto.baggage;\n    }\n    if (flightDto.carryOnBaggage) {\n      flight.carryOnBaggage = flightDto.carryOnBaggage;\n    }\n    // if (flightDto.departureAirport) {\n    //   flight.departureAirport = flightDto.departureAirport.toString();\n    // }\n    if (flightDto.departureTime) {\n      flight.departureTime = flightDto.departureTime;\n    }\n    if (flightDto.exchange) {\n      flight.exchange = flightDto.exchange;\n    }\n    if (flightDto.flightName) {\n      flight.flightName = flightDto.flightName;\n    }\n    if (flightDto.refund) {\n      flight.refund = flightDto.refund;\n    }\n    if (flightDto.taxa) {\n      flight.taxa = flightDto.taxa;\n    }\n    await flight.save();\n\n    flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airplane', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async deleteFlight(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findByIdAndDelete(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airplane', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async searchFlights(flightDto: SearchFlightDto): Promise {\n    const initialFlights = await this.flightModel\n      .find({\n        departureTime: {\n          $gte: moment(flightDto.depTime)\n            .startOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n          $lte: moment(flightDto.depTime)\n            .endOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n        },\n      })\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    const optionsForDeparture = {\n      includeScore: true,\n      keys: [\n        'departureAirport.airportNameUa',\n        'departureAirport.airportNameEng',\n        'departureAirport.airportNameRu',\n        'departureAirport.IATA',\n        'departureAirport.airportTownUa',\n        'departureAirport.airportTownEng',\n        'departureAirport.airportTownRu',\n      ],\n    };\n\n    let fuse = new Fuse(initialFlights, optionsForDeparture);\n    let result = fuse.search(flightDto.departure).map((r) => r.item);\n    const optionsForArrival = {\n      includeScore: true,\n      keys: [\n        'arrivalAirport.airportNameUa',\n        'arrivalAirport.airportNameEng',\n        'arrivalAirport.airportNameRu',\n        'arrivalAirport.IATA',\n        'arrivalAirport.airportTownUa',\n        'arrivalAirport.airportTownEng',\n        'arrivalAirport.airportTownRu',\n      ],\n    };\n\n    fuse = new Fuse(result, optionsForArrival);\n    result = fuse.search(flightDto.arrival).map((r) => r.item);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\nimport { UsersService } from 'src/users/users.service';\n\nconst cookieExtractor = function (req) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n};\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private userService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: cookieExtractor,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.getUserByEmail(payload.email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginUserDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\nimport { ROLES_KEY } from '../decorators/roles-auth.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    try {\n      const requiredRoles = this.reflector.getAllAndOverride(\n        ROLES_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      if (!requiredRoles) {\n        return true;\n      }\n\n      const req = context.switchToHttp().getRequest();\n      let token = null;\n      if (req && req.cookies) {\n        token = req.cookies['access_token'];\n      }\n\n      const user = this.jwtService.verify(token);\n      req.user = user;\n      return requiredRoles.some((role) => user.role?.includes(role));\n    } catch (e) {\n      throw new HttpException('No access', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFlightDto.html":{"url":"classes/SearchFlightDto.html","title":"class - SearchFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/search-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                arrival\n                            \n                            \n                                    Readonly\n                                departure\n                            \n                            \n                                    Readonly\n                                depTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrival\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            depTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString } from 'class-validator';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class SearchFlightDto extends PartialType(CreateFlightDto) {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure',\n  })\n  readonly departure: string;\n\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly depTime: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival',\n  })\n  readonly arrival: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seat.html":{"url":"classes/Seat.html","title":"class - Seat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/entities/seat.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                number\n                            \n                            \n                                section\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1', description: 'Number of Seat'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Section', description: 'Section'})@Prop({required: true, trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'free', description: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:38\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type SeatDocument = Seat & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  Free = 'free',\n  NotAvailable = 'notAvailable',\n}\n\n@Schema()\nexport class Seat {\n  @ApiProperty({\n    example: 'Section',\n    description: 'Section',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Section',\n  })\n  section: Section | mongoose.Types.ObjectId;\n\n  @ApiProperty({ example: '1', description: 'Number of Seat' })\n  @Prop({ required: true, trim: true })\n  number: number;\n\n  @ApiProperty({ example: 'free', description: 'Status' })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Free })\n  status: Status;\n}\nexport const SeatSchema = SchemaFactory.createForClass(Seat);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                seats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Seat data'})@ApiResponse({status: 200, type: Seat})@Patch(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Patch } from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\nimport { Seat } from './entities/seat.entity';\n\nimport { SeatsService } from './seats.service';\n\n@ApiTags('Seats')\n@Controller('seats')\nexport class SeatsController {\n  constructor(private readonly seatsService: SeatsService) {}\n\n  @ApiOperation({ summary: 'Update Seat data' })\n  @ApiResponse({ status: 200, type: Seat })\n  @Patch(':id/update')\n  update(@Param('id') id: ObjectId, @Body() seatDto: UpdateSeatDto) {\n    return this.seatsService.updateSeatData(id, seatDto);\n  }\n\n  // @ApiOperation({ summary: 'Update Seat data' })\n  // @ApiResponse({ status: 200, type: Seat })\n  // @Patch(':id/select')\n  // select(@Param('id') id: ObjectId, @Body() seatDto: SelectSeatDto) {\n  //   return this.seatsService.selectSeat(id, seatDto);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\n\nSeatsService \n\nSeatsService \n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { Seat, SeatSchema } from './entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SeatsController],\n  providers: [SeatsService],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateSeatData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSeatData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeatData(seatId: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seatId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\n\nimport { Seat, SeatDocument } from './entities/seat.entity';\n\n@Injectable()\nexport class SeatsService {\n  constructor(@InjectModel(Seat.name) private seatModel: Model) {}\n\n  public async updateSeatData(\n    seatId: ObjectId,\n    seatDto: UpdateSeatDto,\n  ): Promise {\n    let seat = await this.seatModel.findById(seatId).exec();\n    if (!seat) {\n      throw new HttpException(\n        'Seat with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    if (seatDto.status) {\n      seat.status = seatDto.status;\n    }\n    await seat.save();\n    seat = await this.seatModel.findById(seatId).select({ __v: false }).exec();\n    return seat;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Section.html":{"url":"classes/Section.html","title":"class - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/entities/section.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                price\n                            \n                            \n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'economy', description: 'Class'})@Prop({required: true, trim: true, enum: Class})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1700', description: 'Section Price'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '90', description: 'Seats'})@Prop({trim: true, type: undefined, ref: 'Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type SectionDocument = Section & Document;\n\nexport enum Class {\n  Business = 'business',\n  Economy = 'economy',\n}\n\n@Schema()\nexport class Section {\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  @Prop({ required: true, trim: true })\n  price: number;\n\n  @ApiProperty({ example: 'economy', description: 'Class' })\n  @Prop({ required: true, trim: true, enum: Class })\n  class: Class;\n\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Seat',\n  })\n  seats: Seat[];\n}\nexport const SectionSchema = SchemaFactory.createForClass(Section);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SectionsController.html":{"url":"controllers/SectionsController.html","title":"controller - SectionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SectionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sections\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(sectionDto: CreateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Section'})@ApiResponse({status: 200, type: Section})@Post()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Section'})@ApiResponse({status: 200, type: Section})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Sections'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Section data'})@ApiResponse({status: 200, type: Section})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Section data'})@ApiResponse({status: 200, type: Section})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section } from './entities/section.entity';\n\n@ApiTags('Sections')\n@Controller('sections')\nexport class SectionsController {\n  constructor(private readonly sectionsService: SectionsService) {}\n\n  @ApiOperation({ summary: 'Create a Section' })\n  @ApiResponse({ status: 200, type: Section })\n  @Post()\n  create(@Body() sectionDto: CreateSectionDto) {\n    return this.sectionsService.createSection(sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Sections' })\n  @ApiResponse({ status: 200, type: [Section] })\n  @Get()\n  findAll() {\n    return this.sectionsService.getAllSections();\n  }\n\n  @ApiOperation({ summary: 'Get Section data' })\n  @ApiResponse({ status: 200, type: Section })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.sectionsService.getSectionById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Section data' })\n  @ApiResponse({ status: 200, type: Section })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() sectionDto: UpdateSectionDto) {\n    return this.sectionsService.updateSectionData(id, sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Section' })\n  @ApiResponse({ status: 200, type: Section })\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.sectionsService.deleteSection(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SectionsModule.html":{"url":"modules/SectionsModule.html","title":"module - SectionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SectionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\n\nSectionsService \n\nSectionsService \n\n\n\nSectionsModule\n\nSectionsModule\n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sections/sections.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SectionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { SectionsController } from './sections.controller';\nimport { Section, SectionSchema } from './entities/section.entity';\nimport { Seat, SeatSchema } from 'src/seats/entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Section.name, schema: SectionSchema }]),\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SectionsController],\n  providers: [SectionsService],\n  exports: [SectionsService],\n})\nexport class SectionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SectionsService.html":{"url":"injectables/SectionsService.html","title":"injectable - SectionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SectionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createSection\n                            \n                            \n                                    Public\n                                    Async\n                                deleteSection\n                            \n                            \n                                    Public\n                                    Async\n                                getAllSections\n                            \n                            \n                                    Public\n                                    Async\n                                getSectionById\n                            \n                            \n                                    Public\n                                    Async\n                                updateSectionData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sectionModel: Model, seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sections/sections.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSection(sectionDto: CreateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSection(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllSections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllSections()\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getSectionById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionById(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSectionData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSectionData(sectionId: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section, SectionDocument } from './entities/section.entity';\nimport { Seat, SeatDocument } from 'src/seats/entities/seat.entity';\n\n@Injectable()\nexport class SectionsService {\n  constructor(\n    @InjectModel(Section.name) private sectionModel: Model,\n    @InjectModel(Seat.name) private seatModel: Model,\n  ) {}\n\n  public async createSection(sectionDto: CreateSectionDto): Promise {\n    try {\n      let section = await this.sectionModel.create({\n        price: sectionDto.price,\n        class: sectionDto.class,\n        seats: [],\n      });\n      for (let i = 1; i  {\n    const sections = await this.sectionModel\n      .find()\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return sections;\n  }\n\n  public async getSectionById(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findById(sectionId)\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n\n  public async updateSectionData(\n    sectionId: ObjectId,\n    sectionDto: UpdateSectionDto,\n  ): Promise {\n    let section = await this.sectionModel.findById(sectionId).exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (sectionDto.class) {\n      section.class = sectionDto.class;\n    }\n    if (sectionDto.price) {\n      section.price = sectionDto.price;\n    }\n\n    await section.save();\n    section = await this.sectionModel\n      .findById(sectionId)\n      .select({ __v: false })\n      .exec();\n    return section;\n  }\n\n  public async deleteSection(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findByIdAndDelete(sectionId)\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SelectSeatDto.html":{"url":"classes/SelectSeatDto.html","title":"class - SelectSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SelectSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/select-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)@ApiProperty({example: 'Booked', description: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/select-seat.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class SelectSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsIn([\n    Status.Booked,\n    Status.Free,\n    Status.NotAvailable,\n    Status.Paid,\n    Status.Returned,\n  ])\n  @ApiProperty({ example: 'Booked', description: 'Class' })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ticket.html":{"url":"classes/Ticket.html","title":"class - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/entities/ticket.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthday\n                            \n                            \n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Optional\n                                citizenshipUa\n                            \n                            \n                                document\n                            \n                            \n                                firstName\n                            \n                            \n                                flight\n                            \n                            \n                                lastName\n                            \n                            \n                                numberOfSeat\n                            \n                            \n                                sex\n                            \n                            \n                                status\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                            \n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:81\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'RS123456', description: 'Document'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Dmitry', description: 'First Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight'})@Prop({required: true, type: undefined, ref: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Efremov', description: 'Last Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Number Of Seat'})@Prop({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:107\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'male', description: 'Sex'})@Prop({required: true, trim: true, enum: Sex})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'booked', description: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:100\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'adult', description: 'Type'})@Prop({required: true, trim: true, enum: Type})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User | mongoose.Types.ObjectId\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'User'})@Prop({required: true, type: undefined, ref: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:96\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { User } from 'src/users/entities/users.entity';\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type TicketDocument = Ticket & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  NotAvailable = 'notAvailable',\n}\n\nexport enum Sex {\n  Male = 'male',\n  Female = 'female',\n}\n\nexport enum Type {\n  Adult = 'adult',\n  Child = 'child',\n  Baby = 'baby',\n  Disabled = 'disabled',\n}\n\n@Schema()\nexport class Ticket {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Flight',\n  })\n  flight: Flight | mongoose.Types.ObjectId;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n  })\n  user: User | mongoose.Types.ObjectId;\n\n  @ApiProperty({ example: 'male', description: 'Sex' })\n  @Prop({ required: true, trim: true, enum: Sex })\n  sex: Sex;\n\n  @ApiProperty({ example: 'adult', description: 'Type' })\n  @Prop({ required: true, trim: true, enum: Type })\n  type: Type;\n\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  @Prop({ required: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  @Prop({ required: true })\n  lastName: string;\n\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  @Prop({ required: true })\n  birthday: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  @Prop({ required: true, trim: true })\n  citizenshipUa?: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipRu?: string;\n\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  @Prop({ required: true, trim: true })\n  document: string;\n\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  @Prop({ required: true })\n  validity: string;\n\n  @ApiProperty({ example: 'booked', description: 'Status' })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Booked })\n  status: Status;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  @Prop({ default: null })\n  numberOfSeat: Seat | null;\n}\nexport const TicketSchema = SchemaFactory.createForClass(Ticket);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                findAll\n                            \n                            \n                                return\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(ticketDto: CreateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Ticket'})@ApiResponse({status: 200, type: Ticket})@Post('reserve')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Ticket data'})@ApiResponse({status: 200, type: Ticket})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Tickets'})@ApiResponse({status: 200, type: undefined})@Get()\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            return\n                        \n                        \n                    \n                \n            \n            \n                \nreturn(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Return Ticket'})@ApiResponse({status: 200, type: Ticket})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Ticket data'})@ApiResponse({status: 200, type: Ticket})@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Ticket } from './entities/ticket.entity';\nimport { TicketsService } from './tickets.service';\n\n@ApiTags('Tickets')\n@Controller('tickets')\nexport class TicketsController {\n  constructor(private readonly ticketsService: TicketsService) {}\n\n  @ApiOperation({ summary: 'Create a Ticket' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @Post('reserve')\n  create(@Body() ticketDto: CreateTicketDto) {\n    return this.ticketsService.createTicket(ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Tickets' })\n  @ApiResponse({ status: 200, type: [Ticket] })\n  @Get()\n  findAll() {\n    return this.ticketsService.getAllTickets();\n  }\n\n  @ApiOperation({ summary: 'Get Ticket data' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @Get(':id')\n  find(@Param('id') id: ObjectId) {\n    return this.ticketsService.getTicketById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Ticket data' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() ticketDto: UpdateTicketDto) {\n    return this.ticketsService.updateTicketData(id, ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Return Ticket' })\n  @ApiResponse({ status: 200, type: Ticket })\n  @Delete(':id')\n  return(@Param('id') id: ObjectId) {\n    return this.ticketsService.returnTicket(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_imports\n\n\n\ncluster_TicketsModule_providers\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tickets/tickets.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsModule } from 'src/airports/airports.module';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { User, UserSchema } from 'src/users/entities/users.entity';\nimport { Flight, FlightSchema } from 'src/flights/entities/flights.entity';\nimport { Ticket, TicketSchema } from './entities/ticket.entity';\nimport {\n  Airplane,\n  AirplaneSchema,\n} from 'src/airplanes/entities/airplane.entity';\nimport { TicketsController } from './tickets.controller';\nimport { TicketsService } from './tickets.service';\nimport { AirplanesModule } from 'src/airplanes/airplanes.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Ticket.name, schema: TicketSchema },\n      { name: Flight.name, schema: FlightSchema },\n      { name: Airplane.name, schema: AirplaneSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n    AirportsModule,\n    UsersModule,\n    FlightsModule,\n    AirplanesModule,\n  ],\n  controllers: [TicketsController],\n  providers: [TicketsService],\n  exports: [TicketsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTicket\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTickets\n                            \n                            \n                                    Public\n                                    Async\n                                getTicketById\n                            \n                            \n                                    Public\n                                    Async\n                                returnTicket\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicketData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketModel: Model, flightModel: Model, airplaneModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/tickets.service.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTicket(ticketDto: CreateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllTickets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTickets()\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getTicketById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTicketById(ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            returnTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnTicket(ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateTicketData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTicketData(ticketId: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Status, Ticket, TicketDocument } from './entities/ticket.entity';\nimport { Flight, FlightDocument } from 'src/flights/entities/flights.entity';\nimport { User, UserDocument } from 'src/users/entities/users.entity';\nimport {\n  Airplane,\n  AirplaneDocument,\n} from 'src/airplanes/entities/airplane.entity';\n\n@Injectable()\nexport class TicketsService {\n  constructor(\n    @InjectModel(Ticket.name) private ticketModel: Model,\n    @InjectModel(Flight.name) private flightModel: Model,\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  public async createTicket(ticketDto: CreateTicketDto): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    const user = await this.userModel\n      .findById(ticketDto.user)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new BadRequestException('User with this name not found');\n    }\n\n    const ticket = await this.ticketModel.create({ ...ticketDto });\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    user.tickets.push(ticket._id);\n    await user.save();\n    airplane.amountOfSeat -= 1;\n    await airplane.save();\n    return ticket;\n  }\n\n  public async getAllTickets(): Promise {\n    const tickets = await this.ticketModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    return tickets;\n  }\n\n  public async getTicketById(ticketId: ObjectId): Promise {\n    const ticket = await this.ticketModel\n      .findById(ticketId)\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    return ticket;\n  }\n\n  public async updateTicketData(\n    ticketId: ObjectId,\n    ticketDto: UpdateTicketDto,\n  ): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    const user = await this.userModel\n      .findById(ticketDto.user)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new BadRequestException('User with this name not found');\n    }\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    return ticket;\n  }\n\n  public async returnTicket(ticketId: ObjectId): Promise {\n    let ticket = await this.ticketModel.findById(ticketId).exec();\n    const flight = await this.flightModel.findById(ticket.flight).exec();\n    if (!flight) {\n      throw new BadRequestException('Flight with this name not found');\n    }\n\n    ticket = await this.ticketModel.findByIdAndDelete(ticketId).exec();\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    ticket.status = Status.Returned;\n    await ticket.save();\n    airplane.amountOfSeat += 1;\n    await airplane.save();\n    return ticket;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirlineDto.html":{"url":"classes/UpdateAirlineDto.html","title":"class - UpdateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/update-airline.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirlineDto } from './create-airline.dto';\n\nexport class UpdateAirlineDto extends PartialType(CreateAirlineDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirplaneDto.html":{"url":"classes/UpdateAirplaneDto.html","title":"class - UpdateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/update-airplane.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirplaneDto } from './create-airplane.dto';\n\nexport class UpdateAirplaneDto extends PartialType(CreateAirplaneDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirportDto.html":{"url":"classes/UpdateAirportDto.html","title":"class - UpdateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/update-airport.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirportDto } from './create-airport.dto';\n\nexport class UpdateAirportDto extends PartialType(CreateAirportDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/update-flight.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class UpdateFlightDto extends PartialType(CreateFlightDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/update-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsIn(undefined)@ApiProperty({example: 'Booked', description: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/update-seat.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsIn, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class UpdateSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsIn([\n    Status.Booked,\n    Status.Free,\n    Status.NotAvailable,\n    Status.Paid,\n    Status.Returned,\n  ])\n  @ApiProperty({ example: 'Booked', description: 'Class' })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSectionDto.html":{"url":"classes/UpdateSectionDto.html","title":"class - UpdateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/update-section.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateSectionDto } from './create-section.dto';\n\nexport class UpdateSectionDto extends PartialType(CreateSectionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/update-ticket.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTicketDto } from './create-ticket.dto';\n\nexport class UpdateTicketDto extends PartialType(CreateTicketDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDataDto.html":{"url":"classes/UpdateUserDataDto.html","title":"class - UpdateUserDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-data.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/mapped-types';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDataDto extends PartialType(CreateUserDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                role\n                            \n                            \n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'E-mail'})@Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Іван', description: 'First name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Шевченко', description: 'Last name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'A1b2@c3d!', description: 'Password'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '380951234567', description: 'Phone number'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user', description: 'Role'})@Prop({required: true, trim: true, enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Ticket[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'ticket', description: 'Tickets'})@Prop({trim: true, type: undefined, ref: 'Ticket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:50\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Ticket } from 'src/tickets/entities/ticket.entity';\n\nexport type UserDocument = User & Document;\n\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n\n@Schema()\nexport class User {\n  @ApiProperty({ example: 'Іван', description: 'First name' })\n  @Prop({ required: true, trim: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Шевченко', description: 'Last name' })\n  @Prop({ required: true, trim: true })\n  lastName: string;\n\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  @Prop({ required: true })\n  phoneNumber: number;\n\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  @Prop({ required: true })\n  password: string;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @ApiProperty({ example: 'user', description: 'Role' })\n  @Prop({ required: true, trim: true, enum: Role, default: Role.User })\n  role: Role;\n\n  @ApiProperty({\n    example: 'ticket',\n    description: 'Tickets',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Ticket',\n  })\n  tickets: Ticket[];\n}\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \nchangePassword(id: ObjectId, userDto: ChangeUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Change User password'})@ApiResponse({status: 200, type: User})@Patch(':id/changePassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete User'})@ApiResponse({status: 200, type: User})@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Users'})@ApiResponse({status: 200, type: undefined})@Get()@Roles('admin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get User data'})@ApiResponse({status: 200, type: User})@Get(':id')@Roles('admin')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateData\n                        \n                        \n                    \n                \n            \n            \n                \nupdateData(id: ObjectId, userDto: UpdateUserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update User data'})@ApiResponse({status: 200, type: User})@Patch(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n} from '@nestjs/common';\nimport { ApiOperation, ApiResponse, ApiTags } from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { UsersService } from './users.service';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User } from './entities/users.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOperation({ summary: 'Get data all Users' })\n  @ApiResponse({ status: 200, type: [User] })\n  @Get()\n  @Roles('admin')\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @ApiOperation({ summary: 'Get User data' })\n  @ApiResponse({ status: 200, type: User })\n  @Get(':id')\n  @Roles('admin')\n  findOne(@Param('id') id: ObjectId) {\n    return this.usersService.getUserById(id);\n  }\n\n  @ApiOperation({ summary: 'Update User data' })\n  @ApiResponse({ status: 200, type: User })\n  @Patch(':id/update')\n  updateData(@Param('id') id: ObjectId, @Body() userDto: UpdateUserDataDto) {\n    return this.usersService.updateUserData(id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Change User password' })\n  @ApiResponse({ status: 200, type: User })\n  @Patch(':id/changePassword')\n  changePassword(\n    @Param('id') id: ObjectId,\n    @Body() userDto: ChangeUserPasswordDto,\n  ) {\n    return this.usersService.changeUserPassword(id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Delete User' })\n  @ApiResponse({ status: 200, type: User })\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.usersService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { User, UserSchema } from './entities/users.entity';\nimport { AuthModule } from 'src/auth/auth.module';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getUserById\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(userId: ObjectId, userDto: ChangeUserPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:131\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUserData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserData(userId: ObjectId, userDto: UpdateUserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User, UserDocument } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  public async createUser(userDto: CreateUserDto): Promise {\n    try {\n      let user = await this.userModel.create({ ...userDto });\n      user = await this.userModel\n        .findOne({ email: userDto.email })\n        .select({ password: false, __v: false })\n        .exec();\n      return user;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllUsers(): Promise {\n    const users = await this.userModel\n      .find()\n      .select({ password: false, __v: false })\n      .exec();\n    return users;\n  }\n\n  public async getUserById(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async updateUserData(\n    userId: ObjectId,\n    userDto: UpdateUserDataDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (userDto.email) {\n      user.email = userDto.email;\n    }\n\n    if (userDto.firstName) {\n      user.firstName = userDto.firstName;\n    }\n\n    if (userDto.lastName) {\n      user.lastName = userDto.lastName;\n    }\n\n    if (userDto.phoneNumber) {\n      user.phoneNumber = userDto.phoneNumber;\n    }\n\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n\n    return user;\n  }\n\n  public async changeUserPassword(\n    userId: ObjectId,\n    userDto: ChangeUserPasswordDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const passwordEquals = await bcrypt.compare(\n      userDto.oldPassword,\n      user.password,\n    );\n    const newPasswordEquals = await bcrypt.compare(\n      userDto.newPassword,\n      user.password,\n    );\n\n    if (!passwordEquals) {\n      throw new HttpException('Password mismatch', HttpStatus.BAD_REQUEST);\n    } else if (newPasswordEquals) {\n      throw new HttpException(\n        'New and old passwords must not match',\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const salt = await bcrypt.genSalt();\n      const hashPassword = await bcrypt.hash(userDto.newPassword, salt);\n      user.password = hashPassword;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async deleteUser(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findByIdAndDelete(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async getUserByEmail(email: string): Promise {\n    const user = await this.userModel.findOne({ email: email }).exec();\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/airlines/airlines.controller.ts\n            \n            controller\n            AirlinesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airlines/airlines.service.ts\n            \n            injectable\n            AirlinesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/create-airline.dto.ts\n            \n            class\n            CreateAirlineDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/update-airline.dto.ts\n            \n            class\n            UpdateAirlineDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            class\n            Airline\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            variable\n            AirlineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.controller.ts\n            \n            controller\n            AirplanesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.service.ts\n            \n            injectable\n            AirplanesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airplanes/dto/create-airplane.dto.ts\n            \n            class\n            CreateAirplaneDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/dto/update-airplane.dto.ts\n            \n            class\n            UpdateAirplaneDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            class\n            Airplane\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            variable\n            AirplaneSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/airports.controller.ts\n            \n            controller\n            AirportsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airports/airports.service.ts\n            \n            injectable\n            AirportsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airports/dto/create-airport.dto.ts\n            \n            class\n            CreateAirportDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/dto/update-airport.dto.ts\n            \n            class\n            UpdateAirportDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            class\n            Airport\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            variable\n            AirportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            variable\n            cookieExtractor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/flights/dto/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/dto/search-flight.dto.ts\n            \n            class\n            SearchFlightDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/flights/dto/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            class\n            Flight\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            variable\n            FlightSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/select-seat.dto.ts\n            \n            class\n            SelectSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/dto/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            variable\n            SeatSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sections/dto/create-section.dto.ts\n            \n            class\n            CreateSectionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/dto/update-section.dto.ts\n            \n            class\n            UpdateSectionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            class\n            Section\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            variable\n            SectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/sections.controller.ts\n            \n            controller\n            SectionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sections/sections.service.ts\n            \n            injectable\n            SectionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tickets/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            class\n            Ticket\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            variable\n            TicketSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/change-user-password.dto.ts\n            \n            class\n            ChangeUserPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-data.dto.ts\n            \n            class\n            UpdateUserDataDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            - : 0.0.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/throttler : ^1.1.4\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/multer : ^1.4.5\n        \n            bcrypt : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            cache-manager : ^3.4.3\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.5\n        \n            cross-env : ^7.0.3\n        \n            csurf : ^1.11.0\n        \n            fuse.js : ^6.4.6\n        \n            helmet : ^4.6.0\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.12.9\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Class   (src/.../section.entity.ts)\n                        \n                        \n                            Folder   (src/.../files.service.ts)\n                        \n                        \n                            Role   (src/.../users.entity.ts)\n                        \n                        \n                            Sex   (src/.../ticket.entity.ts)\n                        \n                        \n                            Status   (src/.../seat.entity.ts)\n                        \n                        \n                            Status   (src/.../ticket.entity.ts)\n                        \n                        \n                            Type   (src/.../ticket.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/sections/entities/section.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Class\n                    \n                \n                        \n                            \n                                 Business\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 Economy\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/files/files.service.ts\n    \n        \n            \n                \n                    \n                        \n                        Folder\n                    \n                \n                        \n                            \n                                 Airline\n                            \n                        \n                        \n                            \n                                Value : airline\n                            \n                        \n            \n        \n\n    src/users/entities/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Type\n                    \n                \n                        \n                            \n                                 Adult\n                            \n                        \n                        \n                            \n                                Value : adult\n                            \n                        \n                        \n                            \n                                 Child\n                            \n                        \n                        \n                            \n                                Value : child\n                            \n                        \n                        \n                            \n                                 Baby\n                            \n                        \n                        \n                            \n                                Value : baby\n                            \n                        \n                        \n                            \n                                 Disabled\n                            \n                        \n                        \n                            \n                                Value : disabled\n                            \n                        \n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 Free\n                            \n                        \n                        \n                            \n                                Value : free\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AirlinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirplanesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SectionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_exports\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAirlinesService \n\nAirlinesService \n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nAirlinesModule -->\n\nFilesService->AirlinesModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nSectionsService \n\nSectionsService \n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    28 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineDocument   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneDocument   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportDocument   (src/.../airport.entity.ts)\n                        \n                        \n                            FlightDocument   (src/.../flights.entity.ts)\n                        \n                        \n                            SeatDocument   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionDocument   (src/.../section.entity.ts)\n                        \n                        \n                            TicketDocument   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirlineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airplanes/entities/airplane.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirplaneDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airports/entities/airport.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirportDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/flights/entities/flights.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FlightDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/seats/entities/seat.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SeatDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/sections/entities/section.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tickets/entities/ticket.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TicketDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/entities/users.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineSchema   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneSchema   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportSchema   (src/.../airport.entity.ts)\n                        \n                        \n                            cookieExtractor   (src/.../jwt.strategy.ts)\n                        \n                        \n                            FlightSchema   (src/.../flights.entity.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            Roles   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            SeatSchema   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionSchema   (src/.../section.entity.ts)\n                        \n                        \n                            TicketSchema   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirlineSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airline)\n                        \n                    \n\n\n            \n        \n\n    src/airplanes/entities/airplane.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirplaneSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airplane)\n                        \n                    \n\n\n            \n        \n\n    src/airports/entities/airport.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airport)\n                        \n                    \n\n\n            \n        \n\n    src/auth/strategies/jwt.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cookieExtractor\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (req) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n                        \n                    \n\n\n            \n        \n\n    src/flights/entities/flights.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FlightSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Flight)\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles-auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...role: string[]) => SetMetadata(ROLES_KEY, role)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'role'\n                        \n                    \n\n\n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SeatSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Seat)\n                        \n                    \n\n\n            \n        \n\n    src/sections/entities/section.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Section)\n                        \n                    \n\n\n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TicketSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Ticket)\n                        \n                    \n\n\n            \n        \n\n    src/users/entities/users.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
