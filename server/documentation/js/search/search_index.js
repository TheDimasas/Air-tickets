var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Airline.html",[0,0.208,1,1.711]],["body/classes/Airline.html",[0,0.162,1,3.266,2,0.744,3,0.098,4,0.098,5,0.086,6,2.205,7,0.357,8,1.598,9,1.456,10,4.659,11,4.659,12,4.194,13,4.659,14,4.659,15,4.659,16,4.728,17,0.851,18,0.015,19,1.978,20,1.65,21,3.577,22,3.243,23,3.649,24,4.242,25,3.682,26,1.9,27,3.682,28,0.878,29,4.522,30,3.191,31,4.12,32,0.991,33,3.075,34,3.682,35,3.075,36,5.137,37,4.522,38,3.937,39,3.075,40,3.928,41,3.928,42,3.861,43,5.725,44,3.928,45,4.522,46,3.075,47,3.075,48,3.075,49,3.075,50,3.075,51,0.193,52,3.87,53,1.731,54,1.702,55,0.802,56,2.47,57,0.527,58,2.374,59,0.802,60,0.171,61,2.404,62,2.408,63,2.969,64,0.897,65,2.205,66,2.67,67,0.005,68,0.008,69,0.005]],["title/controllers/AirlinesController.html",[70,1.239,71,2.825]],["body/controllers/AirlinesController.html",[0,0.143,1,3.15,3,0.087,4,0.087,5,0.076,7,0.316,9,1.159,16,4.834,17,0.948,18,0.015,19,1.3,20,1.448,25,2.568,26,1.878,28,0.872,32,0.87,51,0.248,57,0.466,59,0.709,60,0.087,67,0.005,68,0.007,69,0.005,70,0.855,71,2.958,72,0.855,73,2.361,74,1.427,75,1.203,76,2.386,77,3.504,78,3.259,79,1.962,80,3.311,81,2.718,82,3.724,83,6.297,84,2.986,85,2.718,86,2.416,87,2.718,88,2.921,89,2.745,90,2.759,91,3.103,92,3.513,93,2.958,94,2.718,95,2.718,96,2.718,97,1.623,98,5.469,99,1.745,100,1.809,101,2.587,102,2.718,103,3.538,104,4.125,105,2.776,106,2.745,107,1.505,108,1.809,109,2.718,110,3.485,111,2.718,112,1.692,113,1.809,114,2.718,115,1.692,116,2.718,117,2.718,118,2.718,119,2.718,120,2.718,121,2.718,122,1.692,123,3.981,124,1.505,125,2.126,126,2.718,127,2.718,128,2.718,129,2.416,130,2.488,131,1.505,132,1.505,133,4.985,134,2.718,135,0.448,136,2.718,137,2.361,138,2.126,139,2.616,140,2.616,141,2.718,142,2.777,143,2.416,144,2.777,145,3.08,146,3.14,147,3.143,148,3.259,149,1.357,150,3.143,151,2.777,152,3.103,153,2.361,154,2.126,155,1.181,156,3.225,157,1.041,158,1.427,159,1.427,160,1.505,161,2.718,162,2.718,163,1.235,164,0.961,165,2.986,166,2.059,167,2.488,168,2.616,169,2.986,170,2.92,171,4.125,172,4.125,173,1.56,174,2.718,175,2.718,176,1.908,177,1.592,178,1.692,179,2.718,180,1.692,181,2.361,182,2.718,183,1.692,184,1.809,185,2.718]],["title/modules/AirlinesModule.html",[186,1.066,187,2.622]],["body/modules/AirlinesModule.html",[0,0.262,1,2.155,3,0.158,4,0.158,5,0.138,18,0.015,28,0.661,51,0.274,53,1.899,55,1.294,60,0.158,65,4.503,67,0.009,68,0.011,69,0.009,71,4.94,72,1.975,135,0.817,152,5.019,153,4.309,154,3.879,186,1.865,187,5.266,188,2.064,189,2.064,190,2.253,191,2.253,192,2.064,193,3.129,194,3.129,195,4.309,196,4.309,197,4.309,198,4.309,199,4.749,200,2.852,201,2.253,202,2.155,203,4.961,204,3.133,205,2.604,206,4.961,207,4.961,208,2.746,209,4.961]],["title/injectables/AirlinesService.html",[152,2.452,210,0.82]],["body/injectables/AirlinesService.html",[0,0.148,1,3.37,3,0.09,4,0.09,5,0.078,7,0.327,9,1.265,12,3.979,16,5.092,17,0.739,18,0.015,25,2.635,28,0.85,32,0.927,51,0.238,55,0.734,59,0.734,60,0.09,61,2.2,64,1.771,67,0.005,68,0.007,69,0.005,75,1.235,79,2.421,82,3.525,97,1.771,98,5.541,99,1.771,101,2.61,105,1.948,123,3.768,135,0.463,152,2.635,154,2.2,155,1.222,156,3.31,157,1.077,173,1.584,176,1.948,210,0.882,211,1.077,212,2.443,213,4.165,214,2.88,215,5.089,216,4.233,217,4.233,218,5.662,219,5.089,220,1.923,221,2.813,222,3.134,223,4.121,224,2.813,225,4.233,226,2.813,227,2.813,228,3.225,229,4.233,230,2.813,231,5.662,232,4.233,233,2.813,234,2.813,235,2.813,236,2.813,237,2.888,238,1.338,239,1.557,240,2.2,241,2.813,242,2.813,243,2.014,244,3.356,245,6.38,246,5.089,247,3.531,248,2.772,249,2.545,250,2.018,251,2.018,252,3.168,253,2.343,254,4.917,255,2.813,256,2.813,257,3.556,258,3.361,259,3.031,260,2.479,261,2.817,262,2.817,263,1.557,264,2.813,265,2.817,266,2.813,267,4.233,268,2.813,269,4.233,270,2.813,271,4.233,272,2.813,273,4.233,274,2.813,275,4.233,276,2.813,277,4.233,278,2.813,279,2.813,280,2.813,281,2.813,282,2.813]],["title/classes/Airplane.html",[0,0.208,283,1.789]],["body/classes/Airplane.html",[0,0.232,2,1.065,3,0.14,4,0.14,5,0.123,7,0.511,8,2.053,17,0.917,18,0.015,19,1.515,20,1.575,21,3.414,26,1.788,28,0.586,30,3.116,31,3.6,32,0.946,38,3.867,51,0.258,52,3.829,53,2.224,54,2.436,55,1.148,56,2.444,57,0.755,58,3.05,59,1.697,60,0.207,62,2.298,63,3.216,64,1.284,67,0.008,68,0.01,69,0.008,283,3.267,284,3.156,285,5.649,286,5.086,287,4.327,288,4.167,289,4.167,290,4.167,291,2.929,292,4.401,293,2.639,294,5.046,295,5.046,296,3.822,297,4.401,298,3.421,299,4.401,300,2.578,301,3.617,302,4.401,303,3.156,304,3.156,305,1.912,306,2.74,307,2.929,308,3.822]],["title/controllers/AirplanesController.html",[70,1.239,309,2.825]],["body/controllers/AirplanesController.html",[0,0.151,3,0.091,4,0.091,5,0.08,7,0.332,9,1.189,17,0.954,18,0.015,19,1.34,20,1.48,26,1.89,28,0.887,32,0.889,51,0.246,57,0.49,59,0.745,60,0.091,67,0.005,68,0.008,69,0.005,70,0.899,72,0.899,74,1.5,75,1.25,76,2.276,77,3.58,78,3.342,79,2.037,80,3.158,84,3.051,86,2.509,88,2.248,89,1.902,90,2.843,91,3.198,92,3.558,93,3.072,97,1.665,99,1.783,100,1.902,101,2.62,103,3.592,105,2.806,106,3.419,107,1.582,108,1.902,110,3.158,112,1.779,113,1.902,115,1.779,122,1.779,124,2.371,125,2.234,129,2.509,130,2.138,131,1.582,132,1.582,135,0.471,139,2.696,140,2.696,142,2.848,143,2.509,144,2.848,145,3.158,146,3.208,147,3.203,148,3.342,149,1.426,150,3.203,151,2.848,155,1.241,157,1.094,158,1.5,159,1.5,160,1.582,163,1.298,164,1.01,165,3.051,166,1.426,167,2.564,168,2.696,169,3.051,170,3.009,173,1.594,176,1.966,177,1.674,178,1.779,180,1.779,183,1.779,184,1.902,283,3.33,309,3.072,310,2.482,311,3.72,312,2.857,313,3.805,314,2.857,315,2.857,316,2.482,317,2.857,318,2.857,319,5.573,320,2.857,321,5.137,322,2.857,323,2.857,324,2.857,325,2.234,326,2.049,327,2.857,328,4.068,329,2.857,330,2.857,331,3.198,332,2.482,333,2.234,334,3.349,335,2.857,336,2.857,337,2.482,338,1.902,339,2.857,340,2.857,341,2.857,342,1.902,343,2.857,344,2.857]],["title/modules/AirplanesModule.html",[186,1.066,345,2.452]],["body/modules/AirplanesModule.html",[0,0.27,3,0.163,4,0.163,5,0.143,18,0.015,28,0.681,51,0.27,53,1.957,55,1.333,60,0.163,67,0.009,68,0.011,69,0.009,72,2.013,135,0.842,186,1.89,188,2.127,189,2.127,190,2.322,191,2.322,192,2.127,193,3.172,194,3.172,200,2.906,201,2.322,202,2.221,204,2.552,205,2.683,208,2.83,283,2.322,307,4.258,309,5.008,331,5.039,332,4.44,333,3.997,345,4.855,346,4.44,347,4.44,348,4.44,349,5.112,350,5.112,351,4.44]],["title/injectables/AirplanesService.html",[210,0.82,331,2.452]],["body/injectables/AirplanesService.html",[0,0.164,3,0.099,4,0.099,5,0.087,7,0.361,9,1.319,17,0.771,18,0.015,28,0.844,32,0.962,51,0.238,55,0.811,59,0.811,60,0.099,64,1.575,67,0.006,68,0.008,69,0.006,75,1.33,97,1.847,99,1.847,101,2.675,105,2.067,135,0.512,155,1.351,157,1.19,173,1.652,176,2.067,210,0.95,211,1.19,213,4.237,214,2.93,220,2.071,222,3.292,228,3.305,237,2.569,238,1.479,239,1.721,243,1.479,244,3.186,247,3.505,248,2.584,249,2.372,252,1.936,253,1.721,257,4.261,258,4.027,259,3.161,260,1.821,261,2.07,262,2.07,263,1.721,265,2.524,283,3.5,287,3.709,304,2.23,311,3.96,313,3.702,319,5.748,328,3.958,331,2.839,333,2.431,334,3.566,352,2.701,353,5.4,354,4.56,355,4.56,356,5.947,357,5.4,358,3.11,359,3.11,360,3.96,361,3.11,362,3.11,363,4.56,364,3.11,365,5.947,366,4.56,367,3.11,368,3.11,369,3.11,370,3.11,371,2.701,372,2.701,373,3.11,374,5.5,375,3.11,376,4.542,377,4.215,378,4.56,379,3.11,380,3.11,381,4.56,382,3.11,383,2.701,384,3.11]],["title/classes/Airport.html",[0,0.208,385,2.068]],["body/classes/Airport.html",[0,0.157,2,0.72,3,0.095,4,0.095,5,0.083,7,0.345,8,1.559,9,1.54,17,0.889,18,0.015,19,2.038,20,1.743,21,3.778,23,2.442,26,1.892,27,4.055,28,1.012,30,3.24,31,4.235,32,1.046,34,4.055,38,4.335,51,0.189,52,4.042,53,1.689,54,1.646,55,0.776,56,2.58,57,0.51,58,2.316,59,0.776,60,0.168,62,2.543,63,3.222,64,0.868,67,0.005,68,0.008,69,0.005,291,1.979,385,4.063,386,2.133,387,4.569,388,4.569,389,4.569,390,4.569,391,4.569,392,4.569,393,4.569,394,4.569,395,4.569,396,4.551,397,5.657,398,4.413,399,2.974,400,2.974,401,4.671,402,2.583,403,2.974,404,3.832,405,4.413,406,2.974,407,2.974,408,2.974,409,3.832,410,4.413,411,2.974,412,2.974,413,2.974,414,2.974,415,3.832,416,2.974,417,2.974,418,2.325,419,4.569,420,2.133,421,2.583]],["title/controllers/AirportsController.html",[70,1.239,422,2.825]],["body/controllers/AirportsController.html",[0,0.15,3,0.091,4,0.091,5,0.08,7,0.331,9,1.187,17,0.953,18,0.015,19,1.338,20,1.478,26,1.889,28,0.886,32,0.888,51,0.245,57,0.489,59,0.743,60,0.091,67,0.005,68,0.008,69,0.005,70,0.897,72,0.897,74,1.496,75,1.247,76,2.273,77,3.576,78,3.338,79,2.033,80,3.154,84,3.047,86,2.504,88,2.991,89,1.897,90,2.839,91,3.193,92,3.555,93,3.066,97,1.663,99,1.781,100,1.897,101,2.619,103,3.589,105,2.804,106,2.845,107,2.366,108,1.897,110,3.154,112,1.774,113,1.897,115,1.774,122,1.774,124,2.366,129,2.504,130,2.133,131,1.577,132,1.577,135,0.469,139,2.692,140,2.692,142,2.844,143,2.504,144,2.844,145,3.154,146,3.205,147,3.2,148,3.338,149,1.422,150,3.2,151,2.844,155,1.238,157,1.091,158,1.496,159,1.496,160,1.577,163,1.294,164,1.007,165,3.047,166,2.133,167,2.56,168,2.692,169,3.047,170,3.004,173,1.593,176,1.963,177,1.669,178,1.774,180,1.774,183,1.774,184,1.897,325,2.228,326,2.044,338,1.897,342,1.897,385,3.846,422,3.066,423,2.475,424,3.712,425,2.85,426,3.801,427,2.85,428,2.85,429,2.85,430,2.85,431,5.568,432,2.85,433,5.129,434,2.85,435,2.85,436,2.85,437,2.85,438,4.064,439,2.228,440,1.774,441,2.85,442,2.85,443,3.193,444,2.475,445,2.228,446,3.342,447,2.85,448,2.85,449,2.85,450,2.85,451,2.85,452,2.85,453,2.85]],["title/modules/AirportsModule.html",[186,1.066,454,2.452]],["body/modules/AirportsModule.html",[0,0.271,3,0.164,4,0.164,5,0.143,18,0.015,28,0.684,51,0.271,53,1.966,55,1.34,60,0.164,67,0.009,68,0.011,69,0.009,72,2.019,135,0.846,186,1.895,188,2.137,189,2.137,190,2.333,191,2.333,192,2.137,193,3.179,194,3.179,200,2.915,201,2.333,202,2.231,204,2.564,205,2.696,208,2.843,385,2.696,420,4.602,422,5.019,443,5.042,444,4.461,445,4.016,454,4.86,455,4.461,456,4.461,457,4.461,458,5.136,459,5.136,460,5.136]],["title/injectables/AirportsService.html",[210,0.82,443,2.452]],["body/injectables/AirportsService.html",[0,0.155,3,0.093,4,0.093,5,0.082,7,0.34,9,1.287,17,0.752,18,0.015,28,0.823,32,0.942,51,0.232,55,0.764,59,0.764,60,0.093,64,1.521,67,0.005,68,0.008,69,0.005,75,1.273,79,2.076,97,1.803,99,1.803,101,2.637,105,1.996,135,0.483,155,1.273,157,1.122,173,1.611,176,1.996,210,0.909,211,1.122,213,4.195,214,2.901,220,1.982,222,3.198,228,3.258,237,2.939,238,1.394,239,1.622,243,1.394,244,3.201,247,3.585,248,2.684,249,2.464,250,2.102,251,2.102,252,2.717,253,1.622,257,3.619,258,3.42,259,3.084,260,1.716,261,1.95,262,1.95,263,1.622,265,2.886,385,4.094,396,4.077,418,2.291,424,3.79,426,3.597,431,5.366,438,3.846,443,2.717,445,2.291,446,3.412,461,2.545,462,4.364,463,4.364,464,4.364,465,5.778,466,5.215,467,2.93,468,2.93,469,4.364,470,4.364,471,2.93,472,4.364,473,2.93,474,5.778,475,4.364,476,2.93,477,2.93,478,2.93,479,2.93,480,2.93,481,6.477,482,5.778,483,2.93,484,4.364,485,2.93,486,2.93,487,4.364,488,2.93,489,4.364,490,2.93,491,4.364,492,2.93,493,4.364,494,2.93,495,4.364,496,2.93,497,4.364,498,2.93,499,4.364,500,2.93,501,4.364,502,2.93,503,4.364,504,2.93,505,2.93,506,2.93]],["title/controllers/AppController.html",[70,1.239,507,2.825]],["body/controllers/AppController.html",[0,0.255,3,0.154,4,0.154,5,0.135,7,0.561,9,1.006,17,0.828,18,0.015,20,1.169,26,1.735,28,0.644,32,0.702,51,0.266,57,0.828,60,0.154,67,0.009,68,0.011,69,0.009,70,1.942,72,1.52,75,1.801,84,2.41,92,3.08,97,1.409,99,1.409,103,3.239,135,0.795,142,3.08,144,3.08,146,3.239,147,3.08,149,2.41,150,3.08,151,3.08,163,2.194,165,2.41,166,2.41,167,2.41,168,2.535,169,2.41,173,1.26,214,2.604,507,4.426,508,4.194,509,5.36,510,4.829,511,4.829,512,4.829,513,4.829,514,4.194,515,4.829,516,4.829,517,3.615,518,3.214,519,3.765,520,4.829,521,2.097,522,4.829,523,2.673,524,4.829,525,3.214,526,4.829,527,4.829,528,3.214,529,4.829,530,4.829,531,4.829]],["title/modules/AppModule.html",[186,1.066,532,2.825]],["body/modules/AppModule.html",[0,0.18,3,0.109,4,0.109,5,0.095,18,0.015,30,2.479,51,0.283,55,0.891,60,0.109,67,0.006,68,0.009,69,0.006,72,1.536,135,0.563,186,1.542,187,4.55,188,1.421,189,1.421,190,1.552,191,1.552,192,1.421,193,2.587,194,1.552,199,4.256,200,2.217,201,1.552,202,1.484,204,3.281,205,1.793,214,1.868,259,1.705,345,4.256,454,4.256,507,4.085,532,5.795,533,2.967,534,2.967,535,2.967,536,4.256,537,4.256,538,4.55,539,4.55,540,4.55,541,4.004,542,4.55,543,3.416,544,4.881,545,3.416,546,5.397,547,5.727,548,2.45,549,4.881,550,3.416,551,2.967,552,5.696,553,4.881,554,2.671,555,3.416,556,3.416,557,2.967,558,3.416,559,3.416,560,3.416,561,3.416,562,3.416,563,3.416,564,3.416,565,3.416,566,3.416,567,3.501,568,3.416,569,2.967,570,2.967,571,2.967,572,2.967,573,3.416,574,4.947,575,4.881,576,3.416,577,4.947,578,3.416,579,3.416,580,3.416,581,3.416,582,3.416,583,3.416,584,3.416,585,3.416,586,3.416,587,3.416,588,3.416,589,3.416,590,5.696,591,5.696]],["title/injectables/AppService.html",[210,0.82,542,2.622]],["body/injectables/AppService.html",[0,0.325,3,0.196,4,0.196,5,0.172,18,0.014,51,0.221,60,0.196,67,0.011,68,0.013,69,0.011,135,1.015,210,1.492,211,2.36,542,4.768,592,5.355]],["title/controllers/AuthController.html",[70,1.239,593,2.825]],["body/controllers/AuthController.html",[0,0.179,3,0.108,4,0.108,5,0.094,7,0.393,9,1.18,17,0.889,18,0.015,20,1.372,26,1.769,28,0.755,30,2.718,32,0.824,51,0.262,57,0.58,60,0.108,64,0.987,67,0.006,68,0.009,69,0.006,70,1.065,72,1.065,74,1.776,75,1.415,84,2.828,86,3.836,88,3.248,92,3.401,93,2.427,97,1.653,99,1.653,112,2.107,129,1.982,130,1.689,135,0.557,138,2.646,139,2.974,140,2.974,142,2.42,143,3.624,144,1.689,147,3.088,149,1.689,150,3.088,151,2.42,163,1.537,165,2.828,166,2.828,167,1.689,169,2.828,173,1.478,202,1.47,214,2.797,244,2.203,517,2.84,518,2.252,519,3.136,521,1.925,523,1.873,525,3.227,528,2.252,593,3.478,594,2.939,595,3.384,596,4.849,597,4.211,598,4.211,599,3.384,600,7.018,601,4.849,602,3.384,603,3.384,604,3.384,605,3.384,606,3.384,607,7.018,608,3.384,609,6.187,610,3.384,611,4.849,612,3.384,613,3.384,614,3.384,615,3.384,616,2.939,617,3.625,618,3.384,619,3.384,620,3.384,621,3.478,622,2.646,623,2.252,624,2.427,625,3.227,626,3.478,627,2.646,628,3.384,629,2.427,630,3.384,631,3.384,632,3.384,633,3.384,634,3.384,635,3.384,636,4.849,637,4.849,638,3.791,639,3.384,640,4.849,641,4.849,642,4.849,643,4.849,644,4.849,645,3.384,646,3.384,647,3.384,648,3.384,649,3.384,650,3.384]],["title/modules/AuthModule.html",[186,1.066,536,2.452]],["body/modules/AuthModule.html",[0,0.237,3,0.143,4,0.143,5,0.126,18,0.015,51,0.279,60,0.143,67,0.008,68,0.01,69,0.008,72,1.855,135,0.741,186,1.78,188,1.872,189,1.872,190,2.044,191,2.044,192,1.872,193,2.987,194,2.987,200,2.678,201,2.044,202,1.955,204,2.943,214,1.723,519,4.401,536,4.919,541,3.454,546,5.121,547,5.457,548,3.228,557,3.909,569,3.909,570,3.909,571,3.909,574,3.909,577,3.909,593,4.717,622,3.519,651,3.909,652,3.909,653,3.909,654,4.947,655,4.947,656,4.501,657,5.121,658,5.896,659,2.802,660,5.896,661,3.228,662,4.501,663,4.501,664,4.501,665,4.501,666,4.501,667,3.909,668,4.501,669,4.501,670,4.501]],["title/injectables/AuthService.html",[210,0.82,519,2.18]],["body/injectables/AuthService.html",[0,0.192,3,0.116,4,0.116,5,0.102,7,0.422,9,1.402,17,0.819,18,0.015,19,1.82,28,0.897,32,0.978,51,0.25,59,0.949,60,0.116,64,1.964,67,0.006,68,0.009,69,0.006,75,1.489,97,1.964,99,1.865,101,2.35,135,0.599,173,1.667,210,1.063,211,1.393,214,2.941,220,2.318,228,2.318,237,2.428,238,1.731,243,2.428,244,3.17,248,2.217,249,2.036,250,2.609,251,2.609,252,2.265,509,4.433,519,2.825,521,2.525,597,4.433,598,4.433,616,4.433,617,3.538,621,3.661,624,2.609,625,2.421,661,2.609,671,3.16,672,5.104,673,3.638,674,3.862,675,6.224,676,3.638,677,5.104,678,3.638,679,3.991,680,5.104,681,3.638,682,3.638,683,5.104,684,5.895,685,3.638,686,4.48,687,3.991,688,3.991,689,3.638,690,3.638,691,3.16,692,4.433,693,3.638,694,5.104,695,3.661,696,5.104,697,2.265,698,3.16,699,2.265,700,3.16,701,2.609,702,3.16,703,3.638,704,3.638,705,4.433,706,3.16,707,4.433,708,3.638,709,3.638,710,2.679,711,3.638,712,4.433,713,3.638,714,3.16,715,3.638,716,3.638]],["title/classes/ChangeUserPasswordDto.html",[0,0.208,717,2.622]],["body/classes/ChangeUserPasswordDto.html",[0,0.33,2,1.193,3,0.157,4,0.157,5,0.137,7,0.572,8,2.209,17,0.761,18,0.014,19,1.883,20,1.513,26,1.748,32,0.909,51,0.224,56,2.426,57,0.845,60,0.157,62,2.209,67,0.009,68,0.011,69,0.009,164,2.691,249,2.493,521,2.333,710,3.79,717,4.16,718,5.963,719,4.28,720,6.866,721,6.866,722,5.429,723,6.271,724,6.271,725,5.646,726,5.429,727,6.251,728,4.927,729,4.888,730,4.927,731,3.427,732,3.8,733,4.28,734,2.344,735,5.429,736,5.429]],["title/classes/CreateAirlineDto.html",[0,0.208,82,2.452]],["body/classes/CreateAirlineDto.html",[0,0.245,1,3.314,2,0.77,3,0.101,4,0.101,5,0.153,7,0.369,8,2.124,9,1.47,10,4.752,11,4.752,12,4.278,13,4.752,14,4.752,15,4.752,16,4.312,17,0.876,18,0.015,19,1.973,20,1.668,22,3.326,23,3.693,24,4.312,25,3.743,26,1.892,27,3.743,28,0.889,32,1.001,34,3.743,36,5.222,40,4.028,41,4.028,42,3.908,43,5.795,44,4.028,51,0.166,56,2.494,57,0.546,60,0.101,62,2.357,67,0.006,68,0.008,69,0.006,82,2.887,164,2.795,300,1.864,731,2.731,732,3.813,734,1.514,737,6.131,738,2.488,739,4.028,740,3.182,741,3.182,742,2.764,743,3.182,744,4.638,745,3.182,746,3.182,747,3.182,748,3.182,749,3.182,750,3.182,751,4.254,752,2.118,753,3.925,754,5.472,755,3.182,756,3.182]],["title/classes/CreateAirplaneDto.html",[0,0.208,313,2.452]],["body/classes/CreateAirplaneDto.html",[0,0.321,2,1.144,3,0.151,4,0.151,5,0.132,7,0.548,8,2.15,17,0.819,18,0.015,19,1.587,20,1.63,26,1.823,28,0.811,32,0.979,51,0.242,56,2.512,57,0.81,60,0.151,62,2.379,67,0.008,68,0.011,69,0.008,164,2.661,283,2.764,285,5.847,286,5.264,287,4.488,288,4.365,289,4.365,290,4.365,293,2.764,294,5.285,295,5.285,298,3.202,303,3.389,305,2.644,313,3.789,731,3.548,732,3.368,734,2.248,742,4.104,752,3.145,753,3.389,757,6.174,758,3.694,759,4.725,760,4.725,761,4.725,762,4.725,763,4.725,764,6.085,765,5.285,766,4.365]],["title/classes/CreateAirportDto.html",[0,0.208,426,2.452]],["body/classes/CreateAirportDto.html",[0,0.238,2,0.742,3,0.098,4,0.098,5,0.086,7,0.356,8,1.595,9,1.549,17,0.882,18,0.015,19,2.046,20,1.755,23,2.498,26,1.899,27,4.1,28,1.036,32,1.054,34,4.1,51,0.162,56,2.598,57,0.526,60,0.098,62,2.562,67,0.005,68,0.008,69,0.005,164,2.85,385,4.081,387,4.651,388,4.651,389,4.651,390,4.651,391,4.651,392,4.651,393,4.651,394,4.651,395,4.651,396,4.923,397,5.719,401,4.723,404,3.92,409,3.92,415,3.92,419,5.719,426,2.81,731,3.142,732,4.069,734,1.458,739,5.719,751,4.531,752,2.041,753,5.114,767,6.385,768,2.397,769,3.066,770,3.066,771,4.651,772,3.066,773,3.066,774,3.066,775,3.066,776,3.066,777,3.066,778,3.066,779,3.066,780,3.066,781,3.066,782,4.513,783,2.663,784,3.066,785,3.066]],["title/classes/CreateFlightDto.html",[0,0.208,786,2.452]],["body/classes/CreateFlightDto.html",[0,0.226,1,2.972,2,0.691,3,0.091,4,0.091,5,0.08,7,0.331,8,2.015,9,1.188,17,0.892,18,0.015,19,1.673,20,1.774,21,1.498,22,3.069,23,2.368,24,3.069,25,2.664,26,1.91,28,0.855,30,1.707,32,1.065,51,0.219,56,2.556,57,0.489,60,0.091,62,2.589,67,0.005,68,0.008,69,0.005,164,2.861,173,1.116,283,3.107,288,3.069,289,3.069,290,3.069,293,3.107,385,3.672,731,3.556,732,3.156,734,1.357,751,3.416,766,3.069,786,2.664,787,6.435,788,2.047,789,3.682,790,4.458,791,5.306,792,4.458,793,3.682,794,4.014,795,5.306,796,4.014,797,4.458,798,5.306,799,4.458,800,2.853,801,2.853,802,2.853,803,3.345,804,4.459,805,2.853,806,4.458,807,4.459,808,4.459,809,3.716,810,4.459,811,2.853,812,3.993,813,3.069,814,2.853,815,3.345,816,2.853,817,3.716,818,3.716,819,2.853,820,3.345,821,4.459,822,2.853,823,3.716,824,2.853,825,3.716,826,3.716,827,3.367,828,2.853,829,3.069,830,3.069,831,2.035,832,2.853,833,3.716,834,2.853,835,2.478,836,3.716,837,2.853,838,3.416,839,4.279,840,5.306,841,2.478,842,2.047,843,2.478]],["title/classes/CreateSeatDto.html",[0,0.208,844,2.825]],["body/classes/CreateSeatDto.html",[0,0.33,2,1.514,3,0.199,4,0.199,5,0.175,18,0.013,60,0.199,67,0.011,68,0.013,69,0.011,844,5.181,845,5.432,846,4.89]],["title/classes/CreateSectionDto.html",[0,0.208,847,2.452]],["body/classes/CreateSectionDto.html",[0,0.426,2,1.144,3,0.151,4,0.151,5,0.132,7,0.548,8,2.15,17,0.819,18,0.015,20,1.63,26,1.823,32,0.979,51,0.242,56,2.512,57,0.81,60,0.151,62,2.379,67,0.008,68,0.011,69,0.008,164,2.771,293,3.229,298,2.895,731,3.548,734,2.248,766,4.828,835,5.285,847,3.789,848,6.174,849,3.694,850,5.752,851,4.58,852,4.725,853,4.758,854,3.368,855,3.564,856,4.725,857,5.285,858,4.725,859,5.285,860,4.725,861,3.389,862,3.389,863,4.104]],["title/classes/CreateTicketDto.html",[0,0.208,864,2.452]],["body/classes/CreateTicketDto.html",[0,0.212,2,0.637,3,0.084,4,0.084,5,0.073,7,0.305,8,1.421,9,1.295,17,0.957,18,0.015,19,1.954,20,1.783,23,2.226,26,1.915,27,2.504,28,0.93,32,1.07,34,2.504,51,0.223,56,2.543,57,0.451,58,3.094,60,0.084,62,2.602,67,0.005,68,0.007,69,0.005,164,2.866,293,1.827,305,2.561,401,2.885,521,2.267,623,1.75,697,3.041,699,3.041,725,2.056,731,3.592,732,3.785,734,1.251,751,3.641,783,2.284,799,3.493,806,4.751,813,2.885,825,2.284,829,2.885,830,2.885,831,3.173,838,3.641,840,4.242,854,3.441,855,3.641,861,1.886,864,2.504,865,6.455,866,2.056,867,5.12,868,4.242,869,4.242,870,4.242,871,4.242,872,5.628,873,4.481,874,5.12,875,3.493,876,4.751,877,4.751,878,2.63,879,4.022,880,5.399,881,2.63,882,2.63,883,2.63,884,2.63,885,2.63,886,3.493,887,2.63,888,3.145,889,2.677,890,2.63,891,2.63,892,3.493,893,2.885,894,2.63,895,2.63,896,2.63,897,3.145,898,2.63,899,2.284,900,2.677,901,2.63,902,2.63,903,3.145,904,2.63,905,2.885,906,2.63,907,2.63,908,3.493,909,2.63,910,1.886,911,1.75,912,1.886,913,2.63,914,2.63,915,2.63,916,2.284]],["title/classes/CreateUserDto.html",[0,0.208,617,2.18]],["body/classes/CreateUserDto.html",[0,0.296,2,1.01,3,0.133,4,0.133,5,0.116,7,0.485,8,1.982,17,0.86,18,0.014,19,1.971,20,1.711,26,1.873,28,0.903,32,1.027,51,0.201,56,2.571,57,0.716,60,0.133,62,2.497,67,0.007,68,0.01,69,0.007,164,2.823,293,3.077,617,3.104,624,5.219,686,4.216,697,3.944,699,3.944,701,4.543,710,3.709,722,3.625,723,4.871,724,4.871,725,4.385,726,3.625,729,4.385,731,3.632,732,3.749,733,3.625,734,1.985,735,3.625,736,3.625,752,2.778,888,4.385,889,3.733,893,4.023,905,4.023,917,3.263,918,4.174,919,4.023,920,4.871,921,4.174,922,5.609,923,4.174,924,5.609,925,4.174,926,4.174,927,4.174,928,4.871,929,4.871,930,4.174,931,5.609,932,5.609,933,5.609]],["title/modules/FilesModule.html",[186,1.066,199,2.452]],["body/modules/FilesModule.html",[0,0.291,3,0.176,4,0.176,5,0.154,18,0.014,51,0.241,60,0.176,67,0.01,68,0.012,69,0.01,135,0.908,186,1.955,188,2.293,189,2.293,190,2.504,191,2.504,192,2.293,193,3.28,194,3.28,199,4.933,200,3.044,201,2.504,202,2.395,223,5.088,934,4.787,935,4.787,936,4.787,937,5.512,938,5.512]],["title/injectables/FilesService.html",[210,0.82,223,2.452]],["body/injectables/FilesService.html",[0,0.23,1,2.511,3,0.139,4,0.139,5,0.206,7,0.507,9,1.204,17,0.703,18,0.015,28,0.77,30,1.741,32,0.84,51,0.247,60,0.184,64,2.012,67,0.008,68,0.01,69,0.008,75,1.686,97,1.686,99,1.686,135,0.719,173,1.139,210,1.204,211,1.671,214,2.821,223,3.598,228,3.132,237,3.082,238,2.077,240,5.879,248,2.511,249,2.305,253,3.199,254,5.627,260,3.385,377,3.847,854,2.416,919,4.145,939,3.414,940,5.779,941,5.779,942,5.779,943,4.366,944,5.779,945,4.366,946,6.479,947,5.779,948,5.019,949,5.779,950,4.366,951,4.366,952,5.779,953,5.019,954,4.366,955,4.366,956,4.366,957,4.366,958,4.366,959,5.779,960,5.779,961,4.366,962,5.779,963,4.366,964,4.366,965,4.366]],["title/classes/Flight.html",[0,0.208,831,1.874]],["body/classes/Flight.html",[0,0.143,1,3.055,2,0.656,3,0.086,4,0.086,5,0.076,7,0.314,8,1.757,9,1.157,17,0.943,18,0.015,19,1.64,20,1.754,21,3.691,22,2.95,23,2.277,24,2.95,25,2.561,26,1.899,28,0.663,30,3.148,31,3.48,32,1.053,38,2.738,51,0.235,52,4.058,53,1.574,54,1.499,55,0.706,56,2.525,57,0.464,58,2.159,59,1.297,60,0.158,62,2.56,63,3.727,64,0.79,67,0.005,68,0.007,69,0.005,173,0.706,283,3.194,288,2.95,289,2.95,290,2.95,291,3.31,293,3.058,300,3.253,301,4.192,306,3.458,385,3.751,402,3.572,789,3.567,790,4.319,791,5.187,792,4.319,793,3.567,794,3.889,795,4.824,796,3.889,797,4.319,798,4.824,803,3.216,804,4.343,807,4.343,808,4.343,809,3.572,810,3.216,812,3.915,813,2.95,815,3.216,817,3.572,818,2.352,820,3.216,821,4.343,823,3.572,826,3.572,827,3.3,829,2.95,830,2.95,831,2.841,833,3.572,836,3.572,838,3.31,841,2.352,842,1.942,843,2.352,966,1.942,967,2.708,968,2.708,969,2.708,970,4.113,971,2.708,972,2.708,973,2.708,974,2.708,975,2.708,976,2.708,977,2.708,978,3.572,979,2.708,980,2.708,981,2.708,982,2.708,983,2.708,984,2.708,985,2.708,986,1.942,987,1.803,988,2.352]],["title/controllers/FlightsController.html",[70,1.239,989,2.825]],["body/controllers/FlightsController.html",[0,0.138,3,0.084,4,0.084,5,0.073,7,0.304,9,1.226,17,0.957,18,0.015,19,1.271,20,1.503,26,1.891,28,0.888,32,0.902,51,0.245,57,0.449,59,0.684,60,0.084,67,0.005,68,0.007,69,0.005,70,0.825,72,0.825,74,1.375,75,1.17,76,2.178,77,3.447,78,3.198,79,1.908,80,3.022,84,3.098,86,3.198,88,3.258,89,1.744,90,2.697,91,1.631,92,3.59,97,1.717,99,1.811,100,1.744,101,2.563,103,3.497,105,2.753,106,2.67,107,2.22,108,1.744,110,3.022,112,1.631,113,1.744,115,1.631,122,1.631,124,2.22,129,2.35,130,2.002,131,1.451,132,1.451,135,0.432,139,2.866,140,2.866,142,2.725,143,2.854,144,2.725,145,3.022,146,3.089,147,3.224,148,3.198,149,1.308,150,3.224,151,2.725,155,1.138,157,1.003,158,1.375,159,1.375,160,1.451,163,1.19,164,0.926,165,3.098,166,2.432,167,2.432,168,2.558,169,3.098,170,2.854,173,1.619,176,1.865,177,1.535,178,1.631,180,1.631,183,1.631,184,1.744,325,2.049,326,1.88,338,1.744,342,1.744,439,2.049,440,1.631,786,3.664,831,3.463,989,2.877,990,2.276,991,4.233,992,5.46,993,2.621,994,2.621,995,2.621,996,2.877,997,2.621,998,2.276,999,2.621,1000,5.787,1001,2.621,1002,4.873,1003,2.621,1004,2.621,1005,2.621,1006,2.621,1007,2.621,1008,3.917,1009,2.621,1010,2.621,1011,2.621,1012,2.621,1013,2.621,1014,2.621,1015,3.917,1016,2.621,1017,2.276,1018,2.621,1019,3.034,1020,2.276,1021,2.049,1022,3.81,1023,2.276,1024,2.621,1025,2.621,1026,2.621,1027,2.621,1028,2.621,1029,2.621,1030,2.621,1031,2.621,1032,2.621,1033,2.621]],["title/modules/FlightsModule.html",[186,1.066,537,2.452]],["body/modules/FlightsModule.html",[0,0.271,3,0.164,4,0.164,5,0.143,18,0.015,28,0.684,51,0.271,53,1.966,55,1.34,60,0.164,67,0.009,68,0.011,69,0.009,72,2.019,135,0.846,186,1.895,188,2.137,189,2.137,190,2.333,191,2.333,192,2.137,193,3.179,194,3.179,200,2.915,201,2.333,202,2.231,204,2.564,205,2.696,208,2.843,537,4.86,831,2.443,987,4.271,989,5.019,1019,5.042,1020,4.461,1021,4.016,1034,4.461,1035,4.461,1036,4.461,1037,5.136,1038,5.136,1039,4.461]],["title/injectables/FlightsService.html",[210,0.82,1019,2.452]],["body/injectables/FlightsService.html",[0,0.156,1,2.281,3,0.057,4,0.057,5,0.05,7,0.208,9,1.094,17,0.639,18,0.015,19,0.468,28,0.741,30,1.183,32,0.808,42,1.051,51,0.216,55,0.468,59,0.468,60,0.057,64,1.812,67,0.008,68,0.005,69,0.003,75,0.865,79,1.411,97,1.532,99,1.532,101,2.283,105,1.451,135,0.295,155,0.779,157,0.687,173,1.37,176,1.451,210,0.618,211,0.687,213,3.913,214,2.706,220,1.347,222,2.437,228,2.955,237,2.094,238,0.853,239,0.993,243,0.853,244,2.821,247,3.076,248,2.118,249,2.217,250,1.286,251,1.286,252,1.117,253,0.993,257,4.594,258,4.342,259,2.621,260,1.051,261,1.194,262,1.194,263,1.641,265,2.098,283,2.386,287,3.076,371,1.558,376,5.55,377,5.15,786,2.741,789,3.767,793,3.767,794,1.403,796,2.318,831,3.393,851,3.269,986,1.286,991,3.292,1000,4.561,1008,2.93,1015,2.93,1019,1.846,1021,1.403,1022,2.964,1023,1.558,1040,1.558,1041,2.965,1042,2.965,1043,4.403,1044,2.965,1045,2.965,1046,3.79,1047,1.794,1048,1.794,1049,2.575,1050,2.965,1051,1.794,1052,2.965,1053,1.794,1054,4.403,1055,1.794,1056,2.965,1057,1.794,1058,2.965,1059,1.794,1060,1.794,1061,1.794,1062,3.79,1063,1.558,1064,2.575,1065,1.558,1066,4.827,1067,4.403,1068,1.794,1069,1.794,1070,2.965,1071,1.794,1072,2.965,1073,1.794,1074,2.965,1075,1.794,1076,2.965,1077,1.794,1078,2.965,1079,1.794,1080,2.965,1081,1.794,1082,2.965,1083,1.794,1084,2.965,1085,1.794,1086,2.965,1087,1.794,1088,2.965,1089,1.794,1090,1.794,1091,2.965,1092,1.794,1093,2.965,1094,1.794,1095,1.794,1096,1.794,1097,2.575,1098,1.794,1099,2.965,1100,1.794,1101,1.558,1102,1.794,1103,1.794,1104,2.965,1105,2.965,1106,2.965,1107,2.965,1108,1.794,1109,1.794,1110,1.794,1111,1.403,1112,3.79,1113,1.794,1114,1.794,1115,1.794,1116,1.794,1117,2.965,1118,2.965,1119,4.403,1120,2.965,1121,2.965,1122,1.794,1123,1.794,1124,1.794,1125,1.794,1126,2.965,1127,2.965,1128,2.965,1129,1.794,1130,1.794,1131,1.794,1132,1.794,1133,1.794,1134,1.794,1135,1.794,1136,1.794,1137,1.794,1138,2.965,1139,2.965,1140,1.794,1141,1.794,1142,1.794,1143,1.794,1144,1.794,1145,1.794,1146,1.794,1147,1.794,1148,1.794]],["title/injectables/JwtAuthGuard.html",[210,0.82,523,2.18]],["body/injectables/JwtAuthGuard.html",[0,0.318,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,60,0.192,67,0.011,68,0.013,69,0.011,135,0.993,210,1.473,211,2.308,523,3.914,659,3.754,1149,4.013,1150,4.715,1151,5.237,1152,2.62,1153,6.03]],["title/injectables/JwtStrategy.html",[210,0.82,654,2.622]],["body/injectables/JwtStrategy.html",[0,0.246,3,0.148,4,0.148,5,0.13,7,0.54,9,1.255,17,0.733,18,0.015,28,0.803,32,0.876,51,0.263,60,0.148,64,1.758,67,0.008,68,0.011,69,0.008,75,1.758,97,1.758,99,1.358,135,0.766,173,1.572,210,1.255,211,1.782,214,2.558,220,2.738,243,2.867,244,2.114,248,2.022,249,1.856,259,2.323,517,3.53,521,2.271,547,5.97,548,3.338,638,3.639,654,4.011,659,2.898,667,4.042,674,3.913,687,4.712,691,4.042,812,2.898,1152,2.022,1154,3.639,1155,5.234,1156,4.654,1157,4.654,1158,6.027,1159,6.027,1160,4.654,1161,4.042,1162,4.042,1163,3.639,1164,4.654,1165,4.712,1166,3.639,1167,5.226,1168,3.639,1169,3.639,1170,4.042,1171,4.042,1172,4.654,1173,4.654,1174,4.654,1175,4.654]],["title/injectables/LocalAuthGuard.html",[210,0.82,629,2.825]],["body/injectables/LocalAuthGuard.html",[0,0.318,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,60,0.192,67,0.011,68,0.013,69,0.011,135,0.993,210,1.473,211,2.308,629,5.071,659,3.754,1150,4.715,1151,5.237,1152,2.62,1176,5.237,1177,6.03]],["title/injectables/LocalStrategy.html",[210,0.82,655,2.622]],["body/injectables/LocalStrategy.html",[0,0.261,3,0.157,4,0.157,5,0.138,7,0.573,9,1.304,17,0.762,18,0.015,19,1.987,28,0.834,32,0.91,51,0.259,60,0.157,64,1.441,67,0.009,68,0.011,69,0.009,75,1.826,97,1.826,99,1.441,135,0.813,163,2.243,173,1.288,210,1.304,211,1.89,214,2.631,220,2.243,228,2.844,244,2.243,248,2.145,249,1.97,519,4.217,521,2.335,622,3.861,655,4.166,659,3.075,686,4.166,687,4.895,710,3.793,1152,2.145,1155,5.437,1161,4.289,1162,4.289,1163,3.861,1170,4.289,1171,4.289,1178,4.289,1179,4.939,1180,4.939,1181,6.26,1182,4.939,1183,4.289,1184,4.939,1185,4.939]],["title/classes/LoginUserDto.html",[0,0.208,626,2.825]],["body/classes/LoginUserDto.html",[0,0.312,2,1.432,3,0.188,4,0.188,5,0.165,18,0.014,51,0.251,57,1.014,60,0.188,64,1.726,67,0.01,68,0.012,69,0.01,76,2.36,617,3.274,625,3.937,626,5.015,627,4.625,697,3.683,699,3.683,701,4.243,917,4.625,1152,2.57,1186,5.138,1187,3.67,1188,5.138]],["title/guards/RolesGuard.html",[567,2.825,1189,3.08]],["body/guards/RolesGuard.html",[0,0.236,3,0.142,4,0.142,5,0.125,7,0.518,9,1.222,17,0.714,18,0.015,28,0.782,30,1.781,32,0.853,51,0.259,60,0.142,64,1.911,67,0.008,68,0.01,69,0.008,75,1.711,97,1.711,99,1.302,135,0.735,160,2.471,163,2.028,173,1.53,210,1.222,220,2.028,228,2.664,237,2.124,238,2.124,243,2.124,248,1.939,249,1.781,253,2.471,260,2.615,517,3.435,521,1.993,554,3.49,567,4.206,661,3.202,675,6.441,812,2.779,815,4.586,919,3.202,1167,4.586,1168,3.49,1169,3.49,1190,4.464,1191,3.877,1192,7.225,1193,4.464,1194,7.559,1195,4.464,1196,4.464,1197,6.956,1198,4.464,1199,5.865,1200,6.55,1201,3.877,1202,4.586,1203,4.464,1204,4.464,1205,5.865,1206,4.464,1207,4.464,1208,4.464,1209,4.464,1210,4.464,1211,4.464,1212,4.464,1213,4.464,1214,4.464,1215,4.464]],["title/classes/SearchFlightDto.html",[0,0.208,1008,2.622]],["body/classes/SearchFlightDto.html",[0,0.4,2,0.906,3,0.119,4,0.119,5,0.104,7,0.435,8,1.84,9,1.085,17,0.857,18,0.015,19,1.921,20,1.705,26,1.869,30,1.493,32,1.024,51,0.215,56,2.488,57,0.642,60,0.119,62,2.488,67,0.007,68,0.009,69,0.007,164,2.819,293,2.365,298,2.477,303,2.685,731,3.605,732,3.765,734,1.781,751,3.466,752,2.492,753,3.735,765,4.523,766,3.735,771,4.523,788,2.685,803,4.072,804,5.319,807,5.06,808,5.06,810,5.06,820,4.072,821,5.849,838,3.466,851,3.242,861,2.685,863,3.252,889,3.466,1008,3.466,1097,5.2,1216,6.274,1217,6.802,1218,5.987,1219,3.744,1220,3.744,1221,5.207,1222,3.744,1223,4.072,1224,3.744,1225,3.744,1226,5.207,1227,3.744,1228,3.744,1229,3.744,1230,5.207,1231,6.472,1232,3.744,1233,3.744,1234,5.207,1235,5.207,1236,3.744,1237,5.207,1238,5.987,1239,3.744,1240,3.744,1241,3.744,1242,3.744]],["title/classes/Seat.html",[0,0.208,305,1.711]],["body/classes/Seat.html",[0,0.219,2,1.005,3,0.132,4,0.132,5,0.116,7,0.482,8,1.974,17,0.884,18,0.015,20,1.529,21,3.315,26,1.759,30,3.133,31,4.021,32,0.918,42,3.273,51,0.253,52,3.74,53,2.139,54,2.297,55,1.082,56,2.388,57,0.712,58,2.933,59,1.647,60,0.215,62,2.232,63,3.496,64,1.211,67,0.007,68,0.01,69,0.007,293,3.372,296,3.604,298,3.709,300,3.273,301,3.478,303,2.976,305,2.936,306,2.584,854,3.904,855,3.273,873,4.92,900,3.719,1243,2.762,1244,4.15,1245,4.15,1246,4.15,1247,5.869,1248,3.604,1249,4.007,1250,4.15,1251,2.976,1252,4.369,1253,4.369,1254,4.369,1255,4.15,1256,2.762,1257,3.604]],["title/controllers/SeatsController.html",[70,1.239,1258,2.825]],["body/controllers/SeatsController.html",[0,0.231,3,0.139,4,0.139,5,0.122,7,0.508,9,0.911,17,0.84,18,0.015,20,1.059,26,1.785,28,0.583,32,0.636,51,0.27,57,0.75,59,1.141,60,0.139,67,0.008,68,0.01,69,0.008,70,1.376,72,1.376,74,2.296,75,1.688,80,3.82,84,2.183,88,3.038,90,2.421,92,2.888,97,1.276,99,1.276,101,2.537,103,3.038,105,2.215,107,2.421,110,2.421,122,2.723,124,2.421,130,2.888,131,2.421,132,2.421,135,0.72,139,3.038,140,3.038,142,2.888,144,2.888,145,3.203,146,3.038,147,2.888,149,2.183,150,2.888,151,2.888,157,1.674,163,1.987,164,1.546,165,2.183,166,2.183,167,2.183,168,2.296,169,2.183,173,1.141,176,1.674,305,2.998,342,2.911,440,2.723,518,2.911,523,2.421,525,2.911,528,2.911,851,2.723,996,3.137,1149,2.911,1258,4.151,1259,3.799,1260,5.994,1261,4.777,1262,4.374,1263,4.374,1264,4.374,1265,4.374,1266,4.037,1267,3.799,1268,3.137,1269,3.42,1270,4.374,1271,4.374,1272,4.374,1273,4.374]],["title/modules/SeatsModule.html",[186,1.066,538,2.622]],["body/modules/SeatsModule.html",[0,0.271,3,0.164,4,0.164,5,0.143,18,0.015,28,0.684,51,0.271,53,1.966,55,1.34,60,0.164,67,0.009,68,0.011,69,0.009,72,2.019,135,0.846,186,1.895,188,2.137,189,2.137,190,2.333,191,2.333,192,2.137,193,3.179,194,3.179,200,2.915,201,2.333,202,2.231,204,2.564,205,2.696,208,2.843,305,2.231,538,5.196,1256,4.271,1258,5.019,1266,5.042,1267,4.461,1268,3.684,1274,4.461,1275,4.461,1276,4.461,1277,5.136,1278,5.136,1279,4.461]],["title/injectables/SeatsService.html",[210,0.82,1266,2.452]],["body/injectables/SeatsService.html",[0,0.247,3,0.149,4,0.149,5,0.13,7,0.543,9,1.259,17,0.735,18,0.015,28,0.805,32,0.879,51,0.263,55,1.219,59,1.219,60,0.149,67,0.008,68,0.011,69,0.008,75,1.763,97,1.763,99,1.364,101,2.603,105,1.789,135,0.77,157,1.789,173,1.219,176,1.789,210,1.259,211,1.789,213,3.707,214,2.564,220,2.123,222,3.919,228,2.745,237,2.875,238,2.224,239,2.587,243,2.224,244,3.042,247,2.587,248,2.031,249,1.864,258,2.587,259,2.333,265,2.587,305,3.263,1251,3.352,1260,5.817,1261,4.712,1266,3.762,1268,3.352,1269,3.655,1280,4.06,1281,6.697,1282,4.674,1283,4.674,1284,5.249,1285,4.674,1286,4.674,1287,6.043,1288,4.674,1289,4.674,1290,6.043,1291,4.674,1292,4.674,1293,4.674]],["title/classes/Section.html",[0,0.208,298,1.874]],["body/classes/Section.html",[0,0.421,2,1.03,3,0.136,4,0.136,5,0.119,7,0.494,8,2.007,17,0.909,18,0.015,20,1.549,21,3.357,26,1.771,30,3.097,31,3.937,32,0.93,51,0.255,52,3.778,53,2.175,54,2.355,55,1.11,56,2.412,57,0.73,58,2.982,59,1.668,60,0.218,62,2.26,63,3.145,64,1.241,67,0.008,68,0.01,69,0.008,293,2.581,298,3.383,300,2.492,301,3.537,305,3.09,306,2.649,850,5.337,851,4.249,853,5.337,854,3.937,855,3.328,857,4.935,859,4.935,911,2.832,1223,4.442,1294,2.832,1295,4.255,1296,4.255,1297,4.255,1298,4.255,1299,4.255,1300,4.255,1301,3.327,1302,3.052,1303,3.696]],["title/controllers/SectionsController.html",[70,1.239,1304,2.825]],["body/controllers/SectionsController.html",[0,0.151,3,0.091,4,0.091,5,0.08,7,0.331,9,1.188,17,0.954,18,0.015,19,1.339,20,1.479,26,1.89,28,0.886,32,0.888,51,0.245,57,0.489,59,0.744,60,0.091,67,0.005,68,0.008,69,0.005,70,0.898,72,0.898,74,1.498,75,1.248,76,2.275,77,3.578,78,3.34,79,2.035,80,3.156,84,3.049,86,2.506,88,2.246,90,2.841,92,3.556,97,1.664,99,1.782,100,1.899,101,2.62,103,3.591,105,2.805,107,2.368,108,1.899,110,3.156,112,1.776,113,1.899,115,1.776,122,1.776,124,2.368,129,2.506,130,2.136,131,1.579,132,1.579,135,0.47,139,2.694,140,2.694,142,2.846,143,2.506,144,2.846,145,3.156,146,3.207,147,3.201,148,3.34,149,1.424,150,3.201,151,2.846,155,1.24,157,1.092,158,1.498,159,1.498,160,1.579,163,1.296,164,1.008,165,3.049,166,1.424,167,2.562,168,2.694,169,3.049,170,3.007,173,1.593,176,1.965,177,1.671,178,1.776,180,1.776,183,1.776,184,1.899,287,2.506,298,3.486,316,2.478,326,2.047,337,2.478,338,1.899,342,1.899,440,1.776,847,3.803,862,2.047,996,2.047,998,2.478,1017,2.478,1304,3.069,1305,2.478,1306,2.853,1307,2.853,1308,4.279,1309,2.853,1310,2.853,1311,5.571,1312,2.853,1313,4.279,1314,3.716,1315,3.716,1316,2.853,1317,2.853,1318,2.853,1319,2.853,1320,2.853,1321,4.066,1322,2.853,1323,2.853,1324,2.853,1325,2.853,1326,3.196,1327,2.478,1328,3.345,1329,2.853,1330,2.853,1331,2.853,1332,2.853,1333,2.853,1334,2.853,1335,2.853]],["title/modules/SectionsModule.html",[186,1.066,539,2.622]],["body/modules/SectionsModule.html",[0,0.264,3,0.159,4,0.159,5,0.139,18,0.015,28,0.84,51,0.274,53,2.414,55,1.303,60,0.159,67,0.009,68,0.011,69,0.009,72,1.984,135,0.823,186,1.871,188,2.078,189,2.078,190,2.269,191,2.269,192,2.078,193,3.138,194,3.138,200,2.864,201,2.269,202,2.17,204,2.493,205,2.622,208,3.49,298,2.376,305,2.17,539,5.164,862,3.583,911,3.325,1256,4.197,1279,4.338,1302,4.522,1304,4.955,1326,5.023,1327,4.338,1336,4.338,1337,4.338,1338,4.338,1339,4.995,1340,4.995,1341,4.995]],["title/injectables/SectionsService.html",[210,0.82,1326,2.452]],["body/injectables/SectionsService.html",[0,0.246,3,0.102,4,0.102,5,0.089,7,0.372,9,1.334,17,0.78,18,0.015,28,0.854,32,0.972,42,1.875,51,0.248,55,0.835,59,0.835,60,0.102,64,1.602,67,0.006,68,0.008,69,0.006,75,1.359,97,1.869,99,1.869,101,2.692,105,2.102,135,0.527,155,1.391,157,1.225,173,1.573,176,2.102,210,0.97,211,1.225,213,4.227,214,2.923,220,2.116,222,3.819,228,3.275,237,2.868,238,1.523,239,1.772,243,2.216,244,3.134,247,3.337,248,2.385,249,2.19,253,1.772,257,3.916,258,3.701,259,3.009,263,1.772,265,3.039,287,2.728,298,3.658,305,1.391,376,3.34,377,3.1,847,3.754,850,2.503,851,3.418,862,2.296,911,2.13,1251,2.296,1284,4.768,1301,2.503,1311,5.237,1321,4.013,1326,2.9,1328,3.642,1342,2.78,1343,4.657,1344,4.657,1345,5.49,1346,4.657,1347,5.49,1348,3.201,1349,3.201,1350,4.657,1351,4.657,1352,3.201,1353,4.657,1354,3.201,1355,6.029,1356,3.201,1357,4.657,1358,3.201,1359,3.201,1360,3.201,1361,3.201,1362,3.201,1363,3.201,1364,5.49,1365,5.49,1366,6.029,1367,4.657,1368,3.201,1369,3.201,1370,3.201,1371,3.201,1372,3.201]],["title/classes/Ticket.html",[0,0.208,827,2.068]],["body/classes/Ticket.html",[0,0.125,2,0.573,3,0.075,4,0.075,5,0.066,7,0.275,8,1.31,9,1.077,17,0.962,18,0.015,19,1.917,20,1.744,21,3.685,23,2.052,26,1.893,27,2.309,28,0.859,30,3.179,31,3.886,32,1.047,34,2.309,51,0.223,52,4.03,53,1.419,54,1.311,55,0.618,56,2.515,57,0.406,58,3.126,59,1.192,60,0.19,62,2.545,63,3.824,64,0.691,67,0.004,68,0.007,69,0.004,291,2.468,293,1.684,300,3.03,301,3.22,305,2.247,306,2.309,401,2.659,521,2.251,623,1.576,697,2.846,699,2.846,812,2.846,813,2.659,827,2.399,829,2.659,830,2.659,831,3.152,838,3.042,854,4.03,855,3.489,867,4.492,868,3.97,869,3.97,870,3.97,871,3.97,872,5.566,873,4.431,874,4.492,875,3.22,876,4.492,877,4.492,880,3.97,886,3.22,888,2.899,889,2.468,892,3.22,893,2.659,897,4.044,900,3.442,903,4.044,905,2.659,908,3.22,910,1.698,911,1.576,978,3.22,1248,2.056,1249,3.278,1252,2.899,1253,2.899,1254,2.899,1373,1.576,1374,2.368,1375,2.368,1376,3.708,1377,2.368,1378,2.368,1379,2.368,1380,2.368,1381,2.368,1382,2.368,1383,2.368,1384,2.368,1385,2.368,1386,2.368,1387,2.368,1388,2.368,1389,2.368,1390,2.368,1391,2.368,1392,2.368,1393,2.368,1394,2.368,1395,2.368,1396,2.368,1397,2.368,1398,1.851,1399,3.22,1400,3.22,1401,3.22,1402,3.22,1403,2.368,1404,1.698,1405,2.056]],["title/controllers/TicketsController.html",[70,1.239,1406,2.825]],["body/controllers/TicketsController.html",[0,0.141,3,0.085,4,0.085,5,0.075,7,0.311,9,1.15,17,0.946,18,0.015,19,1.288,20,1.439,26,1.902,28,0.867,32,0.864,51,0.247,57,0.459,59,0.699,60,0.085,67,0.005,68,0.007,69,0.005,70,0.843,72,0.843,74,1.406,75,1.19,76,1.627,77,1.569,78,3.235,80,3.289,84,2.966,86,2.389,88,2.898,90,3.289,91,3.075,92,3.499,97,1.611,99,1.734,101,2.577,103,3.522,105,2.917,106,2.715,107,2.734,110,3.057,124,2.258,129,1.569,130,2.036,131,1.483,132,1.483,135,0.441,139,2.593,140,2.593,142,3.125,143,2.389,144,3.125,145,3.057,146,3.119,147,3.125,148,3.235,149,1.337,150,3.125,151,3.125,155,1.164,157,1.025,158,1.406,159,1.406,160,1.483,163,1.217,164,0.946,165,2.966,166,2.756,167,2.966,168,3.119,169,2.966,170,1.569,173,1.793,176,1.891,177,1.569,180,1.668,181,4.29,183,1.668,263,2.258,338,1.783,439,2.094,440,1.668,517,3.667,518,1.783,523,1.483,525,1.783,528,3.675,827,3.794,864,3.7,912,1.921,996,1.921,1149,1.783,1406,2.925,1407,2.326,1408,3.189,1409,2.678,1410,4.079,1411,2.678,1412,2.678,1413,2.678,1414,2.678,1415,2.678,1416,2.678,1417,2.678,1418,5.438,1419,2.678,1420,4.939,1421,2.678,1422,2.678,1423,2.678,1424,2.326,1425,2.326,1426,2.678,1427,2.678,1428,2.678,1429,2.678,1430,2.678,1431,2.678,1432,3.955,1433,2.678,1434,2.678,1435,2.678,1436,3.075,1437,2.326,1438,3.189,1439,2.678,1440,2.678,1441,2.678,1442,2.678,1443,2.678,1444,2.678,1445,2.678,1446,2.678,1447,2.678,1448,2.678]],["title/modules/TicketsModule.html",[186,1.066,540,2.622]],["body/modules/TicketsModule.html",[0,0.223,3,0.135,4,0.135,5,0.118,18,0.015,28,0.907,51,0.283,53,2.605,55,1.101,60,0.135,67,0.007,68,0.01,69,0.007,72,1.778,135,0.695,186,1.725,188,1.757,189,1.757,190,1.918,191,1.918,192,1.757,193,2.894,194,2.894,200,2.567,201,1.918,202,1.834,204,2.821,205,2.216,208,2.337,283,1.918,307,3.762,345,4.545,351,3.667,454,4.545,521,1.435,537,4.545,540,5.325,541,4.276,623,2.81,827,2.216,831,2.009,842,3.028,910,3.028,912,3.028,987,3.762,1039,3.667,1404,4.054,1406,4.57,1436,4.903,1437,3.667,1449,3.667,1450,3.667,1451,3.667,1452,4.222,1453,4.222,1454,4.222,1455,4.222,1456,4.222,1457,4.222,1458,4.222,1459,3.762,1460,4.222,1461,3.667]],["title/injectables/TicketsService.html",[210,0.82,1436,2.452]],["body/injectables/TicketsService.html",[0,0.124,1,1.022,3,0.075,4,0.075,5,0.066,7,0.273,9,1.166,17,0.681,18,0.015,28,0.746,32,0.863,42,2.666,51,0.237,55,0.614,59,0.614,60,0.075,64,2.045,67,0.004,68,0.007,69,0.004,75,1.076,79,1.119,97,1.633,99,1.633,101,2.76,105,2.461,135,0.387,155,1.022,157,0.9,173,1.46,176,2.461,210,0.768,211,0.9,213,4.024,214,2.783,220,1.676,222,3.934,228,3.073,237,3.145,238,1.119,239,1.302,243,2.452,244,3.334,247,3.559,248,2.794,249,2.565,257,4.397,258,4.155,259,3.377,263,1.302,265,3.559,283,2.921,286,1.839,287,2.666,304,1.687,360,3.953,372,2.043,374,3.204,376,4.946,377,4.59,383,3.204,521,2.299,623,1.566,679,4.856,710,1.936,789,1.687,793,1.687,827,3.62,831,3.334,842,1.687,864,3.209,873,1.464,910,1.687,912,1.687,986,1.687,1049,3.953,1065,2.043,1066,3.204,1101,2.043,1111,1.839,1398,1.839,1408,2.885,1418,4.862,1432,3.43,1436,2.297,1438,2.885,1462,2.043,1463,3.689,1464,5.154,1465,4.552,1466,4.552,1467,4.552,1468,2.352,1469,3.953,1470,2.352,1471,3.689,1472,3.689,1473,2.352,1474,2.352,1475,2.352,1476,6.612,1477,2.352,1478,2.352,1479,2.352,1480,2.352,1481,2.352,1482,1.687,1483,2.352,1484,2.352,1485,3.689,1486,3.204,1487,2.352,1488,2.352,1489,3.689,1490,2.352,1491,2.043,1492,3.689,1493,3.689,1494,2.352,1495,2.043,1496,3.689,1497,2.352,1498,2.352,1499,2.352,1500,2.352]],["title/classes/UpdateAirlineDto.html",[0,0.208,123,2.622]],["body/classes/UpdateAirlineDto.html",[0,0.318,2,1.46,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,57,1.034,60,0.192,67,0.011,68,0.013,69,0.011,76,2.405,82,3.754,123,4.706,156,4.715,738,4.715,1152,2.62,1187,3.165,1501,5.237,1502,6.03]],["title/classes/UpdateAirplaneDto.html",[0,0.208,328,2.622]],["body/classes/UpdateAirplaneDto.html",[0,0.318,2,1.46,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,57,1.034,60,0.192,67,0.011,68,0.013,69,0.011,76,2.405,313,3.754,328,4.706,334,4.715,758,4.715,1152,2.62,1187,3.165,1503,5.237,1504,6.03]],["title/classes/UpdateAirportDto.html",[0,0.208,438,2.622]],["body/classes/UpdateAirportDto.html",[0,0.318,2,1.46,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,57,1.034,60,0.192,67,0.011,68,0.013,69,0.011,76,2.405,426,3.754,438,4.706,446,4.715,768,4.715,1152,2.62,1187,3.165,1505,5.237,1506,6.03]],["title/classes/UpdateFlightDto.html",[0,0.208,1015,2.622]],["body/classes/UpdateFlightDto.html",[0,0.318,2,1.46,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,57,1.034,60,0.192,67,0.011,68,0.013,69,0.011,76,2.405,786,3.754,788,4.325,1015,4.706,1022,4.715,1152,2.62,1187,3.165,1507,5.237,1508,6.03]],["title/classes/UpdateSeatDto.html",[0,0.208,1261,2.622]],["body/classes/UpdateSeatDto.html",[0,0.39,2,1.276,3,0.168,4,0.168,5,0.147,7,0.612,8,2.304,17,0.642,18,0.015,20,1.276,26,1.579,32,0.766,51,0.266,56,2.304,57,0.904,60,0.168,62,1.863,67,0.009,68,0.012,69,0.009,76,2.103,164,2.502,731,3.255,734,2.508,844,3.782,846,4.123,854,3.61,855,3.82,861,3.782,873,5.01,899,4.579,900,4.341,916,4.579,1152,2.291,1187,2.767,1261,4.341,1268,3.782,1269,4.123,1509,5.664,1510,5.273,1511,5.273]],["title/classes/UpdateSectionDto.html",[0,0.208,1321,2.622]],["body/classes/UpdateSectionDto.html",[0,0.318,2,1.46,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,57,1.034,60,0.192,67,0.011,68,0.013,69,0.011,76,2.405,847,3.754,849,4.715,1152,2.62,1187,3.165,1321,4.706,1328,4.715,1512,5.237,1513,6.03]],["title/classes/UpdateTicketDto.html",[0,0.208,1432,2.622]],["body/classes/UpdateTicketDto.html",[0,0.318,2,1.46,3,0.192,4,0.192,5,0.168,18,0.014,51,0.254,57,1.034,60,0.192,67,0.011,68,0.013,69,0.011,76,2.405,864,3.754,866,4.715,1152,2.62,1187,3.165,1432,4.706,1438,4.715,1514,5.237,1515,6.03]],["title/classes/UpdateUserDataDto.html",[0,0.208,1516,2.622]],["body/classes/UpdateUserDataDto.html",[0,0.313,2,1.436,3,0.189,4,0.189,5,0.166,18,0.014,51,0.251,57,1.017,60,0.189,64,1.731,67,0.01,68,0.012,69,0.01,76,2.366,521,2.015,617,3.283,625,3.948,710,3.113,1152,2.577,1186,5.152,1187,3.676,1188,5.152,1516,4.661,1517,5.152,1518,5.152]],["title/classes/User.html",[0,0.208,521,1.338]],["body/classes/User.html",[0,0.182,2,0.834,3,0.11,4,0.11,5,0.096,7,0.4,8,1.734,17,0.917,18,0.015,19,1.881,20,1.708,21,3.702,26,1.871,28,0.654,30,3.194,31,3.904,32,1.025,38,3.267,51,0.237,52,3.991,53,1.879,54,1.906,55,0.898,56,2.548,57,0.59,58,2.576,59,1.492,60,0.199,62,2.492,63,3.794,64,1.005,67,0.006,68,0.009,69,0.006,291,3.267,293,2.598,300,2.875,301,3.056,306,2.144,521,2.397,686,3.807,695,5.503,697,3.561,699,3.561,701,4.103,710,3.273,729,3.838,827,3.46,854,3.649,855,2.875,889,3.267,893,3.521,905,3.521,919,3.521,920,2.99,928,4.263,929,4.263,1249,3.521,1408,5.359,1459,2.292,1482,2.469,1519,2.292,1520,3.443,1521,3.443,1522,3.443,1523,3.443,1524,3.443,1525,3.443,1526,3.443,1527,3.443,1528,3.443,1529,3.443,1530,3.443,1531,3.443,1532,3.443,1533,4.263,1534,3.443,1535,2.99]],["title/controllers/UsersController.html",[70,1.239,1536,2.825]],["body/controllers/UsersController.html",[0,0.15,3,0.091,4,0.091,5,0.08,7,0.331,9,1.187,17,0.936,18,0.015,19,0.743,20,1.478,26,1.897,28,0.814,32,0.888,51,0.251,57,0.489,59,0.743,60,0.091,67,0.005,68,0.008,69,0.005,70,0.897,72,0.897,74,1.496,75,1.247,77,3.755,78,3.338,79,2.033,80,2.366,84,3.047,88,2.991,89,1.897,90,2.366,91,1.774,92,3.555,97,1.663,99,1.781,101,2.095,103,3.739,105,2.181,107,2.366,110,3.154,115,1.774,124,2.366,125,2.228,130,2.56,131,1.577,132,1.577,135,0.469,139,2.692,140,2.692,142,3.2,144,2.56,145,3.154,146,3.365,147,3.2,148,2.504,149,1.422,150,3.2,151,3.2,157,1.091,158,1.496,159,1.496,160,1.577,163,1.294,164,1.007,165,3.047,166,2.56,167,3.047,168,2.244,169,3.047,170,2.504,173,1.593,176,1.963,177,1.669,178,1.774,440,1.774,514,2.475,517,3.755,518,1.897,521,2.563,523,1.577,525,1.897,528,3.414,621,4.904,674,2.839,710,1.496,717,4.064,1149,1.897,1314,2.475,1315,2.475,1424,2.475,1425,2.475,1516,4.064,1536,3.066,1537,2.475,1538,3.712,1539,4.274,1540,4.274,1541,2.85,1542,4.274,1543,2.85,1544,4.274,1545,4.274,1546,2.85,1547,2.85,1548,2.85,1549,2.85,1550,2.85,1551,2.85,1552,2.85,1553,2.85,1554,2.85,1555,2.85,1556,2.85,1557,2.85,1558,2.85,1559,2.85,1560,2.85,1561,2.85,1562,2.85,1563,2.475,1564,2.228,1565,2.475,1566,2.475,1567,2.475,1568,2.85,1569,2.85,1570,2.85,1571,2.85,1572,2.85,1573,2.85,1574,2.85,1575,2.85,1576,2.85,1577,2.85,1578,2.85,1579,2.85]],["title/modules/UsersModule.html",[186,1.066,541,2.307]],["body/modules/UsersModule.html",[0,0.265,3,0.16,4,0.16,5,0.14,18,0.015,28,0.67,51,0.275,53,1.925,55,1.312,60,0.16,67,0.009,68,0.011,69,0.009,72,1.993,135,0.828,186,1.876,188,2.092,189,2.092,190,2.285,191,2.285,192,2.092,193,3.148,194,3.148,200,2.877,201,2.285,202,2.185,204,2.51,205,2.64,208,2.784,521,1.709,536,3.942,541,4.551,657,5.5,674,4.47,1459,4.215,1461,4.368,1536,4.971,1563,4.368,1564,3.933,1580,4.368,1581,4.368,1582,4.368,1583,5.03,1584,5.03,1585,5.03]],["title/injectables/UsersService.html",[210,0.82,674,2.18]],["body/injectables/UsersService.html",[0,0.134,3,0.081,4,0.081,5,0.071,7,0.294,9,1.329,17,0.777,18,0.015,19,1.244,28,0.85,32,0.958,51,0.237,55,0.661,59,0.661,60,0.081,64,1.923,67,0.004,68,0.007,69,0.004,75,1.14,79,1.205,97,1.862,99,1.862,101,2.657,105,2.053,135,0.417,155,1.1,157,0.969,173,1.665,176,2.053,210,0.814,211,0.969,213,4.25,214,2.939,220,1.15,222,2.968,228,3.319,237,2.913,238,1.205,239,1.402,243,1.205,244,3.381,247,3.532,248,2.772,249,2.629,252,2.97,253,1.402,257,3.587,258,3.389,259,3.561,260,1.483,261,1.685,262,1.685,263,1.402,265,2.968,521,2.661,617,2.968,621,4.727,625,1.685,674,2.163,679,4.788,686,3.569,688,3.055,692,2.199,698,2.199,700,2.199,702,2.199,705,3.393,706,2.199,707,3.393,710,3.214,712,3.393,714,4.143,717,3.569,1111,1.98,1469,3.393,1482,1.816,1486,5.318,1491,3.393,1495,4.143,1516,3.569,1538,3.393,1564,1.98,1565,2.199,1566,2.199,1567,2.199,1586,2.199,1587,4.77,1588,3.907,1589,3.907,1590,5.363,1591,3.907,1592,3.907,1593,4.77,1594,2.532,1595,2.532,1596,2.532,1597,2.532,1598,3.907,1599,2.532,1600,3.907,1601,2.532,1602,2.532,1603,3.907,1604,2.532,1605,3.907,1606,2.532,1607,2.532,1608,2.532,1609,2.532,1610,2.532,1611,4.77,1612,3.907,1613,3.907,1614,3.907,1615,3.907,1616,3.907,1617,2.532,1618,3.907,1619,2.532,1620,2.532,1621,2.532,1622,2.532,1623,2.532,1624,2.532,1625,2.532,1626,2.532]],["title/coverage.html",[1627,4.684]],["body/coverage.html",[0,0.42,1,1.235,5,0.079,6,3.06,17,0.346,18,0.015,65,2.039,67,0.005,68,0.008,69,0.005,70,2.24,71,2.039,73,2.469,82,1.77,123,1.892,152,1.77,158,1.492,159,2.239,186,0.77,192,1.183,210,1.57,212,2.469,223,1.77,249,1.134,283,1.291,284,3.06,298,1.352,305,1.235,307,1.892,309,2.039,310,2.469,313,1.77,328,1.892,331,1.77,352,2.469,385,1.492,386,3.06,420,2.039,422,2.039,423,2.469,426,1.77,438,1.892,443,1.77,461,2.469,507,2.039,508,2.469,519,1.573,521,1.74,523,1.573,542,1.892,567,2.039,592,2.469,593,2.039,594,2.469,617,1.573,624,2.039,626,2.039,627,2.222,629,2.039,654,1.892,655,1.892,671,2.469,674,1.573,717,1.892,718,2.469,719,2.469,737,2.469,738,3.336,757,2.469,758,3.336,767,2.469,768,3.336,786,1.77,787,2.469,788,3.673,827,1.492,831,1.352,844,2.039,845,2.469,846,3.336,847,1.77,848,2.469,849,3.336,864,1.77,865,2.469,866,3.336,917,3.336,939,2.222,966,3.06,987,1.892,989,2.039,990,2.469,1008,1.892,1015,1.892,1019,1.77,1040,2.469,1149,1.892,1150,3.336,1154,3.336,1165,2.222,1166,2.222,1176,2.469,1178,2.469,1189,2.222,1191,2.469,1202,2.222,1216,2.469,1243,2.839,1256,1.892,1258,2.039,1259,2.469,1261,1.892,1266,1.77,1280,2.469,1294,2.839,1302,2.039,1304,2.039,1305,2.469,1321,1.892,1326,1.77,1342,2.469,1373,2.839,1404,2.039,1406,2.039,1407,2.469,1432,1.892,1436,1.77,1459,1.892,1462,2.469,1501,2.469,1503,2.469,1505,2.469,1507,2.469,1509,2.469,1512,2.469,1514,2.469,1516,1.892,1517,2.469,1518,2.469,1519,2.839,1536,2.039,1537,2.469,1586,2.469,1627,2.469,1628,2.842,1629,2.842,1630,2.842,1631,8.295,1632,6.833,1633,6.642,1634,5.691,1635,7.912,1636,7.322,1637,6.405,1638,4.266,1639,5.121,1640,3.705,1641,6.405,1642,4.266,1643,3.336,1644,4.266,1645,2.842,1646,2.842,1647,2.842]],["title/dependencies.html",[189,1.973,1648,3.281]],["body/dependencies.html",[0,0.323,18,0.015,55,1.243,57,0.817,59,1.243,67,0.008,68,0.011,69,0.008,130,2.379,135,0.785,137,4.139,138,4.785,189,1.983,548,3.418,551,4.139,554,3.727,572,4.139,638,3.727,659,2.967,661,3.418,688,3.727,734,2.267,948,4.139,953,4.139,1063,4.139,1064,4.139,1163,5.285,1183,4.139,1201,4.139,1649,4.766,1650,6.76,1651,4.766,1652,4.766,1653,4.766,1654,4.766,1655,4.766,1656,4.766,1657,4.766,1658,4.766,1659,4.766,1660,4.766,1661,4.766,1662,6.76,1663,4.766,1664,4.766,1665,6.12,1666,4.766,1667,4.766,1668,4.766,1669,4.766,1670,4.766,1671,4.766,1672,4.766,1673,4.766,1674,4.766,1675,4.766,1676,4.766,1677,4.766,1678,4.766,1679,4.766,1680,4.766,1681,4.766,1682,4.766,1683,4.766,1684,4.766,1685,4.766,1686,4.766,1687,4.766,1688,4.766,1689,4.766,1690,4.766,1691,4.766,1692,4.766,1693,4.766,1694,4.766,1695,4.766,1696,4.766,1697,4.766,1698,4.766]],["title/miscellaneous/enumerations.html",[1699,1.816,1700,4.119]],["body/miscellaneous/enumerations.html",[0,0.328,1,2.7,7,0.567,17,0.756,18,0.015,67,0.009,68,0.011,69,0.009,240,4.86,521,2.112,695,4.458,853,4.86,872,4.86,873,4.481,897,4.86,900,4.79,903,4.86,939,3.818,1223,4.86,1243,3.25,1247,5.398,1252,5.627,1253,5.627,1254,5.627,1294,3.25,1373,3.25,1399,5.398,1400,5.398,1401,5.398,1402,5.398,1519,3.25,1533,5.398,1699,2.703,1700,4.241,1701,3.818,1702,4.883,1703,3.818,1704,5.346,1705,3.818,1706,7.155]],["title/miscellaneous/functions.html",[1699,1.816,1707,4.119]],["body/miscellaneous/functions.html",[7,0.732,18,0.013,67,0.011,68,0.013,69,0.011,192,3.18,1643,4.933,1699,3.492,1707,5.479,1708,5.479]],["title/index.html",[7,0.457,1709,3.421]],["body/index.html",[2,0.861,18,0.015,42,2.082,67,0.006,68,0.009,69,0.006,72,1.119,152,4.432,186,0.962,187,4.839,188,1.479,189,1.479,190,1.615,191,1.615,192,1.479,193,1.615,194,1.615,195,3.088,196,3.088,197,3.088,198,3.088,199,4.432,200,2.281,201,1.615,202,1.544,211,1.361,223,4.432,331,4.432,345,4.432,346,3.088,347,3.088,348,3.088,443,4.432,454,4.432,455,3.088,456,3.088,457,3.088,519,3.94,532,5.791,533,3.088,534,3.088,535,3.088,536,4.666,537,4.432,538,4.61,539,4.61,540,5.17,541,4.17,542,3.875,651,3.088,652,3.088,653,3.088,654,3.875,655,3.875,674,3.94,934,3.088,935,3.088,936,3.088,1019,4.432,1034,3.088,1035,3.088,1036,3.088,1189,2.78,1266,4.432,1274,3.088,1275,3.088,1276,3.088,1326,4.432,1336,3.088,1337,3.088,1338,3.088,1436,4.432,1449,3.088,1450,3.088,1451,3.088,1580,3.088,1581,3.088,1582,3.088,1709,3.088,1710,3.555,1711,3.555,1712,3.555,1713,3.555]],["title/modules.html",[188,2.244]],["body/modules.html",[18,0.012,67,0.01,68,0.012,69,0.01,187,3.687,188,2.305,199,3.449,345,3.449,454,3.449,532,3.973,536,3.449,537,3.449,538,3.687,539,3.687,540,3.687,541,3.245,1714,8.145,1715,8.145,1716,8.145,1717,8.145]],["title/miscellaneous/typealiases.html",[1699,1.816,1718,4.742]],["body/miscellaneous/typealiases.html",[6,4.186,7,0.678,17,0.71,18,0.012,61,5.423,67,0.01,68,0.012,69,0.01,284,4.186,304,4.975,386,4.186,418,5.423,966,4.186,986,4.975,1243,3.884,1251,4.975,1294,3.884,1301,5.423,1373,3.884,1398,5.423,1482,4.975,1519,3.884,1699,3.231,1701,4.563,1703,4.563,1704,4.563,1705,4.563,1719,5.836,1720,5.069,1721,5.069,1722,5.069,1723,5.069]],["title/miscellaneous/variables.html",[1699,1.816,1724,4.119]],["body/miscellaneous/variables.html",[6,3.403,7,0.551,17,0.743,18,0.015,19,1.592,65,4.377,66,4.121,67,0.008,68,0.011,69,0.008,158,3.203,159,2.491,173,1.238,186,1.652,284,3.403,307,4.062,308,4.121,386,3.403,420,4.377,421,4.121,517,3.574,695,4.838,812,2.954,966,3.403,987,4.062,988,4.121,1154,3.71,1165,4.772,1166,3.71,1167,5.274,1168,3.71,1169,3.71,1202,4.772,1243,3.158,1249,5.714,1256,4.062,1257,4.121,1294,3.158,1302,4.377,1303,4.121,1373,3.158,1404,4.377,1405,4.121,1459,4.062,1519,3.158,1535,4.121,1640,5.859,1643,3.71,1699,2.627,1701,3.71,1703,3.71,1704,3.71,1705,3.71,1706,6.919,1708,4.121,1720,4.121,1721,4.121,1722,4.121,1723,4.121,1724,4.121,1725,4.745,1726,6.103,1727,4.745]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":1631,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":1649,"title":{},"body":{"dependencies.html":{}}}],["0.1.13",{"_index":1691,"title":{},"body":{"dependencies.html":{}}}],["0.13.1",{"_index":1672,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1671,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":1686,"title":{},"body":{"dependencies.html":{}}}],["0.5",{"_index":833,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0.6.3",{"_index":1651,"title":{},"body":{"dependencies.html":{}}}],["0.7",{"_index":826,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["0/1",{"_index":1635,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":1638,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":1642,"title":{},"body":{"coverage.html":{}}}],["0/15",{"_index":1644,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1639,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1641,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1637,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1632,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1633,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1634,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":1645,"title":{},"body":{"coverage.html":{}}}],["05",{"_index":808,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["08",{"_index":876,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["1",{"_index":42,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"index.html":{}}}],["1.0.0",{"_index":1688,"title":{},"body":{"dependencies.html":{}}}],["1.1.4",{"_index":1660,"title":{},"body":{"dependencies.html":{}}}],["1.11.0",{"_index":1680,"title":{},"body":{"dependencies.html":{}}}],["1.19.0",{"_index":1667,"title":{},"body":{"dependencies.html":{}}}],["1.4.2",{"_index":1663,"title":{},"body":{"dependencies.html":{}}}],["1.4.5",{"_index":1665,"title":{},"body":{"dependencies.html":{}}}],["1.7.4",{"_index":1674,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":1711,"title":{},"body":{"index.html":{}}}],["11",{"_index":1710,"title":{},"body":{"index.html":{}}}],["15",{"_index":1712,"title":{},"body":{"index.html":{}}}],["15t15:35:00.000z",{"_index":1230,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["16t15:35:00.000z",{"_index":823,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["1700",{"_index":857,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["18t15:35:00.000z",{"_index":1234,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["1992",{"_index":43,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["2.1.4",{"_index":1658,"title":{},"body":{"dependencies.html":{}}}],["2.29.1",{"_index":1684,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":836,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["2000",{"_index":875,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2016",{"_index":908,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["2021",{"_index":807,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["21t09:15:00.000z",{"_index":809,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["23",{"_index":813,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["27",{"_index":1713,"title":{},"body":{"index.html":{}}}],["3",{"_index":1226,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["3.0.2",{"_index":1693,"title":{},"body":{"dependencies.html":{}}}],["3.4.3",{"_index":1669,"title":{},"body":{"dependencies.html":{}}}],["31t00:00:00.000z",{"_index":877,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["380951234567",{"_index":928,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["4",{"_index":785,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4)@apiproperty({example",{"_index":780,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["4.0.0",{"_index":1687,"title":{},"body":{"dependencies.html":{}}}],["4.1.6",{"_index":1697,"title":{},"body":{"dependencies.html":{}}}],["4.6.0",{"_index":1683,"title":{},"body":{"dependencies.html":{}}}],["4.8.0",{"_index":1659,"title":{},"body":{"dependencies.html":{}}}],["45",{"_index":294,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["5.0.1",{"_index":1666,"title":{},"body":{"dependencies.html":{}}}],["5.12.9",{"_index":1685,"title":{},"body":{"dependencies.html":{}}}],["6.4.6",{"_index":1681,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":1694,"title":{},"body":{"dependencies.html":{}}}],["7.0.3",{"_index":1678,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":1656,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":1652,"title":{},"body":{"dependencies.html":{}}}],["7.2.4",{"_index":1655,"title":{},"body":{"dependencies.html":{}}}],["7.6.15",{"_index":1650,"title":{},"body":{"dependencies.html":{}}}],["72",{"_index":290,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["8,12",{"_index":736,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8,12}$')@apiproperty({example",{"_index":726,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["8.3.2",{"_index":1698,"title":{},"body":{"dependencies.html":{}}}],["9",{"_index":725,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{}}}],["9)@apiproperty({example",{"_index":885,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["90",{"_index":859,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{}}}],["9065",{"_index":830,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["__v",{"_index":258,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["a.airplane.amountofseat",{"_index":1116,"title":{},"body":{"injectables/FlightsService.html":{}}}],["a.airplane.sections.foreach((s",{"_index":1118,"title":{},"body":{"injectables/FlightsService.html":{}}}],["a1b2@c3d",{"_index":729,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["add(3",{"_index":1104,"title":{},"body":{"injectables/FlightsService.html":{}}}],["admin",{"_index":1533,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["adult",{"_index":903,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["aerospatiale/alenia",{"_index":288,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airline",{"_index":1,"title":{"classes/Airline.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["airline'})@apicreatedresponse({description",{"_index":85,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@apiokresponse({description",{"_index":102,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline'})@prop({required",{"_index":37,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({trim",{"_index":45,"title":{},"body":{"classes/Airline.html":{}}}],["airline'})@prop({unique",{"_index":29,"title":{},"body":{"classes/Airline.html":{}}}],["airline.airlinenameeng",{"_index":268,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.airlinenameru",{"_index":270,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptioneng",{"_index":272,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionru",{"_index":274,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.descriptionua",{"_index":276,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.dto",{"_index":156,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{}}}],["airline.dto.ts",{"_index":738,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["airline.dto.ts:12",{"_index":743,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:21",{"_index":740,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:30",{"_index":741,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:40",{"_index":748,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:50",{"_index":745,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:60",{"_index":746,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.dto.ts:71",{"_index":750,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["airline.logo",{"_index":280,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airline.name",{"_index":209,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airline.save",{"_index":281,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedocument",{"_index":61,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"miscellaneous/typealiases.html":{}}}],["airlinedto",{"_index":98,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameeng",{"_index":267,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameru",{"_index":269,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.airlinenameua",{"_index":246,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptioneng",{"_index":271,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionru",{"_index":273,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinedto.descriptionua",{"_index":275,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlineid",{"_index":231,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinemodel",{"_index":225,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["airlinenameeng",{"_index":10,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameru",{"_index":11,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["airlinenameua",{"_index":12,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["airlines",{"_index":25,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["airlines'})@apiokresponse({description",{"_index":111,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airlines.controller",{"_index":206,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["airlines.service",{"_index":153,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{}}}],["airlines/airlines.module",{"_index":560,"title":{},"body":{"modules/AppModule.html":{}}}],["airlineschema",{"_index":65,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airlinescontroller",{"_index":71,"title":{"controllers/AirlinesController.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"coverage.html":{}}}],["airlinesmodule",{"_index":187,"title":{"modules/AirlinesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["airlinesservice",{"_index":152,"title":{"injectables/AirlinesService.html":{}},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"coverage.html":{},"index.html":{}}}],["airline})@apibadrequestresponse({description",{"_index":87,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@apiparam({name",{"_index":104,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airline})@apitoomanyrequestsresponse({description",{"_index":118,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["airplane",{"_index":283,"title":{"classes/Airplane.html":{}},"body":{"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["airplane'})@apicreatedresponse({description",{"_index":314,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane'})@apiokresponse({description",{"_index":320,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane.airplanename",{"_index":382,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplane.amountofseat",{"_index":1492,"title":{},"body":{"injectables/TicketsService.html":{}}}],["airplane.dto",{"_index":334,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{}}}],["airplane.dto.ts",{"_index":758,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["airplane.dto.ts:21",{"_index":759,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:26",{"_index":761,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.dto.ts:35",{"_index":763,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["airplane.name",{"_index":351,"title":{},"body":{"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{}}}],["airplane.save",{"_index":383,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanedocument",{"_index":304,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["airplanedto",{"_index":319,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanedto.airplanename",{"_index":381,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplaneid",{"_index":365,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["airplanemodel",{"_index":360,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["airplanename",{"_index":285,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["airplanes",{"_index":311,"title":{},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{}}}],["airplanes'})@apiokresponse({description",{"_index":323,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplanes.controller",{"_index":350,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["airplanes.service",{"_index":332,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{}}}],["airplanes/airplanes.module",{"_index":564,"title":{},"body":{"modules/AppModule.html":{}}}],["airplaneschema",{"_index":307,"title":{},"body":{"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airplanescontroller",{"_index":309,"title":{"controllers/AirplanesController.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"coverage.html":{}}}],["airplanesmodule",{"_index":345,"title":{"modules/AirplanesModule.html":{}},"body":{"modules/AirplanesModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"index.html":{},"modules.html":{}}}],["airplanesservice",{"_index":331,"title":{"injectables/AirplanesService.html":{}},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"coverage.html":{},"index.html":{}}}],["airplane})@apibadrequestresponse({description",{"_index":315,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airplane})@apiparam({name",{"_index":321,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["airport",{"_index":385,"title":{"classes/Airport.html":{}},"body":{"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"coverage.html":{}}}],["airport'})@apicreatedresponse({description",{"_index":427,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@apiokresponse({description",{"_index":432,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport'})@prop({required",{"_index":402,"title":{},"body":{"classes/Airport.html":{},"classes/Flight.html":{}}}],["airport'})@prop({trim",{"_index":398,"title":{},"body":{"classes/Airport.html":{}}}],["airport.airportcountryeng",{"_index":488,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryru",{"_index":492,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportcountryua",{"_index":490,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameeng",{"_index":494,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameru",{"_index":498,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airportnameua",{"_index":496,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttowneng",{"_index":500,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownru",{"_index":504,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.airporttownua",{"_index":502,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.dto",{"_index":446,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{}}}],["airport.dto.ts",{"_index":768,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["airport.dto.ts:16",{"_index":775,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:25",{"_index":773,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:34",{"_index":774,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:41",{"_index":781,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:50",{"_index":772,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:59",{"_index":769,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:68",{"_index":770,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:77",{"_index":778,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:86",{"_index":776,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.dto.ts:95",{"_index":777,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["airport.iata",{"_index":486,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airport.name",{"_index":460,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airport.save",{"_index":505,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportcountryeng",{"_index":387,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryru",{"_index":388,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportcountryua",{"_index":389,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportdocument",{"_index":418,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"miscellaneous/typealiases.html":{}}}],["airportdto",{"_index":431,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airportdto.airportcountryeng",{"_index":487,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryru",{"_index":491,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportcountryua",{"_index":489,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameeng",{"_index":493,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameru",{"_index":497,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airportnameua",{"_index":495,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttowneng",{"_index":499,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownru",{"_index":503,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.airporttownua",{"_index":501,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportdto.iata",{"_index":482,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportid",{"_index":474,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportmodel",{"_index":469,"title":{},"body":{"injectables/AirportsService.html":{}}}],["airportnameeng",{"_index":390,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameru",{"_index":391,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airportnameua",{"_index":392,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airports",{"_index":424,"title":{},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{}}}],["airports'})@apiokresponse({description",{"_index":435,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airports.controller",{"_index":459,"title":{},"body":{"modules/AirportsModule.html":{}}}],["airports.service",{"_index":444,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{}}}],["airports/airports.module",{"_index":559,"title":{},"body":{"modules/AppModule.html":{}}}],["airportschema",{"_index":420,"title":{},"body":{"classes/Airport.html":{},"modules/AirportsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["airportscontroller",{"_index":422,"title":{"controllers/AirportsController.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"coverage.html":{}}}],["airportsmodule",{"_index":454,"title":{"modules/AirportsModule.html":{}},"body":{"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/TicketsModule.html":{},"index.html":{},"modules.html":{}}}],["airportsservice",{"_index":443,"title":{"injectables/AirportsService.html":{}},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"coverage.html":{},"index.html":{}}}],["airporttowneng",{"_index":393,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownru",{"_index":394,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airporttownua",{"_index":395,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["airport})@apibadrequestresponse({description",{"_index":428,"title":{},"body":{"controllers/AirportsController.html":{}}}],["airport})@apiparam({name",{"_index":433,"title":{},"body":{"controllers/AirportsController.html":{}}}],["aliases",{"_index":1719,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":250,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["amount",{"_index":295,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{}}}],["amountofseat",{"_index":286,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"injectables/TicketsService.html":{}}}],["apibadrequestresponse",{"_index":139,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apibody",{"_index":140,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiconsumes",{"_index":141,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apiconsumes('multipart/form",{"_index":172,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apicookieauth",{"_index":142,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apicreatedresponse",{"_index":143,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["apiforbiddenresponse",{"_index":144,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apinotfoundresponse",{"_index":145,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiokresponse",{"_index":146,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation",{"_index":147,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apioperation({summary",{"_index":84,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiparam",{"_index":148,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiproperty",{"_index":56,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["apiproperty({example",{"_index":21,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["apiproperty({type",{"_index":749,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["apipropertyoptional",{"_index":838,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{}}}],["apipropertyoptional({example",{"_index":978,"title":{},"body":{"classes/Flight.html":{},"classes/Ticket.html":{}}}],["apiresponse",{"_index":1325,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags",{"_index":149,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apitags('airlines",{"_index":161,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["apitags('airplanes",{"_index":335,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["apitags('airports",{"_index":447,"title":{},"body":{"controllers/AirportsController.html":{}}}],["apitags('app",{"_index":526,"title":{},"body":{"controllers/AppController.html":{}}}],["apitags('authentication",{"_index":631,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('flights",{"_index":1024,"title":{},"body":{"controllers/FlightsController.html":{}}}],["apitags('seats",{"_index":1270,"title":{},"body":{"controllers/SeatsController.html":{}}}],["apitags('sections",{"_index":1329,"title":{},"body":{"controllers/SectionsController.html":{}}}],["apitags('tickets",{"_index":1439,"title":{},"body":{"controllers/TicketsController.html":{}}}],["apitags('users",{"_index":1568,"title":{},"body":{"controllers/UsersController.html":{}}}],["apitoomanyrequestsresponse",{"_index":150,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["apiunauthorizedresponse",{"_index":151,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["app.controller",{"_index":556,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":555,"title":{},"body":{"modules/AppModule.html":{}}}],["app_guard",{"_index":552,"title":{},"body":{"modules/AppModule.html":{}}}],["app_interceptor",{"_index":553,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":507,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":532,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appservice",{"_index":542,"title":{"injectables/AppService.html":{}},"body":{"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"index.html":{}}}],["arr",{"_index":1113,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arr.push(a",{"_index":1121,"title":{},"body":{"injectables/FlightsService.html":{}}}],["array.from(new",{"_index":1124,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arraynotempty",{"_index":1237,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["arrayunique",{"_index":764,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["arrival",{"_index":804,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["arrivalairport",{"_index":789,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["arrivalairport.airportnameeng",{"_index":1141,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameru",{"_index":1142,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airportnameua",{"_index":1140,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttowneng",{"_index":1145,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownru",{"_index":1146,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.airporttownua",{"_index":1144,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivalairport.iata",{"_index":1143,"title":{},"body":{"injectables/FlightsService.html":{}}}],["arrivaltime",{"_index":790,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["async",{"_index":214,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["atr",{"_index":289,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["auth",{"_index":595,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":662,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.decorator",{"_index":160,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"guards/RolesGuard.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.decorator.ts",{"_index":1640,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth.guard",{"_index":525,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["auth.guard.ts",{"_index":1150,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["auth.service",{"_index":622,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{}}}],["auth/auth.module",{"_index":558,"title":{},"body":{"modules/AppModule.html":{}}}],["auth/auth.service",{"_index":520,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/jwt",{"_index":524,"title":{},"body":{"controllers/AppController.html":{}}}],["auth/guards/roles.guard",{"_index":568,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":593,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authguard",{"_index":1151,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/LocalAuthGuard.html":{}}}],["authguard('jwt",{"_index":1153,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('local",{"_index":1177,"title":{},"body":{"injectables/LocalAuthGuard.html":{}}}],["authmodule",{"_index":536,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["authservice",{"_index":519,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"index.html":{}}}],["await",{"_index":244,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["b2a3#d1c",{"_index":727,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["baby",{"_index":1401,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["bad",{"_index":88,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["badrequest",{"_index":337,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/SectionsController.html":{}}}],["badrequest'})@apiunauthorizedresponse({description",{"_index":316,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/SectionsController.html":{}}}],["badrequestexception",{"_index":371,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{}}}],["badrequestexception('airplane",{"_index":380,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["badrequestexception('flight",{"_index":1068,"title":{},"body":{"injectables/FlightsService.html":{}}}],["baggage",{"_index":791,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["bcrypt",{"_index":688,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcrypt.compare",{"_index":1616,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.compare(pass",{"_index":713,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.gensalt",{"_index":706,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.newpassword",{"_index":1624,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypt.hash(userdto.password",{"_index":708,"title":{},"body":{"injectables/AuthService.html":{}}}],["binary",{"_index":756,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["birthday",{"_index":867,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["birthday'})@prop({required",{"_index":1374,"title":{},"body":{"classes/Ticket.html":{}}}],["body",{"_index":130,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["booked",{"_index":900,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["boolean",{"_index":815,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"guards/RolesGuard.html":{}}}],["bootstrap",{"_index":192,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["break",{"_index":1122,"title":{},"body":{"injectables/FlightsService.html":{}}}],["browse",{"_index":1717,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1714,"title":{},"body":{"modules.html":{}}}],["business",{"_index":1223,"title":{},"body":{"classes/SearchFlightDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["cache",{"_index":572,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["cacheinterceptor",{"_index":544,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule",{"_index":545,"title":{},"body":{"modules/AppModule.html":{}}}],["cachemodule.registerasync",{"_index":573,"title":{},"body":{"modules/AppModule.html":{}}}],["canactivate",{"_index":1192,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":1196,"title":{},"body":{"guards/RolesGuard.html":{}}}],["carryonbaggage",{"_index":792,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["catch",{"_index":260,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/UsersService.html":{}}}],["change",{"_index":1542,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword",{"_index":1539,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(@request",{"_index":1576,"title":{},"body":{"controllers/UsersController.html":{}}}],["changepassword(req",{"_index":1541,"title":{},"body":{"controllers/UsersController.html":{}}}],["changeuserpassword",{"_index":1587,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassword(userid",{"_index":1596,"title":{},"body":{"injectables/UsersService.html":{}}}],["changeuserpassworddto",{"_index":717,"title":{"classes/ChangeUserPasswordDto.html":{}},"body":{"classes/ChangeUserPasswordDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["changeuserpassworddto})@apitoomanyrequestsresponse({description",{"_index":1546,"title":{},"body":{"controllers/UsersController.html":{}}}],["child",{"_index":1400,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["citizenship",{"_index":880,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenship'})@prop({required",{"_index":1379,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenship'})@prop({trim",{"_index":1376,"title":{},"body":{"classes/Ticket.html":{}}}],["citizenshipeng",{"_index":868,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipru",{"_index":869,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["citizenshipua",{"_index":870,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["class",{"_index":0,"title":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{}}}],["class'})@prop({required",{"_index":1295,"title":{},"body":{"classes/Section.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"index.html":{}}}],["cluster_airlinesmodule",{"_index":195,"title":{},"body":{"modules/AirlinesModule.html":{},"index.html":{}}}],["cluster_airlinesmodule_exports",{"_index":197,"title":{},"body":{"modules/AirlinesModule.html":{},"index.html":{}}}],["cluster_airlinesmodule_imports",{"_index":196,"title":{},"body":{"modules/AirlinesModule.html":{},"index.html":{}}}],["cluster_airlinesmodule_providers",{"_index":198,"title":{},"body":{"modules/AirlinesModule.html":{},"index.html":{}}}],["cluster_airplanesmodule",{"_index":346,"title":{},"body":{"modules/AirplanesModule.html":{},"index.html":{}}}],["cluster_airplanesmodule_exports",{"_index":347,"title":{},"body":{"modules/AirplanesModule.html":{},"index.html":{}}}],["cluster_airplanesmodule_providers",{"_index":348,"title":{},"body":{"modules/AirplanesModule.html":{},"index.html":{}}}],["cluster_airportsmodule",{"_index":455,"title":{},"body":{"modules/AirportsModule.html":{},"index.html":{}}}],["cluster_airportsmodule_exports",{"_index":457,"title":{},"body":{"modules/AirportsModule.html":{},"index.html":{}}}],["cluster_airportsmodule_providers",{"_index":456,"title":{},"body":{"modules/AirportsModule.html":{},"index.html":{}}}],["cluster_appmodule",{"_index":533,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":534,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_providers",{"_index":535,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_authmodule",{"_index":651,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_exports",{"_index":652,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_authmodule_providers",{"_index":653,"title":{},"body":{"modules/AuthModule.html":{},"index.html":{}}}],["cluster_filesmodule",{"_index":934,"title":{},"body":{"modules/FilesModule.html":{},"index.html":{}}}],["cluster_filesmodule_exports",{"_index":936,"title":{},"body":{"modules/FilesModule.html":{},"index.html":{}}}],["cluster_filesmodule_providers",{"_index":935,"title":{},"body":{"modules/FilesModule.html":{},"index.html":{}}}],["cluster_flightsmodule",{"_index":1034,"title":{},"body":{"modules/FlightsModule.html":{},"index.html":{}}}],["cluster_flightsmodule_exports",{"_index":1036,"title":{},"body":{"modules/FlightsModule.html":{},"index.html":{}}}],["cluster_flightsmodule_providers",{"_index":1035,"title":{},"body":{"modules/FlightsModule.html":{},"index.html":{}}}],["cluster_seatsmodule",{"_index":1274,"title":{},"body":{"modules/SeatsModule.html":{},"index.html":{}}}],["cluster_seatsmodule_exports",{"_index":1276,"title":{},"body":{"modules/SeatsModule.html":{},"index.html":{}}}],["cluster_seatsmodule_providers",{"_index":1275,"title":{},"body":{"modules/SeatsModule.html":{},"index.html":{}}}],["cluster_sectionsmodule",{"_index":1336,"title":{},"body":{"modules/SectionsModule.html":{},"index.html":{}}}],["cluster_sectionsmodule_exports",{"_index":1337,"title":{},"body":{"modules/SectionsModule.html":{},"index.html":{}}}],["cluster_sectionsmodule_providers",{"_index":1338,"title":{},"body":{"modules/SectionsModule.html":{},"index.html":{}}}],["cluster_ticketsmodule",{"_index":1449,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["cluster_ticketsmodule_exports",{"_index":1451,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["cluster_ticketsmodule_imports",{"_index":1452,"title":{},"body":{"modules/TicketsModule.html":{}}}],["cluster_ticketsmodule_providers",{"_index":1450,"title":{},"body":{"modules/TicketsModule.html":{},"index.html":{}}}],["cluster_usersmodule",{"_index":1580,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_exports",{"_index":1581,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["cluster_usersmodule_providers",{"_index":1582,"title":{},"body":{"modules/UsersModule.html":{},"index.html":{}}}],["compression",{"_index":1673,"title":{},"body":{"dependencies.html":{}}}],["config",{"_index":579,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_limit",{"_index":582,"title":{},"body":{"modules/AppModule.html":{}}}],["config.get('throttle_ttl",{"_index":580,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":546,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":569,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configservice",{"_index":547,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('cache_ttl",{"_index":576,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":670,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":667,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('mongo_db_uri",{"_index":585,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":64,"title":{},"body":{"classes/Airline.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"injectables/AirportsService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/Seat.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":220,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["constructor(@injectmodel(seat.name",{"_index":1288,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(@injectmodel(user.name",{"_index":1609,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(airlinemodel",{"_index":221,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["constructor(airplanemodel",{"_index":358,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["constructor(airportmodel",{"_index":467,"title":{},"body":{"injectables/AirportsService.html":{}}}],["constructor(authservice",{"_index":1179,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(flightmodel",{"_index":1047,"title":{},"body":{"injectables/FlightsService.html":{}}}],["constructor(jwtservice",{"_index":1193,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(private",{"_index":163,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["constructor(seatmodel",{"_index":1282,"title":{},"body":{"injectables/SeatsService.html":{}}}],["constructor(sectionmodel",{"_index":1348,"title":{},"body":{"injectables/SectionsService.html":{}}}],["constructor(ticketmodel",{"_index":1468,"title":{},"body":{"injectables/TicketsService.html":{}}}],["constructor(usermodel",{"_index":1594,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(userservice",{"_index":1156,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(usersservice",{"_index":673,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":1199,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.getclass",{"_index":1208,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.gethandler",{"_index":1207,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":1209,"title":{},"body":{"guards/RolesGuard.html":{}}}],["controller",{"_index":70,"title":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('airlines",{"_index":162,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["controller('airplanes",{"_index":336,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["controller('airports",{"_index":448,"title":{},"body":{"controllers/AirportsController.html":{}}}],["controller('auth",{"_index":632,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('flights",{"_index":1025,"title":{},"body":{"controllers/FlightsController.html":{}}}],["controller('seats",{"_index":1271,"title":{},"body":{"controllers/SeatsController.html":{}}}],["controller('sections",{"_index":1330,"title":{},"body":{"controllers/SectionsController.html":{}}}],["controller('tickets",{"_index":1440,"title":{},"body":{"controllers/TicketsController.html":{}}}],["controller('users",{"_index":1569,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":72,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["cookie",{"_index":1675,"title":{},"body":{"dependencies.html":{}}}],["cookieextractor",{"_index":1165,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":1217,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["country",{"_index":397,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["coverage",{"_index":1627,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":76,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["create(@body",{"_index":338,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["create(airlinedto",{"_index":81,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["create(airplanedto",{"_index":312,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["create(airportdto",{"_index":425,"title":{},"body":{"controllers/AirportsController.html":{}}}],["create(flightdto",{"_index":993,"title":{},"body":{"controllers/FlightsController.html":{}}}],["create(sectiondto",{"_index":1306,"title":{},"body":{"controllers/SectionsController.html":{}}}],["create(ticketdto",{"_index":1409,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createairline",{"_index":215,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairline(airlinedto",{"_index":226,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["createairlinedto",{"_index":82,"title":{"classes/CreateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["createairlinedto})@apicookieauth()@roles('admin')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":94,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["createairplane",{"_index":353,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplane(airplanedto",{"_index":361,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["createairplanedto",{"_index":313,"title":{"classes/CreateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["createairplanedto})@apicookieauth()@roles('admin')@post",{"_index":317,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["createairport",{"_index":462,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairport(airportdto",{"_index":470,"title":{},"body":{"injectables/AirportsService.html":{}}}],["createairportdto",{"_index":426,"title":{"classes/CreateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["createairportdto})@apicookieauth()@roles('admin')@post",{"_index":429,"title":{},"body":{"controllers/AirportsController.html":{}}}],["created",{"_index":86,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["created'})@apitoomanyrequestsresponse({description",{"_index":604,"title":{},"body":{"controllers/AuthController.html":{}}}],["createfile",{"_index":940,"title":{},"body":{"injectables/FilesService.html":{}}}],["createfile(folder",{"_index":942,"title":{},"body":{"injectables/FilesService.html":{}}}],["createflight",{"_index":1041,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflight(flightdto",{"_index":1050,"title":{},"body":{"injectables/FlightsService.html":{}}}],["createflightdto",{"_index":786,"title":{"classes/CreateFlightDto.html":{}},"body":{"classes/CreateFlightDto.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["createflightdto})@apitoomanyrequestsresponse({description",{"_index":997,"title":{},"body":{"controllers/FlightsController.html":{}}}],["createseatdto",{"_index":844,"title":{"classes/CreateSeatDto.html":{}},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["createsection",{"_index":1343,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsection(sectiondto",{"_index":1351,"title":{},"body":{"injectables/SectionsService.html":{}}}],["createsectiondto",{"_index":847,"title":{"classes/CreateSectionDto.html":{}},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["createsectiondto})@apitoomanyrequestsresponse({description",{"_index":1309,"title":{},"body":{"controllers/SectionsController.html":{}}}],["createticket",{"_index":1463,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticket(ticketdto",{"_index":1472,"title":{},"body":{"injectables/TicketsService.html":{}}}],["createticketdto",{"_index":864,"title":{"classes/CreateTicketDto.html":{}},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["createticketdto})@apiunauthorizedresponse({description",{"_index":1413,"title":{},"body":{"controllers/TicketsController.html":{}}}],["createuser",{"_index":1588,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuser(userdto",{"_index":1598,"title":{},"body":{"injectables/UsersService.html":{}}}],["createuserdto",{"_index":617,"title":{"classes/CreateUserDto.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["createuserdto})@post('signup",{"_index":619,"title":{},"body":{"controllers/AuthController.html":{}}}],["cross",{"_index":1676,"title":{},"body":{"dependencies.html":{}}}],["csurf",{"_index":1679,"title":{},"body":{"dependencies.html":{}}}],["data",{"_index":110,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data')@patch(':id",{"_index":127,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data')@post",{"_index":95,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data'})@apinotfoundresponse({description",{"_index":116,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["data'})@apiokresponse({description",{"_index":124,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["data.dto",{"_index":1565,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["data.dto.ts",{"_index":1518,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["declarations",{"_index":191,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["decorators",{"_index":20,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["decorators/roles",{"_index":1203,"title":{},"body":{"guards/RolesGuard.html":{}}}],["default",{"_index":1249,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":32,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":77,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["delete(':id",{"_index":183,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["delete(@param('id",{"_index":184,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(@request",{"_index":1578,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete(id",{"_index":100,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["delete(req",{"_index":1549,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleteairline",{"_index":216,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairline(airlineid",{"_index":229,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["deleteairplane",{"_index":354,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairplane(airplaneid",{"_index":363,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["deleteairport",{"_index":463,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deleteairport(airportid",{"_index":472,"title":{},"body":{"injectables/AirportsService.html":{}}}],["deletefile",{"_index":941,"title":{},"body":{"injectables/FilesService.html":{}}}],["deletefile(filepath",{"_index":944,"title":{},"body":{"injectables/FilesService.html":{}}}],["deleteflight",{"_index":1042,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deleteflight(flightid",{"_index":1052,"title":{},"body":{"injectables/FlightsService.html":{}}}],["deletesection",{"_index":1344,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deletesection(sectionid",{"_index":1353,"title":{},"body":{"injectables/SectionsService.html":{}}}],["deleteuser",{"_index":1589,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(userid",{"_index":1600,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleting",{"_index":965,"title":{},"body":{"injectables/FilesService.html":{}}}],["departure",{"_index":821,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["departureairport",{"_index":793,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["departureairport.airportnameeng",{"_index":1130,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameru",{"_index":1131,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airportnameua",{"_index":1129,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttowneng",{"_index":1134,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownru",{"_index":1135,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.airporttownua",{"_index":1133,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departureairport.iata",{"_index":1132,"title":{},"body":{"injectables/FlightsService.html":{}}}],["departuretime",{"_index":794,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["dependencies",{"_index":189,"title":{"dependencies.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"index.html":{}}}],["description",{"_index":26,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{}}}],["descriptioneng",{"_index":13,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionru",{"_index":14,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["descriptionua",{"_index":15,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["disabled",{"_index":1402,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["dmitry",{"_index":888,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{}}}],["document",{"_index":58,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["document'})@prop({required",{"_index":1381,"title":{},"body":{"classes/Ticket.html":{}}}],["documentation",{"_index":1628,"title":{},"body":{"coverage.html":{}}}],["dto/change",{"_index":1566,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/create",{"_index":155,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["dto/search",{"_index":1023,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["dto/update",{"_index":157,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e",{"_index":919,"title":{},"body":{"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"guards/RolesGuard.html":{},"classes/User.html":{}}}],["each",{"_index":1221,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["economy",{"_index":853,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"miscellaneous/enumerations.html":{}}}],["efremov",{"_index":892,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["email",{"_index":686,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["endof('day",{"_index":1110,"title":{},"body":{"injectables/FlightsService.html":{}}}],["english",{"_index":27,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["entities/airlines.entity",{"_index":154,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{}}}],["entities/airplane.entity",{"_index":333,"title":{},"body":{"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{}}}],["entities/airport.entity",{"_index":445,"title":{},"body":{"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{}}}],["entities/flights.entity",{"_index":1021,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{}}}],["entities/seat.entity",{"_index":1268,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["entities/section.entity",{"_index":862,"title":{},"body":{"classes/CreateSectionDto.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{}}}],["entities/ticket.entity",{"_index":912,"title":{},"body":{"classes/CreateTicketDto.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["entities/users.entity",{"_index":1564,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["enum",{"_index":854,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1700,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enumname",{"_index":855,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["env",{"_index":1677,"title":{},"body":{"dependencies.html":{}}}],["envfilepath",{"_index":570,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["err",{"_index":261,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["error",{"_index":959,"title":{},"body":{"injectables/FilesService.html":{}}}],["example",{"_index":62,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["exchange",{"_index":795,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["exchange'})@prop",{"_index":979,"title":{},"body":{"classes/Flight.html":{}}}],["exec",{"_index":247,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["executioncontext",{"_index":1197,"title":{},"body":{"guards/RolesGuard.html":{}}}],["exists",{"_index":251,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{}}}],["expiresin",{"_index":669,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":60,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["exports",{"_index":194,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["express",{"_index":138,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AuthController.html":{},"dependencies.html":{}}}],["express.multer.file",{"_index":83,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["extends",{"_index":1152,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["false",{"_index":259,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["female",{"_index":1399,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["file.buffer",{"_index":958,"title":{},"body":{"injectables/FilesService.html":{}}}],["file.originalname.split('.').pop",{"_index":950,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileextension",{"_index":949,"title":{},"body":{"injectables/FilesService.html":{}}}],["fileinterceptor",{"_index":136,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["filename",{"_index":254,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{}}}],["filepath",{"_index":946,"title":{},"body":{"injectables/FilesService.html":{}}}],["files.service",{"_index":938,"title":{},"body":{"modules/FilesModule.html":{}}}],["files/files.module",{"_index":563,"title":{},"body":{"modules/AppModule.html":{}}}],["files/files.service",{"_index":241,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["filesmodule",{"_index":199,"title":{"modules/FilesModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AppModule.html":{},"modules/FilesModule.html":{},"index.html":{},"modules.html":{}}}],["filesservice",{"_index":223,"title":{"injectables/FilesService.html":{}},"body":{"injectables/AirlinesService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"coverage.html":{},"index.html":{}}}],["find",{"_index":263,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["find(@request",{"_index":1444,"title":{},"body":{"controllers/TicketsController.html":{}}}],["find(req",{"_index":1419,"title":{},"body":{"controllers/TicketsController.html":{}}}],["findall",{"_index":78,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["findbyid(airlineid",{"_index":264,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyid(airplane._id",{"_index":375,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airplaneid",{"_index":378,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyid(airportid",{"_index":484,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyid(flight.airplane",{"_index":1489,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(flightid",{"_index":1070,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyid(sectionid",{"_index":1367,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyid(ticketdto.flight",{"_index":1485,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketdto.user",{"_index":1487,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(ticketid",{"_index":1494,"title":{},"body":{"injectables/TicketsService.html":{}}}],["findbyid(userid",{"_index":1495,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["findbyidanddelete(airlineid",{"_index":282,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["findbyidanddelete(airplaneid",{"_index":384,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["findbyidanddelete(airportid",{"_index":506,"title":{},"body":{"injectables/AirportsService.html":{}}}],["findbyidanddelete(flightid",{"_index":1096,"title":{},"body":{"injectables/FlightsService.html":{}}}],["findbyidanddelete(sectionid",{"_index":1372,"title":{},"body":{"injectables/SectionsService.html":{}}}],["findbyidanddelete(userid",{"_index":1625,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone",{"_index":79,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["findone(@param('id",{"_index":178,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["findone(id",{"_index":115,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["first",{"_index":889,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["firstdeptime",{"_index":1218,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["firstname",{"_index":697,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["flagship",{"_index":44,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["flight",{"_index":831,"title":{"classes/Flight.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{}}}],["flight'})@apicreatedresponse({description",{"_index":994,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@apiokresponse({description",{"_index":1001,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight'})@prop({required",{"_index":1384,"title":{},"body":{"classes/Ticket.html":{}}}],["flight.airline",{"_index":1073,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.airplane",{"_index":1075,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivalairport",{"_index":1077,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.arrivaltime",{"_index":1079,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.baggage",{"_index":1081,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.carryonbaggage",{"_index":1083,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departureairport",{"_index":1085,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.departuretime",{"_index":1087,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.dto",{"_index":1022,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{}}}],["flight.dto.ts",{"_index":788,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["flight.dto.ts:19",{"_index":832,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:25",{"_index":1228,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:27",{"_index":800,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:34",{"_index":1232,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:35",{"_index":802,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:43",{"_index":822,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:44",{"_index":1236,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:51",{"_index":824,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:53",{"_index":1219,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:59",{"_index":805,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:63",{"_index":1224,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:67",{"_index":811,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:72",{"_index":837,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:73",{"_index":1227,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["flight.dto.ts:78",{"_index":814,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:83",{"_index":819,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:87",{"_index":828,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.dto.ts:91",{"_index":834,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["flight.exchange",{"_index":1089,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.flightname",{"_index":1090,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.name",{"_index":1039,"title":{},"body":{"modules/FlightsModule.html":{},"modules/TicketsModule.html":{}}}],["flight.refund",{"_index":1092,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.save",{"_index":1095,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flight.taxa",{"_index":1094,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdocument",{"_index":986,"title":{},"body":{"classes/Flight.html":{},"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["flightdto",{"_index":1000,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flightdto.airline",{"_index":1072,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.airplane",{"_index":1074,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivalairport",{"_index":1076,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.arrivaltime",{"_index":1078,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.baggage",{"_index":1080,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.carryonbaggage",{"_index":1082,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.class",{"_index":1112,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.class.length",{"_index":1115,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.count",{"_index":1117,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departureairport",{"_index":1084,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.departuretime",{"_index":1086,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.exchange",{"_index":1088,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.firstdeptime",{"_index":1098,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.flightname",{"_index":1067,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.refund",{"_index":1091,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.seconddeptime",{"_index":1099,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightdto.taxa",{"_index":1093,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightid",{"_index":1054,"title":{},"body":{"injectables/FlightsService.html":{}}}],["flightmodel",{"_index":1049,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["flightname",{"_index":796,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{}}}],["flights",{"_index":991,"title":{},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{}}}],["flights'})@apicreatedresponse({description",{"_index":1009,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights'})@apiokresponse({description",{"_index":1004,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flights.controller",{"_index":1038,"title":{},"body":{"modules/FlightsModule.html":{}}}],["flights.service",{"_index":1020,"title":{},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{}}}],["flights/flights.module",{"_index":561,"title":{},"body":{"modules/AppModule.html":{}}}],["flightschema",{"_index":987,"title":{},"body":{"classes/Flight.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["flightscontroller",{"_index":989,"title":{"controllers/FlightsController.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"coverage.html":{}}}],["flightsmodule",{"_index":537,"title":{"modules/FlightsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/TicketsModule.html":{},"index.html":{},"modules.html":{}}}],["flightsservice",{"_index":1019,"title":{"injectables/FlightsService.html":{}},"body":{"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"coverage.html":{},"index.html":{}}}],["flight})@apibadrequestresponse({description",{"_index":995,"title":{},"body":{"controllers/FlightsController.html":{}}}],["flight})@apiparam({name",{"_index":1002,"title":{},"body":{"controllers/FlightsController.html":{}}}],["folder",{"_index":240,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/FilesService.html":{},"miscellaneous/enumerations.html":{}}}],["folder.airline",{"_index":279,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["forbidden",{"_index":168,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apibadrequestresponse({description",{"_index":1414,"title":{},"body":{"controllers/TicketsController.html":{}}}],["forbidden'})@apibody({type",{"_index":996,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["forbidden'})@apiparam({name",{"_index":1314,"title":{},"body":{"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apitoomanyrequestsresponse({description",{"_index":91,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["forbidden'})@apiunauthorizedresponse({description",{"_index":513,"title":{},"body":{"controllers/AppController.html":{}}}],["format",{"_index":755,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["forwardref",{"_index":657,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":176,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["found'})@apibadrequestresponse({description",{"_index":125,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/UsersController.html":{}}}],["found'})@apiokresponse({description",{"_index":117,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["found'})@apiparam({name",{"_index":1319,"title":{},"body":{"controllers/SectionsController.html":{}}}],["found'})@apitoomanyrequestsresponse({description",{"_index":325,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{}}}],["found'})@apiunauthorizedresponse({description",{"_index":107,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["free",{"_index":1247,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/enumerations.html":{}}}],["fs",{"_index":947,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.existssync(filepath",{"_index":954,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.mkdirsync(filepath",{"_index":955,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.unlinksync(pathtofile",{"_index":964,"title":{},"body":{"injectables/FilesService.html":{}}}],["fs.writefilesync(path.join(filepath",{"_index":957,"title":{},"body":{"injectables/FilesService.html":{}}}],["function",{"_index":1166,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["functions",{"_index":1707,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["fuse",{"_index":1062,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(flights",{"_index":1136,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse(result",{"_index":1147,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.js",{"_index":1063,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["fuse.search(flightdto.arrival).map((r",{"_index":1148,"title":{},"body":{"injectables/FlightsService.html":{}}}],["fuse.search(flightdto.departure).map((r",{"_index":1137,"title":{},"body":{"injectables/FlightsService.html":{}}}],["get(':id",{"_index":177,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["get('profile",{"_index":529,"title":{},"body":{"controllers/AppController.html":{}}}],["getairlinebyid",{"_index":217,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairlinebyid(airlineid",{"_index":232,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getairplanebyid",{"_index":355,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairplanebyid(airplaneid",{"_index":366,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getairportbyid",{"_index":464,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getairportbyid(airportid",{"_index":475,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallairlines",{"_index":218,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["getallairplanes",{"_index":356,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["getallairports",{"_index":465,"title":{},"body":{"injectables/AirportsService.html":{}}}],["getallflights",{"_index":1043,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getallsections",{"_index":1345,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getalltickets",{"_index":1464,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getallusers",{"_index":1590,"title":{},"body":{"injectables/UsersService.html":{}}}],["getflightbyid",{"_index":1044,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getflightbyid(flightid",{"_index":1056,"title":{},"body":{"injectables/FlightsService.html":{}}}],["getprofile",{"_index":509,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{}}}],["getprofile(@request",{"_index":530,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(req",{"_index":510,"title":{},"body":{"controllers/AppController.html":{}}}],["getprofile(userid",{"_index":677,"title":{},"body":{"injectables/AuthService.html":{}}}],["getsectionbyid",{"_index":1346,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getsectionbyid(sectionid",{"_index":1357,"title":{},"body":{"injectables/SectionsService.html":{}}}],["getticketbyid",{"_index":1465,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getticketbyid(userid",{"_index":1475,"title":{},"body":{"injectables/TicketsService.html":{}}}],["getuserbyemail",{"_index":1591,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyemail(email",{"_index":1603,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid",{"_index":1592,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserbyid(userid",{"_index":1605,"title":{},"body":{"injectables/UsersService.html":{}}}],["gte",{"_index":1101,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["guard",{"_index":1189,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["guards",{"_index":1190,"title":{},"body":{"guards/RolesGuard.html":{}}}],["guards/jwt",{"_index":628,"title":{},"body":{"controllers/AuthController.html":{}}}],["guards/local",{"_index":630,"title":{},"body":{"controllers/AuthController.html":{}}}],["hand",{"_index":817,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["hashpassword",{"_index":707,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["helmet",{"_index":1682,"title":{},"body":{"dependencies.html":{}}}],["hours",{"_index":1105,"title":{},"body":{"injectables/FlightsService.html":{}}}],["httpexception",{"_index":237,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpexception('forbidden",{"_index":1214,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpexception('password",{"_index":1620,"title":{},"body":{"injectables/UsersService.html":{}}}],["httpexception(err",{"_index":262,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":641,"title":{},"body":{"controllers/AuthController.html":{}}}],["httpstatus",{"_index":238,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":252,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.forbidden",{"_index":1215,"title":{},"body":{"guards/RolesGuard.html":{}}}],["httpstatus.internal_server_error",{"_index":962,"title":{},"body":{"injectables/FilesService.html":{}}}],["httpstatus.not_found",{"_index":265,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["iata",{"_index":396,"title":{},"body":{"classes/Airport.html":{},"injectables/AirportsService.html":{},"classes/CreateAirportDto.html":{}}}],["iata'})@prop({required",{"_index":416,"title":{},"body":{"classes/Airport.html":{}}}],["id",{"_index":105,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":1629,"title":{},"body":{"coverage.html":{}}}],["iev",{"_index":415,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["ignoreexpiration",{"_index":1173,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":1204,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":51,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":204,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["in'})@apibadrequestresponse({description",{"_index":610,"title":{},"body":{"controllers/AuthController.html":{}}}],["includescore",{"_index":1127,"title":{},"body":{"injectables/FlightsService.html":{}}}],["incorrect",{"_index":716,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["initialflights",{"_index":1100,"title":{},"body":{"injectables/FlightsService.html":{}}}],["initialflights.foreach((a",{"_index":1114,"title":{},"body":{"injectables/FlightsService.html":{}}}],["inject",{"_index":577,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":210,"title":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":211,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"index.html":{}}}],["injectmodel",{"_index":239,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["injectmodel(airline.name",{"_index":242,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["injectmodel(airplane.name",{"_index":372,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(airport.name",{"_index":480,"title":{},"body":{"injectables/AirportsService.html":{}}}],["injectmodel(flight.name",{"_index":1065,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["injectmodel(seat.name",{"_index":1362,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(section.name",{"_index":1361,"title":{},"body":{"injectables/SectionsService.html":{}}}],["injectmodel(ticket.name",{"_index":1483,"title":{},"body":{"injectables/TicketsService.html":{}}}],["injectmodel(user.name",{"_index":1484,"title":{},"body":{"injectables/TicketsService.html":{}}}],["international",{"_index":24,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["isarray",{"_index":765,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/SearchFlightDto.html":{}}}],["isarray()@arrayunique()@isnotempty()@apiproperty({example",{"_index":762,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isboolean",{"_index":839,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isboolean()@isnotempty()@apiproperty({example",{"_index":816,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isdatestring",{"_index":1238,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isemail",{"_index":931,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isenum",{"_index":861,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(class",{"_index":863,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{}}}],["isenum(sex",{"_index":913,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isenum(status",{"_index":916,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isenum(type",{"_index":914,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ismongoid",{"_index":840,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["ismongoid()@isnotempty()@apiproperty({example",{"_index":801,"title":{},"body":{"classes/CreateFlightDto.html":{}}}],["isnotempty",{"_index":731,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@isarray()@isenum(class",{"_index":1220,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isemail()@apiproperty({example",{"_index":918,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isenum(class)@apiproperty({example",{"_index":852,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["isnotempty()@isenum(sex)@apiproperty({example",{"_index":896,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@isenum(status)@apiproperty({example",{"_index":899,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateSeatDto.html":{}}}],["isnotempty()@isenum(type)@apiproperty({example",{"_index":902,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isnotempty()@ismongoid()@apiproperty({example",{"_index":799,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isnumber()@apiproperty({example",{"_index":760,"title":{},"body":{"classes/CreateAirplaneDto.html":{}}}],["isnotempty()@isnumber()@min(1)@max(9)@apiproperty({example",{"_index":1225,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isphonenumber()@apiproperty({example",{"_index":927,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@apiproperty({example",{"_index":806,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isnotempty()@isstring()@isdatestring()@apiproperty({example",{"_index":1229,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isnotempty()@isstring()@isuppercase()@length(2",{"_index":779,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["isnotempty()@isstring()@matches('^(?=.*?[a",{"_index":722,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["isnotempty()@isstring()@maxlength(200)@apiproperty({example",{"_index":747,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["isnotempty()@isstring()@maxlength(50)@apiproperty({example",{"_index":771,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnotempty()@maxlength(20)@isstring()@apiproperty({example",{"_index":922,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isnumber",{"_index":766,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{}}}],["isnumber()@isnotempty()@apiproperty({example",{"_index":835,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{}}}],["isoptional",{"_index":751,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/SearchFlightDto.html":{}}}],["isoptional()@apipropertyoptional({example",{"_index":825,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{}}}],["isoptional()@isnotempty()@isstring()@isdatestring()@apipropertyoptional({example",{"_index":1233,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["isoptional()@isstring()@apipropertyoptional({example",{"_index":879,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isoptional()@isstring()@maxlength(200)@apiproperty({example",{"_index":744,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["isoptional()@isstring()@maxlength(50)@apiproperty({example",{"_index":739,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{}}}],["isphonenumber",{"_index":932,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["isstring",{"_index":732,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["isstring()@isnotempty()@apiproperty({example",{"_index":907,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@length(7",{"_index":884,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["isstring()@isnotempty()@maxlength(50)@apiproperty({example",{"_index":742,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{}}}],["isuppercase",{"_index":782,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["jwt",{"_index":638,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":523,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":1172,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":660,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":665,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":675,"title":{},"body":{"injectables/AuthService.html":{},"guards/RolesGuard.html":{}}}],["jwtstrategy",{"_index":654,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"index.html":{}}}],["keys",{"_index":1128,"title":{},"body":{"injectables/FlightsService.html":{}}}],["kiev",{"_index":409,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["last",{"_index":893,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lastname",{"_index":699,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["lax",{"_index":643,"title":{},"body":{"controllers/AuthController.html":{}}}],["legend",{"_index":190,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["length",{"_index":783,"title":{},"body":{"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{}}}],["length(2",{"_index":784,"title":{},"body":{"classes/CreateAirportDto.html":{}}}],["length(7",{"_index":915,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["limit",{"_index":581,"title":{},"body":{"modules/AppModule.html":{}}}],["local",{"_index":1183,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthguard",{"_index":629,"title":{"injectables/LocalAuthGuard.html":{}},"body":{"controllers/AuthController.html":{},"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":655,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"index.html":{}}}],["log",{"_index":601,"title":{},"body":{"controllers/AuthController.html":{}}}],["loginuserdto",{"_index":626,"title":{"classes/LoginUserDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["loginuserdto})@apitoomanyrequestsresponse({description",{"_index":613,"title":{},"body":{"controllers/AuthController.html":{}}}],["logo",{"_index":16,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/CreateAirlineDto.html":{}}}],["logo'})@prop({required",{"_index":49,"title":{},"body":{"classes/Airline.html":{}}}],["logout",{"_index":596,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(@res",{"_index":650,"title":{},"body":{"controllers/AuthController.html":{}}}],["logout(res",{"_index":599,"title":{},"body":{"controllers/AuthController.html":{}}}],["lte",{"_index":1108,"title":{},"body":{"injectables/FlightsService.html":{}}}],["luggage",{"_index":818,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["luggage'})@prop({required",{"_index":974,"title":{},"body":{"classes/Flight.html":{}}}],["mail",{"_index":920,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["mail'})@prop({required",{"_index":1520,"title":{},"body":{"classes/User.html":{}}}],["male",{"_index":897,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["manager",{"_index":1668,"title":{},"body":{"dependencies.html":{}}}],["many",{"_index":92,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["match",{"_index":1111,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["matches",{"_index":733,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matches('^(?=.*?[a",{"_index":735,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["matching",{"_index":68,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":1239,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["max(9",{"_index":1242,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["maxlength",{"_index":752,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{}}}],["maxlength(20",{"_index":933,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["maxlength(200",{"_index":754,"title":{},"body":{"classes/CreateAirlineDto.html":{}}}],["maxlength(50",{"_index":753,"title":{},"body":{"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/SearchFlightDto.html":{}}}],["message",{"_index":715,"title":{},"body":{"injectables/AuthService.html":{}}}],["metadata",{"_index":1690,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":75,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["min",{"_index":1240,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["min(1",{"_index":1241,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["miscellaneous",{"_index":1699,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mismatch",{"_index":1621,"title":{},"body":{"injectables/UsersService.html":{}}}],["model",{"_index":222,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["module",{"_index":186,"title":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":188,"title":{"modules.html":{}},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["moment",{"_index":1064,"title":{},"body":{"injectables/FlightsService.html":{},"dependencies.html":{}}}],["moment(flightdto.firstdeptime",{"_index":1102,"title":{},"body":{"injectables/FlightsService.html":{}}}],["moment(seconddeptime",{"_index":1109,"title":{},"body":{"injectables/FlightsService.html":{}}}],["mongoose",{"_index":59,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["mongoose.schema.types.objectid",{"_index":306,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["mongoosemodule",{"_index":205,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forfeature",{"_index":208,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":583,"title":{},"body":{"modules/AppModule.html":{}}}],["name",{"_index":28,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["name'})@prop({required",{"_index":291,"title":{},"body":{"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["name'})@prop({unique",{"_index":405,"title":{},"body":{"classes/Airport.html":{}}}],["nestjs/common",{"_index":135,"title":{},"body":{"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":548,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":554,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":661,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":1653,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":55,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"modules/AppModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":659,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":137,"title":{},"body":{"controllers/AirlinesController.html":{},"dependencies.html":{}}}],["nestjs/serve",{"_index":1657,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":57,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"classes/LoginUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/throttler",{"_index":551,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["new",{"_index":249,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newpassword",{"_index":720,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["newpasswordequals",{"_index":1618,"title":{},"body":{"injectables/UsersService.html":{}}}],["notavailable",{"_index":1254,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["null",{"_index":812,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["number",{"_index":293,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["number'})@prop({required",{"_index":1526,"title":{},"body":{"classes/User.html":{}}}],["numberofseat",{"_index":871,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["objectid",{"_index":101,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["observable",{"_index":1200,"title":{},"body":{"guards/RolesGuard.html":{}}}],["occurred",{"_index":960,"title":{},"body":{"injectables/FilesService.html":{}}}],["october",{"_index":41,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["old",{"_index":1622,"title":{},"body":{"injectables/UsersService.html":{}}}],["oldpassword",{"_index":721,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["omittype",{"_index":1186,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["omittype(createuserdto",{"_index":1188,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["operating",{"_index":40,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["optional",{"_index":9,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["optionsforarrival",{"_index":1139,"title":{},"body":{"injectables/FlightsService.html":{}}}],["optionsfordeparture",{"_index":1126,"title":{},"body":{"injectables/FlightsService.html":{}}}],["out",{"_index":202,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["out'})@apiunauthorizedresponse({description",{"_index":602,"title":{},"body":{"controllers/AuthController.html":{}}}],["overview",{"_index":1709,"title":{"index.html":{}},"body":{"index.html":{}}}],["package",{"_index":1648,"title":{"dependencies.html":{}},"body":{}}],["paid",{"_index":1252,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["param",{"_index":132,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["param('id",{"_index":181,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/TicketsController.html":{}}}],["parameters",{"_index":97,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":1662,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":1187,"title":{},"body":{"classes/LoginUserDto.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{}}}],["partialtype(createairlinedto",{"_index":1502,"title":{},"body":{"classes/UpdateAirlineDto.html":{}}}],["partialtype(createairplanedto",{"_index":1504,"title":{},"body":{"classes/UpdateAirplaneDto.html":{}}}],["partialtype(createairportdto",{"_index":1506,"title":{},"body":{"classes/UpdateAirportDto.html":{}}}],["partialtype(createflightdto",{"_index":1508,"title":{},"body":{"classes/UpdateFlightDto.html":{}}}],["partialtype(createseatdto",{"_index":1511,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["partialtype(createsectiondto",{"_index":1513,"title":{},"body":{"classes/UpdateSectionDto.html":{}}}],["partialtype(createticketdto",{"_index":1515,"title":{},"body":{"classes/UpdateTicketDto.html":{}}}],["pass",{"_index":684,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":1163,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":658,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":1161,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":1170,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passthrough",{"_index":636,"title":{},"body":{"controllers/AuthController.html":{}}}],["password",{"_index":710,"title":{},"body":{"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password'})@apiokresponse({description",{"_index":1543,"title":{},"body":{"controllers/UsersController.html":{}}}],["password'})@prop({required",{"_index":1524,"title":{},"body":{"classes/User.html":{}}}],["password.dto",{"_index":1567,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["password.dto.ts",{"_index":719,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["password.dto.ts:15",{"_index":728,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["password.dto.ts:9",{"_index":730,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{}}}],["passwordequals",{"_index":712,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["passwords",{"_index":1623,"title":{},"body":{"injectables/UsersService.html":{}}}],["patch",{"_index":131,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["patch('/changepassword",{"_index":1575,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/update",{"_index":1572,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch(':id",{"_index":180,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["patch(':id/update",{"_index":1272,"title":{},"body":{"controllers/SeatsController.html":{}}}],["path",{"_index":377,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["path.resolve(__dirname",{"_index":952,"title":{},"body":{"injectables/FilesService.html":{}}}],["pathtofile",{"_index":963,"title":{},"body":{"injectables/FilesService.html":{}}}],["payload",{"_index":691,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["phone",{"_index":929,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/User.html":{}}}],["phonenumber",{"_index":701,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"classes/User.html":{}}}],["populate",{"_index":376,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["post",{"_index":129,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{}}}],["post('logout",{"_index":649,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('reserve",{"_index":1441,"title":{},"body":{"controllers/TicketsController.html":{}}}],["post('search",{"_index":1027,"title":{},"body":{"controllers/FlightsController.html":{}}}],["post('signin",{"_index":634,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('signup",{"_index":646,"title":{},"body":{"controllers/AuthController.html":{}}}],["prefix",{"_index":74,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["price",{"_index":850,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["price'})@prop({required",{"_index":1297,"title":{},"body":{"classes/Section.html":{}}}],["private",{"_index":243,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["process.env.node_env}.env",{"_index":571,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["profile",{"_index":527,"title":{},"body":{"controllers/AppController.html":{}}}],["profile'})@apiokresponse({description",{"_index":511,"title":{},"body":{"controllers/AppController.html":{}}}],["promise",{"_index":228,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["prop",{"_index":52,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["properties",{"_index":8,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{}}}],["properties'})@prop",{"_index":972,"title":{},"body":{"classes/Flight.html":{}}}],["provide",{"_index":590,"title":{},"body":{"modules/AppModule.html":{}}}],["providers",{"_index":193,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["ps",{"_index":829,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["public",{"_index":213,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["q",{"_index":1119,"title":{},"body":{"injectables/FlightsService.html":{}}}],["r.item",{"_index":1138,"title":{},"body":{"injectables/FlightsService.html":{}}}],["range",{"_index":1231,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["readonly",{"_index":164,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"controllers/FlightsController.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"classes/UpdateSeatDto.html":{},"controllers/UsersController.html":{}}}],["recursive",{"_index":956,"title":{},"body":{"injectables/FilesService.html":{}}}],["ref",{"_index":301,"title":{},"body":{"classes/Airplane.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["reflect",{"_index":1689,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":1194,"title":{},"body":{"guards/RolesGuard.html":{}}}],["refund",{"_index":797,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["req",{"_index":517,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"miscellaneous/variables.html":{}}}],["req.cookies",{"_index":1168,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.cookies['access_token",{"_index":1169,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["req.user",{"_index":1211,"title":{},"body":{"guards/RolesGuard.html":{}}}],["request",{"_index":166,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apibody({type",{"_index":1011,"title":{},"body":{"controllers/FlightsController.html":{}}}],["request'})@apicreatedresponse({description",{"_index":611,"title":{},"body":{"controllers/AuthController.html":{}}}],["request'})@apinotfoundresponse({description",{"_index":440,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["request'})@apitoomanyrequestsresponse({description",{"_index":1415,"title":{},"body":{"controllers/TicketsController.html":{}}}],["request'})@apiunauthorizedresponse({description",{"_index":89,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/UsersController.html":{}}}],["requests",{"_index":169,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["requests'})@apibody({type",{"_index":93,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{}}}],["requests'})@apicookieauth()@patch(':id/update",{"_index":1264,"title":{},"body":{"controllers/SeatsController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@delete(':id",{"_index":108,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@get",{"_index":1425,"title":{},"body":{"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@get(':id",{"_index":1556,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@patch(':id",{"_index":1017,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@apicookieauth()@roles('admin')@post",{"_index":998,"title":{},"body":{"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@delete",{"_index":1552,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@delete(':id",{"_index":1429,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@get(':id",{"_index":1421,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@get('profile",{"_index":515,"title":{},"body":{"controllers/AppController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@patch('/changepassword",{"_index":1547,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@patch('/update",{"_index":1561,"title":{},"body":{"controllers/UsersController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@patch(':id",{"_index":1434,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apicookieauth()@useguards(jwtauthguard)@post('reserve",{"_index":1416,"title":{},"body":{"controllers/TicketsController.html":{}}}],["requests'})@apiparam({name",{"_index":119,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["requests'})@get",{"_index":113,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@get(':id",{"_index":326,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["requests'})@post('search",{"_index":1013,"title":{},"body":{"controllers/FlightsController.html":{}}}],["requests'})@useguards(jwtauthguard)@apicookieauth()@post('logout",{"_index":605,"title":{},"body":{"controllers/AuthController.html":{}}}],["requests'})@useguards(localauthguard)@post('signin",{"_index":614,"title":{},"body":{"controllers/AuthController.html":{}}}],["required",{"_index":63,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":1205,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":1212,"title":{},"body":{"guards/RolesGuard.html":{}}}],["res",{"_index":607,"title":{},"body":{"controllers/AuthController.html":{}}}],["res.cookie('access_token",{"_index":640,"title":{},"body":{"controllers/AuthController.html":{}}}],["resbody",{"_index":637,"title":{},"body":{"controllers/AuthController.html":{}}}],["reserve",{"_index":1410,"title":{},"body":{"controllers/TicketsController.html":{}}}],["reset",{"_index":201,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["response",{"_index":600,"title":{},"body":{"controllers/AuthController.html":{}}}],["result",{"_index":67,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":69,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":173,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["return'})@prop",{"_index":982,"title":{},"body":{"classes/Flight.html":{}}}],["return(@request",{"_index":1447,"title":{},"body":{"controllers/TicketsController.html":{}}}],["return(req",{"_index":1427,"title":{},"body":{"controllers/TicketsController.html":{}}}],["returned",{"_index":1253,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["returns",{"_index":99,"title":{},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returnticket",{"_index":1466,"title":{},"body":{"injectables/TicketsService.html":{}}}],["returnticket(userid",{"_index":1478,"title":{},"body":{"injectables/TicketsService.html":{}}}],["rimraf",{"_index":1692,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":695,"title":{},"body":{"injectables/AuthService.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["role'})@prop({required",{"_index":1528,"title":{},"body":{"classes/User.html":{}}}],["role.user",{"_index":1534,"title":{},"body":{"classes/User.html":{}}}],["roles",{"_index":158,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roles('admin",{"_index":170,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["roles_key",{"_index":1202,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":567,"title":{"guards/RolesGuard.html":{}},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{},"coverage.html":{}}}],["rs123456",{"_index":886,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["russian",{"_index":34,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["rxjs",{"_index":1201,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["s.class",{"_index":1120,"title":{},"body":{"injectables/FlightsService.html":{}}}],["s.seats.length",{"_index":1123,"title":{},"body":{"injectables/FlightsService.html":{}}}],["salt",{"_index":705,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["samesite",{"_index":642,"title":{},"body":{"controllers/AuthController.html":{}}}],["schema",{"_index":53,"title":{},"body":{"classes/Airline.html":{},"modules/AirlinesModule.html":{},"classes/Airplane.html":{},"modules/AirplanesModule.html":{},"classes/Airport.html":{},"modules/AirportsModule.html":{},"classes/Flight.html":{},"modules/FlightsModule.html":{},"classes/Seat.html":{},"modules/SeatsModule.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{}}}],["schemafactory",{"_index":54,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(airline",{"_index":66,"title":{},"body":{"classes/Airline.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airplane",{"_index":308,"title":{},"body":{"classes/Airplane.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(airport",{"_index":421,"title":{},"body":{"classes/Airport.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(flight",{"_index":988,"title":{},"body":{"classes/Flight.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(seat",{"_index":1257,"title":{},"body":{"classes/Seat.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(section",{"_index":1303,"title":{},"body":{"classes/Section.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ticket",{"_index":1405,"title":{},"body":{"classes/Ticket.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":1535,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["search",{"_index":992,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(@body",{"_index":1028,"title":{},"body":{"controllers/FlightsController.html":{}}}],["search(flightdto",{"_index":1007,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflightdto",{"_index":1008,"title":{"classes/SearchFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["searchflightdto})@apitoomanyrequestsresponse({description",{"_index":1012,"title":{},"body":{"controllers/FlightsController.html":{}}}],["searchflights",{"_index":1045,"title":{},"body":{"injectables/FlightsService.html":{}}}],["searchflights(flightdto",{"_index":1058,"title":{},"body":{"injectables/FlightsService.html":{}}}],["seat",{"_index":305,"title":{"classes/Seat.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"coverage.html":{}}}],["seat'})@prop({default",{"_index":1387,"title":{},"body":{"classes/Ticket.html":{}}}],["seat'})@prop({required",{"_index":296,"title":{},"body":{"classes/Airplane.html":{},"classes/Seat.html":{}}}],["seat.dto",{"_index":1269,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{}}}],["seat.dto.ts",{"_index":846,"title":{},"body":{"classes/CreateSeatDto.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["seat.dto.ts:16",{"_index":1510,"title":{},"body":{"classes/UpdateSeatDto.html":{}}}],["seat.name",{"_index":1279,"title":{},"body":{"modules/SeatsModule.html":{},"modules/SectionsModule.html":{}}}],["seat.save",{"_index":1292,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seat.status",{"_index":1291,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatdocument",{"_index":1251,"title":{},"body":{"classes/Seat.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["seatdto",{"_index":1260,"title":{},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{}}}],["seatdto.status",{"_index":1290,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatid",{"_index":1287,"title":{},"body":{"injectables/SeatsService.html":{}}}],["seatmodel",{"_index":1284,"title":{},"body":{"injectables/SeatsService.html":{},"injectables/SectionsService.html":{}}}],["seats",{"_index":851,"title":{},"body":{"classes/CreateSectionDto.html":{},"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{},"controllers/SeatsController.html":{},"classes/Section.html":{},"injectables/SectionsService.html":{}}}],["seats'})@prop({trim",{"_index":1299,"title":{},"body":{"classes/Section.html":{}}}],["seats.controller",{"_index":1278,"title":{},"body":{"modules/SeatsModule.html":{}}}],["seats.service",{"_index":1267,"title":{},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{}}}],["seats/seats.module",{"_index":565,"title":{},"body":{"modules/AppModule.html":{}}}],["seatschema",{"_index":1256,"title":{},"body":{"classes/Seat.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["seatscontroller",{"_index":1258,"title":{"controllers/SeatsController.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"coverage.html":{}}}],["seatsmodule",{"_index":538,"title":{"modules/SeatsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SeatsModule.html":{},"index.html":{},"modules.html":{}}}],["seatsservice",{"_index":1266,"title":{"injectables/SeatsService.html":{}},"body":{"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"coverage.html":{},"index.html":{}}}],["seat})@apibadrequestresponse({description",{"_index":1262,"title":{},"body":{"controllers/SeatsController.html":{}}}],["second",{"_index":1235,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["seconddeptime",{"_index":1097,"title":{},"body":{"injectables/FlightsService.html":{},"classes/SearchFlightDto.html":{}}}],["secret",{"_index":666,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":1174,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["section",{"_index":298,"title":{"classes/Section.html":{}},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateSectionDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{}}}],["section'})@apicreatedresponse({description",{"_index":1307,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@apiokresponse({description",{"_index":1312,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section'})@prop({required",{"_index":1245,"title":{},"body":{"classes/Seat.html":{}}}],["section.class",{"_index":1369,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.dto",{"_index":1328,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{}}}],["section.dto.ts",{"_index":849,"title":{},"body":{"classes/CreateSectionDto.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["section.dto.ts:10",{"_index":858,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:20",{"_index":856,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.dto.ts:28",{"_index":860,"title":{},"body":{"classes/CreateSectionDto.html":{}}}],["section.name",{"_index":1341,"title":{},"body":{"modules/SectionsModule.html":{}}}],["section.price",{"_index":1370,"title":{},"body":{"injectables/SectionsService.html":{}}}],["section.save",{"_index":1371,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondocument",{"_index":1301,"title":{},"body":{"classes/Section.html":{},"injectables/SectionsService.html":{},"miscellaneous/typealiases.html":{}}}],["sectiondto",{"_index":1311,"title":{},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{}}}],["sectiondto.class",{"_index":1365,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectiondto.price",{"_index":1364,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionid",{"_index":1355,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sectionmodel",{"_index":1350,"title":{},"body":{"injectables/SectionsService.html":{}}}],["sections",{"_index":287,"title":{},"body":{"classes/Airplane.html":{},"injectables/AirplanesService.html":{},"classes/CreateAirplaneDto.html":{},"injectables/FlightsService.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{}}}],["sections'})@apiokresponse({description",{"_index":1317,"title":{},"body":{"controllers/SectionsController.html":{}}}],["sections'})@prop({trim",{"_index":299,"title":{},"body":{"classes/Airplane.html":{}}}],["sections.controller",{"_index":1340,"title":{},"body":{"modules/SectionsModule.html":{}}}],["sections.service",{"_index":1327,"title":{},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{}}}],["sections/sections.module",{"_index":566,"title":{},"body":{"modules/AppModule.html":{}}}],["sectionschema",{"_index":1302,"title":{},"body":{"classes/Section.html":{},"modules/SectionsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["sectionscontroller",{"_index":1304,"title":{"controllers/SectionsController.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"coverage.html":{}}}],["sectionsmodule",{"_index":539,"title":{"modules/SectionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/SectionsModule.html":{},"index.html":{},"modules.html":{}}}],["sectionsservice",{"_index":1326,"title":{"injectables/SectionsService.html":{}},"body":{"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"coverage.html":{},"index.html":{}}}],["section})@apibadrequestresponse({description",{"_index":1308,"title":{},"body":{"controllers/SectionsController.html":{}}}],["section})@apinotfoundresponse({description",{"_index":1313,"title":{},"body":{"controllers/SectionsController.html":{}}}],["secure",{"_index":644,"title":{},"body":{"controllers/AuthController.html":{}}}],["select",{"_index":257,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FlightsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["set(arr",{"_index":1125,"title":{},"body":{"injectables/FlightsService.html":{}}}],["setmetadata(roles_key",{"_index":1727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sex",{"_index":872,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"miscellaneous/enumerations.html":{}}}],["sex'})@prop({required",{"_index":1389,"title":{},"body":{"classes/Ticket.html":{}}}],["sheremetyevo/шереметьево/svo",{"_index":803,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["sign",{"_index":609,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin",{"_index":597,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@request",{"_index":635,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(req",{"_index":608,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(user",{"_index":680,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":668,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":598,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signup(@body",{"_index":647,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(userdto",{"_index":616,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"modules/AirlinesModule.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"modules/AirplanesModule.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"modules/AirportsModule.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSeatDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"modules/FilesModule.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"modules/FlightsModule.html":{},"injectables/FlightsService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginUserDto.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"modules/SeatsModule.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateAirlineDto.html":{},"classes/UpdateAirplaneDto.html":{},"classes/UpdateAirportDto.html":{},"classes/UpdateFlightDto.html":{},"classes/UpdateSeatDto.html":{},"classes/UpdateSectionDto.html":{},"classes/UpdateTicketDto.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["src/.../airlines.entity.ts",{"_index":1720,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airplane.entity.ts",{"_index":1721,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../airport.entity.ts",{"_index":1722,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../files.service.ts",{"_index":1702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../flights.entity.ts",{"_index":1723,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../jwt.strategy.ts",{"_index":1725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1708,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../roles",{"_index":1726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../seat.entity.ts",{"_index":1705,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../section.entity.ts",{"_index":1701,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ticket.entity.ts",{"_index":1704,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../users.entity.ts",{"_index":1703,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/airlines.controller.ts",{"_index":73,"title":{},"body":{"controllers/AirlinesController.html":{},"coverage.html":{}}}],["src/airlines/airlines.controller.ts:110",{"_index":109,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:53",{"_index":96,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:64",{"_index":114,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:74",{"_index":121,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.controller.ts:92",{"_index":128,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["src/airlines/airlines.module.ts",{"_index":203,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/airlines/airlines.service.ts",{"_index":212,"title":{},"body":{"injectables/AirlinesService.html":{},"coverage.html":{}}}],["src/airlines/airlines.service.ts:11",{"_index":224,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:121",{"_index":230,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:17",{"_index":227,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:50",{"_index":234,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:58",{"_index":233,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/airlines.service.ts:72",{"_index":236,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["src/airlines/dto/create",{"_index":737,"title":{},"body":{"classes/CreateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/dto/update",{"_index":1501,"title":{},"body":{"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["src/airlines/entities/airlines.entity",{"_index":841,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["src/airlines/entities/airlines.entity.ts",{"_index":6,"title":{},"body":{"classes/Airline.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airlines/entities/airlines.entity.ts:14",{"_index":39,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:21",{"_index":33,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:28",{"_index":35,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:36",{"_index":48,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:44",{"_index":46,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:52",{"_index":47,"title":{},"body":{"classes/Airline.html":{}}}],["src/airlines/entities/airlines.entity.ts:59",{"_index":50,"title":{},"body":{"classes/Airline.html":{}}}],["src/airplanes/airplanes.controller.ts",{"_index":310,"title":{},"body":{"controllers/AirplanesController.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.controller.ts:47",{"_index":318,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:55",{"_index":324,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:65",{"_index":327,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:81",{"_index":330,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.controller.ts:95",{"_index":322,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["src/airplanes/airplanes.module",{"_index":1455,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airplanes/airplanes.module.ts",{"_index":349,"title":{},"body":{"modules/AirplanesModule.html":{}}}],["src/airplanes/airplanes.service.ts",{"_index":352,"title":{},"body":{"injectables/AirplanesService.html":{},"coverage.html":{}}}],["src/airplanes/airplanes.service.ts:15",{"_index":359,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:20",{"_index":362,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:36",{"_index":368,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:45",{"_index":367,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:60",{"_index":370,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/airplanes.service.ts:82",{"_index":364,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["src/airplanes/dto/create",{"_index":757,"title":{},"body":{"classes/CreateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/dto/update",{"_index":1503,"title":{},"body":{"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["src/airplanes/entities/airplane.entity",{"_index":842,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/airplanes/entities/airplane.entity.ts",{"_index":284,"title":{},"body":{"classes/Airplane.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airplanes/entities/airplane.entity.ts:17",{"_index":292,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:21",{"_index":297,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airplanes/entities/airplane.entity.ts:29",{"_index":302,"title":{},"body":{"classes/Airplane.html":{}}}],["src/airports/airports.controller.ts",{"_index":423,"title":{},"body":{"controllers/AirportsController.html":{},"coverage.html":{}}}],["src/airports/airports.controller.ts:47",{"_index":430,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:55",{"_index":436,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:65",{"_index":437,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:81",{"_index":442,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.controller.ts:95",{"_index":434,"title":{},"body":{"controllers/AirportsController.html":{}}}],["src/airports/airports.module",{"_index":1456,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/airports/airports.module.ts",{"_index":458,"title":{},"body":{"modules/AirportsModule.html":{}}}],["src/airports/airports.service.ts",{"_index":461,"title":{},"body":{"injectables/AirportsService.html":{},"coverage.html":{}}}],["src/airports/airports.service.ts:10",{"_index":468,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:115",{"_index":473,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:15",{"_index":471,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:42",{"_index":477,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:50",{"_index":476,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/airports.service.ts:64",{"_index":479,"title":{},"body":{"injectables/AirportsService.html":{}}}],["src/airports/dto/create",{"_index":767,"title":{},"body":{"classes/CreateAirportDto.html":{},"coverage.html":{}}}],["src/airports/dto/update",{"_index":1505,"title":{},"body":{"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["src/airports/entities/airport.entity",{"_index":843,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["src/airports/entities/airport.entity.ts",{"_index":386,"title":{},"body":{"classes/Airport.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/airports/entities/airport.entity.ts:11",{"_index":408,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:18",{"_index":406,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:22",{"_index":407,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:26",{"_index":417,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:33",{"_index":403,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:40",{"_index":399,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:47",{"_index":400,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:54",{"_index":414,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:61",{"_index":411,"title":{},"body":{"classes/Airport.html":{}}}],["src/airports/entities/airport.entity.ts:68",{"_index":412,"title":{},"body":{"classes/Airport.html":{}}}],["src/app.controller.ts",{"_index":508,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:29",{"_index":516,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":543,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":592,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts",{"_index":594,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:41",{"_index":615,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:57",{"_index":620,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:68",{"_index":606,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module",{"_index":1585,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/auth/auth.module.ts",{"_index":656,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":671,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:15",{"_index":676,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:21",{"_index":678,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":681,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:40",{"_index":682,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":685,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/roles",{"_index":159,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/guards/jwt",{"_index":1149,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/auth/guards/local",{"_index":1176,"title":{},"body":{"injectables/LocalAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":1191,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:15",{"_index":1195,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:18",{"_index":1198,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":1154,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":1157,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:29",{"_index":1160,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts",{"_index":1178,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/local.strategy.ts:15",{"_index":1182,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/auth/strategies/local.strategy.ts:8",{"_index":1180,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/files/files.module",{"_index":207,"title":{},"body":{"modules/AirlinesModule.html":{}}}],["src/files/files.module.ts",{"_index":937,"title":{},"body":{"modules/FilesModule.html":{}}}],["src/files/files.service.ts",{"_index":939,"title":{},"body":{"injectables/FilesService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["src/files/files.service.ts:12",{"_index":943,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/files/files.service.ts:30",{"_index":945,"title":{},"body":{"injectables/FilesService.html":{}}}],["src/flights/dto/create",{"_index":787,"title":{},"body":{"classes/CreateFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/search",{"_index":1216,"title":{},"body":{"classes/SearchFlightDto.html":{},"coverage.html":{}}}],["src/flights/dto/update",{"_index":1507,"title":{},"body":{"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["src/flights/entities/flights.entity",{"_index":910,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/flights/entities/flights.entity.ts",{"_index":966,"title":{},"body":{"classes/Flight.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/flights/entities/flights.entity.ts:16",{"_index":981,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:27",{"_index":967,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:38",{"_index":968,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:50",{"_index":976,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:57",{"_index":977,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:69",{"_index":969,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:76",{"_index":971,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:80",{"_index":985,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:87",{"_index":973,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:91",{"_index":975,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:95",{"_index":980,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/entities/flights.entity.ts:99",{"_index":983,"title":{},"body":{"classes/Flight.html":{}}}],["src/flights/flights.controller.ts",{"_index":990,"title":{},"body":{"controllers/FlightsController.html":{},"coverage.html":{}}}],["src/flights/flights.controller.ts:106",{"_index":1003,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:48",{"_index":999,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:58",{"_index":1014,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:66",{"_index":1005,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:76",{"_index":1006,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.controller.ts:92",{"_index":1018,"title":{},"body":{"controllers/FlightsController.html":{}}}],["src/flights/flights.module",{"_index":1457,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/flights/flights.module.ts",{"_index":1037,"title":{},"body":{"modules/FlightsModule.html":{}}}],["src/flights/flights.service.ts",{"_index":1040,"title":{},"body":{"injectables/FlightsService.html":{},"coverage.html":{}}}],["src/flights/flights.service.ts:105",{"_index":1061,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:174",{"_index":1053,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:18",{"_index":1048,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:200",{"_index":1059,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:23",{"_index":1051,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:59",{"_index":1055,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/flights/flights.service.ts:79",{"_index":1057,"title":{},"body":{"injectables/FlightsService.html":{}}}],["src/main.ts",{"_index":1643,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/seats/dto/create",{"_index":845,"title":{},"body":{"classes/CreateSeatDto.html":{},"coverage.html":{}}}],["src/seats/dto/update",{"_index":1509,"title":{},"body":{"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["src/seats/entities/seat.entity",{"_index":911,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Section.html":{},"modules/SectionsModule.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{}}}],["src/seats/entities/seat.entity.ts",{"_index":1243,"title":{},"body":{"classes/Seat.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/seats/entities/seat.entity.ts:30",{"_index":1246,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:34",{"_index":1244,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/entities/seat.entity.ts:43",{"_index":1250,"title":{},"body":{"classes/Seat.html":{}}}],["src/seats/seats.controller.ts",{"_index":1259,"title":{},"body":{"controllers/SeatsController.html":{},"coverage.html":{}}}],["src/seats/seats.controller.ts:37",{"_index":1265,"title":{},"body":{"controllers/SeatsController.html":{}}}],["src/seats/seats.module.ts",{"_index":1277,"title":{},"body":{"modules/SeatsModule.html":{}}}],["src/seats/seats.service.ts",{"_index":1280,"title":{},"body":{"injectables/SeatsService.html":{},"coverage.html":{}}}],["src/seats/seats.service.ts:12",{"_index":1286,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/seats/seats.service.ts:9",{"_index":1283,"title":{},"body":{"injectables/SeatsService.html":{}}}],["src/sections/dto/create",{"_index":848,"title":{},"body":{"classes/CreateSectionDto.html":{},"coverage.html":{}}}],["src/sections/dto/update",{"_index":1512,"title":{},"body":{"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["src/sections/entities/section.entity",{"_index":303,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirplaneDto.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{}}}],["src/sections/entities/section.entity.ts",{"_index":1294,"title":{},"body":{"classes/Section.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/sections/entities/section.entity.ts:19",{"_index":1298,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:28",{"_index":1296,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/entities/section.entity.ts:39",{"_index":1300,"title":{},"body":{"classes/Section.html":{}}}],["src/sections/sections.controller.ts",{"_index":1305,"title":{},"body":{"controllers/SectionsController.html":{},"coverage.html":{}}}],["src/sections/sections.controller.ts:48",{"_index":1310,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:56",{"_index":1318,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:66",{"_index":1320,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:82",{"_index":1324,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.controller.ts:96",{"_index":1316,"title":{},"body":{"controllers/SectionsController.html":{}}}],["src/sections/sections.module.ts",{"_index":1339,"title":{},"body":{"modules/SectionsModule.html":{}}}],["src/sections/sections.service.ts",{"_index":1342,"title":{},"body":{"injectables/SectionsService.html":{},"coverage.html":{}}}],["src/sections/sections.service.ts:11",{"_index":1349,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:17",{"_index":1352,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:44",{"_index":1356,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:53",{"_index":1358,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:68",{"_index":1360,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/sections/sections.service.ts:95",{"_index":1354,"title":{},"body":{"injectables/SectionsService.html":{}}}],["src/tickets/dto/create",{"_index":865,"title":{},"body":{"classes/CreateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/dto/update",{"_index":1514,"title":{},"body":{"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["src/tickets/entities/ticket.entity",{"_index":1532,"title":{},"body":{"classes/User.html":{}}}],["src/tickets/entities/ticket.entity.ts",{"_index":1373,"title":{},"body":{"classes/Ticket.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/tickets/entities/ticket.entity.ts:102",{"_index":1382,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:106",{"_index":1397,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:115",{"_index":1391,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:122",{"_index":1388,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:39",{"_index":1385,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:47",{"_index":1395,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:56",{"_index":1390,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:65",{"_index":1393,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:69",{"_index":1383,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:73",{"_index":1386,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:77",{"_index":1375,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:84",{"_index":1380,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:91",{"_index":1377,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/entities/ticket.entity.ts:98",{"_index":1378,"title":{},"body":{"classes/Ticket.html":{}}}],["src/tickets/tickets.controller.ts",{"_index":1407,"title":{},"body":{"controllers/TicketsController.html":{},"coverage.html":{}}}],["src/tickets/tickets.controller.ts:110",{"_index":1430,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:50",{"_index":1417,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:62",{"_index":1426,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:76",{"_index":1422,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.controller.ts:92",{"_index":1435,"title":{},"body":{"controllers/TicketsController.html":{}}}],["src/tickets/tickets.module.ts",{"_index":1453,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/tickets/tickets.service.ts",{"_index":1462,"title":{},"body":{"injectables/TicketsService.html":{},"coverage.html":{}}}],["src/tickets/tickets.service.ts:106",{"_index":1481,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:137",{"_index":1479,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:16",{"_index":1470,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:24",{"_index":1473,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:76",{"_index":1474,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/tickets/tickets.service.ts:86",{"_index":1477,"title":{},"body":{"injectables/TicketsService.html":{}}}],["src/users/dto/change",{"_index":718,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":624,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/login",{"_index":627,"title":{},"body":{"controllers/AuthController.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":1517,"title":{},"body":{"classes/UpdateUserDataDto.html":{},"coverage.html":{}}}],["src/users/entities/users.entity",{"_index":623,"title":{},"body":{"controllers/AuthController.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{}}}],["src/users/entities/users.entity.ts",{"_index":1519,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/users/entities/users.entity.ts:19",{"_index":1522,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:23",{"_index":1523,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:27",{"_index":1527,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:31",{"_index":1525,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:38",{"_index":1521,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:47",{"_index":1529,"title":{},"body":{"classes/User.html":{}}}],["src/users/entities/users.entity.ts:58",{"_index":1531,"title":{},"body":{"classes/User.html":{}}}],["src/users/users.controller.ts",{"_index":1537,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:46",{"_index":1555,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:60",{"_index":1557,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:74",{"_index":1562,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:88",{"_index":1548,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:99",{"_index":1553,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":1458,"title":{},"body":{"modules/TicketsModule.html":{}}}],["src/users/users.module.ts",{"_index":1583,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":1164,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":1586,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:12",{"_index":1595,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:125",{"_index":1601,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:139",{"_index":1604,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:15",{"_index":1599,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:28",{"_index":1602,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:36",{"_index":1606,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:50",{"_index":1608,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:83",{"_index":1597,"title":{},"body":{"injectables/UsersService.html":{}}}],["startof('day",{"_index":1103,"title":{},"body":{"injectables/FlightsService.html":{}}}],["statements",{"_index":1630,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":953,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["status",{"_index":873,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Seat.html":{},"classes/Ticket.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"miscellaneous/enumerations.html":{}}}],["status'})@prop({required",{"_index":1248,"title":{},"body":{"classes/Seat.html":{},"classes/Ticket.html":{}}}],["status.booked",{"_index":1403,"title":{},"body":{"classes/Ticket.html":{}}}],["status.free",{"_index":1255,"title":{},"body":{"classes/Seat.html":{}}}],["status.returned",{"_index":1499,"title":{},"body":{"injectables/TicketsService.html":{}}}],["strategies/jwt.strategy",{"_index":664,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategies/local.strategy",{"_index":663,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":1162,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":19,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/LocalStrategy.html":{},"classes/SearchFlightDto.html":{},"controllers/SectionsController.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["string'})@apibadrequestresponse({description",{"_index":439,"title":{},"body":{"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{}}}],["string'})@apibody({type",{"_index":1322,"title":{},"body":{"controllers/SectionsController.html":{}}}],["string'})@apinotfoundresponse({description",{"_index":106,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/TicketsController.html":{}}}],["string'})@apitoomanyrequestsresponse({description",{"_index":1315,"title":{},"body":{"controllers/SectionsController.html":{},"controllers/UsersController.html":{}}}],["string'})@get(':id",{"_index":120,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["sub",{"_index":693,"title":{},"body":{"injectables/AuthService.html":{}}}],["success",{"_index":103,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["summary",{"_index":165,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["super",{"_index":1171,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":1715,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":1716,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1695,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":1647,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1646,"title":{},"body":{"coverage.html":{}}}],["taxa",{"_index":798,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["taxa'})@prop",{"_index":984,"title":{},"body":{"classes/Flight.html":{}}}],["test@gmail.com",{"_index":905,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["this.airlinemodel",{"_index":245,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.create",{"_index":256,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinemodel.findbyid(airlineid).exec",{"_index":266,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.airlinesservice.createairline(airlinedto",{"_index":174,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.deleteairline(id",{"_index":185,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getairlinebyid(id",{"_index":179,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.getallairlines",{"_index":175,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airlinesservice.updateairlinedata(id",{"_index":182,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["this.airplanemodel",{"_index":374,"title":{},"body":{"injectables/AirplanesService.html":{},"injectables/TicketsService.html":{}}}],["this.airplanemodel.create",{"_index":373,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanemodel.findbyid(airplaneid).exec",{"_index":379,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["this.airplanesservice.createairplane(airplanedto",{"_index":339,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.deleteairplane(id",{"_index":344,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getairplanebyid(id",{"_index":341,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.getallairplanes",{"_index":340,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airplanesservice.updateairplanedata(id",{"_index":343,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["this.airportmodel",{"_index":481,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.create",{"_index":483,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportmodel.findbyid(airportid).exec",{"_index":485,"title":{},"body":{"injectables/AirportsService.html":{}}}],["this.airportsservice.createairport(airportdto",{"_index":449,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.deleteairport(id",{"_index":453,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getairportbyid(id",{"_index":451,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.getallairports",{"_index":450,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.airportsservice.updateairportdata(id",{"_index":452,"title":{},"body":{"controllers/AirportsController.html":{}}}],["this.authservice.getprofile(req.user._id",{"_index":531,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.signin(req.user",{"_index":639,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(userdto",{"_index":648,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.validateuser(email",{"_index":1185,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.filesservice.createfile",{"_index":278,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.filesservice.createfile(folder.airline",{"_index":255,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.filesservice.deletefile(airline.logo",{"_index":277,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["this.flightmodel",{"_index":1066,"title":{},"body":{"injectables/FlightsService.html":{},"injectables/TicketsService.html":{}}}],["this.flightmodel.create",{"_index":1069,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(flightid).exec",{"_index":1071,"title":{},"body":{"injectables/FlightsService.html":{}}}],["this.flightmodel.findbyid(ticket.flight).exec",{"_index":1497,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.flightsservice.createflight(flightdto",{"_index":1026,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.deleteflight(id",{"_index":1033,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getallflights",{"_index":1030,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.getflightbyid(id",{"_index":1031,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.searchflights(flightdto",{"_index":1029,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.flightsservice.updateflightdata(id",{"_index":1032,"title":{},"body":{"controllers/FlightsController.html":{}}}],["this.jwtservice.sign(payload",{"_index":703,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.jwtservice.verify(token",{"_index":1210,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.reflector.getallandoverride",{"_index":1206,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.seatmodel.findbyid(seatid).exec",{"_index":1289,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatmodel.findbyid(seatid).select",{"_index":1293,"title":{},"body":{"injectables/SeatsService.html":{}}}],["this.seatsservice.updateseatdata(id",{"_index":1273,"title":{},"body":{"controllers/SeatsController.html":{}}}],["this.sectionmodel",{"_index":1366,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.create",{"_index":1363,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionmodel.findbyid(sectionid).exec",{"_index":1368,"title":{},"body":{"injectables/SectionsService.html":{}}}],["this.sectionsservice.createsection(sectiondto",{"_index":1331,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.deletesection(id",{"_index":1335,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getallsections",{"_index":1332,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.getsectionbyid(id",{"_index":1333,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.sectionsservice.updatesectiondata(id",{"_index":1334,"title":{},"body":{"controllers/SectionsController.html":{}}}],["this.ticketmodel",{"_index":1493,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.create",{"_index":1488,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketmodel.findbyid(ticketid).exec",{"_index":1496,"title":{},"body":{"injectables/TicketsService.html":{}}}],["this.ticketsservice.createticket(ticketdto",{"_index":1442,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getalltickets",{"_index":1443,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.getticketbyid(req.user._id",{"_index":1445,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.returnticket(req.user._id",{"_index":1448,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.ticketsservice.updateticketdata(req.user._id",{"_index":1446,"title":{},"body":{"controllers/TicketsController.html":{}}}],["this.usermodel",{"_index":1486,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["this.usermodel.create",{"_index":1610,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findbyid(userid).exec",{"_index":1612,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usermodel.findone",{"_index":1626,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.getuserbyemail(payload.email",{"_index":1175,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.changeuserpassword(req.user._id",{"_index":1577,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.createuser",{"_index":709,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.deleteuser(req.user._id",{"_index":1579,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getallusers",{"_index":1570,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyemail(email",{"_index":711,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyemail(userdto.email",{"_index":704,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.getuserbyid(id",{"_index":1571,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.getuserbyid(userid",{"_index":690,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuserdata(req.user._id",{"_index":1574,"title":{},"body":{"controllers/UsersController.html":{}}}],["throttlerguard",{"_index":549,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule",{"_index":550,"title":{},"body":{"modules/AppModule.html":{}}}],["throttlermodule.forrootasync",{"_index":578,"title":{},"body":{"modules/AppModule.html":{}}}],["throw",{"_index":248,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/AuthService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"injectables/SeatsService.html":{},"injectables/SectionsService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["ticket",{"_index":827,"title":{"classes/Ticket.html":{}},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["ticket'})@apicreatedresponse({description",{"_index":1411,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket'})@apiokresponse({description",{"_index":1428,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket.dto",{"_index":1438,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{}}}],["ticket.dto.ts",{"_index":866,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["ticket.dto.ts:105",{"_index":901,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:112",{"_index":895,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:20",{"_index":891,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:25",{"_index":906,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:35",{"_index":898,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:45",{"_index":904,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:50",{"_index":890,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:55",{"_index":894,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:60",{"_index":878,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:68",{"_index":883,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:76",{"_index":881,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:84",{"_index":882,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:90",{"_index":887,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.dto.ts:95",{"_index":909,"title":{},"body":{"classes/CreateTicketDto.html":{}}}],["ticket.name",{"_index":1460,"title":{},"body":{"modules/TicketsModule.html":{}}}],["ticket.save",{"_index":1500,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticket.status",{"_index":1498,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketdocument",{"_index":1398,"title":{},"body":{"classes/Ticket.html":{},"injectables/TicketsService.html":{},"miscellaneous/typealiases.html":{}}}],["ticketdto",{"_index":1418,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{}}}],["ticketid",{"_index":1476,"title":{},"body":{"injectables/TicketsService.html":{}}}],["ticketmodel",{"_index":1471,"title":{},"body":{"injectables/TicketsService.html":{}}}],["tickets",{"_index":1408,"title":{},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/User.html":{}}}],["tickets'})@apiokresponse({description",{"_index":1423,"title":{},"body":{"controllers/TicketsController.html":{}}}],["tickets'})@prop({trim",{"_index":1530,"title":{},"body":{"classes/User.html":{}}}],["tickets.controller",{"_index":1454,"title":{},"body":{"modules/TicketsModule.html":{}}}],["tickets.service",{"_index":1437,"title":{},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{}}}],["tickets/tickets.module",{"_index":562,"title":{},"body":{"modules/AppModule.html":{}}}],["ticketschema",{"_index":1404,"title":{},"body":{"classes/Ticket.html":{},"modules/TicketsModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["ticketscontroller",{"_index":1406,"title":{"controllers/TicketsController.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"coverage.html":{}}}],["ticketsmodule",{"_index":540,"title":{"modules/TicketsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TicketsModule.html":{},"index.html":{},"modules.html":{}}}],["ticketsservice",{"_index":1436,"title":{"injectables/TicketsService.html":{}},"body":{"controllers/TicketsController.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"coverage.html":{},"index.html":{}}}],["ticket})@apibody({type",{"_index":1412,"title":{},"body":{"controllers/TicketsController.html":{}}}],["ticket})@apiparam({name",{"_index":1420,"title":{},"body":{"controllers/TicketsController.html":{}}}],["time",{"_index":810,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["time'})@prop({required",{"_index":970,"title":{},"body":{"classes/Flight.html":{}}}],["toisostring",{"_index":1106,"title":{},"body":{"injectables/FlightsService.html":{}}}],["token",{"_index":1167,"title":{},"body":{"injectables/JwtStrategy.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["tostring",{"_index":1107,"title":{},"body":{"injectables/FlightsService.html":{}}}],["town",{"_index":419,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["town'})@prop({required",{"_index":413,"title":{},"body":{"classes/Airport.html":{}}}],["town'})@prop({trim",{"_index":410,"title":{},"body":{"classes/Airport.html":{}}}],["transformer",{"_index":1670,"title":{},"body":{"dependencies.html":{}}}],["trim",{"_index":31,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true",{"_index":30,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/CreateFlightDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["true})@arraynotempty()@apiproperty({example",{"_index":1222,"title":{},"body":{"classes/SearchFlightDto.html":{}}}],["try",{"_index":253,"title":{},"body":{"injectables/AirlinesService.html":{},"injectables/AirplanesService.html":{},"injectables/AirportsService.html":{},"injectables/FilesService.html":{},"injectables/FlightsService.html":{},"guards/RolesGuard.html":{},"injectables/SectionsService.html":{},"injectables/UsersService.html":{}}}],["ttl",{"_index":575,"title":{},"body":{"modules/AppModule.html":{}}}],["type",{"_index":17,"title":{},"body":{"classes/Airline.html":{},"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/Airplane.html":{},"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/Airport.html":{},"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"injectables/FilesService.html":{},"classes/Flight.html":{},"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/SearchFlightDto.html":{},"classes/Seat.html":{},"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/Section.html":{},"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/Ticket.html":{},"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateSeatDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type'})@prop({required",{"_index":1392,"title":{},"body":{"classes/Ticket.html":{}}}],["typealiases",{"_index":1718,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":1654,"title":{},"body":{"dependencies.html":{}}}],["types/cookie",{"_index":1661,"title":{},"body":{"dependencies.html":{}}}],["types/multer",{"_index":1664,"title":{},"body":{"dependencies.html":{}}}],["ui",{"_index":1696,"title":{},"body":{"dependencies.html":{}}}],["uia",{"_index":22,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateFlightDto.html":{},"classes/Flight.html":{}}}],["ukraine",{"_index":23,"title":{},"body":{"classes/Airline.html":{},"classes/Airport.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateTicketDto.html":{},"classes/Flight.html":{},"classes/Ticket.html":{}}}],["ukrainian",{"_index":36,"title":{},"body":{"classes/Airline.html":{},"classes/CreateAirlineDto.html":{}}}],["ukranian",{"_index":401,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{},"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["unauthorized",{"_index":167,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apibody({type",{"_index":1545,"title":{},"body":{"controllers/UsersController.html":{}}}],["unauthorized'})@apicreatedresponse({description",{"_index":603,"title":{},"body":{"controllers/AuthController.html":{}}}],["unauthorized'})@apiforbiddenresponse({description",{"_index":90,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unauthorized'})@apitoomanyrequestsresponse({description",{"_index":514,"title":{},"body":{"controllers/AppController.html":{},"controllers/UsersController.html":{}}}],["unauthorizedexception",{"_index":687,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["undefined",{"_index":300,"title":{},"body":{"classes/Airplane.html":{},"classes/CreateAirlineDto.html":{},"classes/Flight.html":{},"classes/Seat.html":{},"classes/Section.html":{},"classes/Ticket.html":{},"classes/User.html":{}}}],["undefined})@apibadrequestresponse({description",{"_index":1010,"title":{},"body":{"controllers/FlightsController.html":{}}}],["undefined})@apibody({type",{"_index":612,"title":{},"body":{"controllers/AuthController.html":{}}}],["undefined})@apitoomanyrequestsresponse({description",{"_index":112,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/AuthController.html":{},"controllers/FlightsController.html":{},"controllers/SectionsController.html":{}}}],["undefined})@apiunauthorizedresponse({description",{"_index":1424,"title":{},"body":{"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["unique",{"_index":38,"title":{},"body":{"classes/Airline.html":{},"classes/Airplane.html":{},"classes/Airport.html":{},"classes/Flight.html":{},"classes/User.html":{}}}],["up",{"_index":645,"title":{},"body":{"controllers/AuthController.html":{}}}],["up'})@apibadrequestresponse({description",{"_index":618,"title":{},"body":{"controllers/AuthController.html":{}}}],["update",{"_index":80,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["update(@param('id",{"_index":342,"title":{},"body":{"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(id",{"_index":122,"title":{},"body":{"controllers/AirlinesController.html":{},"controllers/AirplanesController.html":{},"controllers/AirportsController.html":{},"controllers/FlightsController.html":{},"controllers/SeatsController.html":{},"controllers/SectionsController.html":{}}}],["update(req",{"_index":1431,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateairlinedata",{"_index":219,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedata(airlineid",{"_index":235,"title":{},"body":{"injectables/AirlinesService.html":{}}}],["updateairlinedto",{"_index":123,"title":{"classes/UpdateAirlineDto.html":{}},"body":{"controllers/AirlinesController.html":{},"injectables/AirlinesService.html":{},"classes/UpdateAirlineDto.html":{},"coverage.html":{}}}],["updateairlinedto})@apicookieauth()@roles('admin')@useinterceptors(undefined)@apiconsumes('multipart/form",{"_index":126,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["updateairplanedata",{"_index":357,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedata(airplaneid",{"_index":369,"title":{},"body":{"injectables/AirplanesService.html":{}}}],["updateairplanedto",{"_index":328,"title":{"classes/UpdateAirplaneDto.html":{}},"body":{"controllers/AirplanesController.html":{},"injectables/AirplanesService.html":{},"classes/UpdateAirplaneDto.html":{},"coverage.html":{}}}],["updateairplanedto})@apicookieauth()@roles('admin')@patch(':id",{"_index":329,"title":{},"body":{"controllers/AirplanesController.html":{}}}],["updateairportdata",{"_index":466,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdata(airportid",{"_index":478,"title":{},"body":{"injectables/AirportsService.html":{}}}],["updateairportdto",{"_index":438,"title":{"classes/UpdateAirportDto.html":{}},"body":{"controllers/AirportsController.html":{},"injectables/AirportsService.html":{},"classes/UpdateAirportDto.html":{},"coverage.html":{}}}],["updateairportdto})@apicookieauth()@roles('admin')@patch(':id",{"_index":441,"title":{},"body":{"controllers/AirportsController.html":{}}}],["updatedata",{"_index":1540,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(@request",{"_index":1573,"title":{},"body":{"controllers/UsersController.html":{}}}],["updatedata(req",{"_index":1558,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateflightdata",{"_index":1046,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdata(flightid",{"_index":1060,"title":{},"body":{"injectables/FlightsService.html":{}}}],["updateflightdto",{"_index":1015,"title":{"classes/UpdateFlightDto.html":{}},"body":{"controllers/FlightsController.html":{},"injectables/FlightsService.html":{},"classes/UpdateFlightDto.html":{},"coverage.html":{}}}],["updateflightdto})@apitoomanyrequestsresponse({description",{"_index":1016,"title":{},"body":{"controllers/FlightsController.html":{}}}],["updateseatdata",{"_index":1281,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdata(seatid",{"_index":1285,"title":{},"body":{"injectables/SeatsService.html":{}}}],["updateseatdto",{"_index":1261,"title":{"classes/UpdateSeatDto.html":{}},"body":{"controllers/SeatsController.html":{},"injectables/SeatsService.html":{},"classes/UpdateSeatDto.html":{},"coverage.html":{}}}],["updateseatdto})@useguards(jwtauthguard)@apitoomanyrequestsresponse({description",{"_index":1263,"title":{},"body":{"controllers/SeatsController.html":{}}}],["updatesectiondata",{"_index":1347,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondata(sectionid",{"_index":1359,"title":{},"body":{"injectables/SectionsService.html":{}}}],["updatesectiondto",{"_index":1321,"title":{"classes/UpdateSectionDto.html":{}},"body":{"controllers/SectionsController.html":{},"injectables/SectionsService.html":{},"classes/UpdateSectionDto.html":{},"coverage.html":{}}}],["updatesectiondto})@apitoomanyrequestsresponse({description",{"_index":1323,"title":{},"body":{"controllers/SectionsController.html":{}}}],["updateticketdata",{"_index":1467,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdata(userid",{"_index":1480,"title":{},"body":{"injectables/TicketsService.html":{}}}],["updateticketdto",{"_index":1432,"title":{"classes/UpdateTicketDto.html":{}},"body":{"controllers/TicketsController.html":{},"injectables/TicketsService.html":{},"classes/UpdateTicketDto.html":{},"coverage.html":{}}}],["updateticketdto})@apitoomanyrequestsresponse({description",{"_index":1433,"title":{},"body":{"controllers/TicketsController.html":{}}}],["updateuserdata",{"_index":1593,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdata(userid",{"_index":1607,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdatadto",{"_index":1516,"title":{"classes/UpdateUserDataDto.html":{}},"body":{"classes/UpdateUserDataDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdatadto})@apitoomanyrequestsresponse({description",{"_index":1560,"title":{},"body":{"controllers/UsersController.html":{}}}],["uploadedfile",{"_index":133,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["uri",{"_index":584,"title":{},"body":{"modules/AppModule.html":{}}}],["useclass",{"_index":591,"title":{},"body":{"modules/AppModule.html":{}}}],["usecreateindex",{"_index":589,"title":{},"body":{"modules/AppModule.html":{}}}],["usefactory",{"_index":574,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["usefindandmodify",{"_index":588,"title":{},"body":{"modules/AppModule.html":{}}}],["useguards",{"_index":518,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthguard",{"_index":528,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/SeatsController.html":{},"controllers/TicketsController.html":{},"controllers/UsersController.html":{}}}],["useguards(localauthguard",{"_index":633,"title":{},"body":{"controllers/AuthController.html":{}}}],["useinterceptors",{"_index":134,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["useinterceptors(fileinterceptor('logo",{"_index":171,"title":{},"body":{"controllers/AirlinesController.html":{}}}],["usenewurlparser",{"_index":586,"title":{},"body":{"modules/AppModule.html":{}}}],["user",{"_index":521,"title":{"classes/User.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ChangeUserPasswordDto.html":{},"classes/CreateTicketDto.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"guards/RolesGuard.html":{},"classes/Ticket.html":{},"modules/TicketsModule.html":{},"injectables/TicketsService.html":{},"classes/UpdateUserDataDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user'})@apiokresponse({description",{"_index":1550,"title":{},"body":{"controllers/UsersController.html":{}}}],["user'})@prop({required",{"_index":1394,"title":{},"body":{"classes/Ticket.html":{}}}],["user._id",{"_index":694,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.dto",{"_index":625,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDto.html":{},"classes/UpdateUserDataDto.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":917,"title":{},"body":{"classes/CreateUserDto.html":{},"classes/LoginUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:16",{"_index":923,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:22",{"_index":925,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:27",{"_index":930,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:32",{"_index":921,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:38",{"_index":926,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.email",{"_index":692,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.firstname",{"_index":698,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.lastname",{"_index":700,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.name",{"_index":1461,"title":{},"body":{"modules/TicketsModule.html":{},"modules/UsersModule.html":{}}}],["user.password",{"_index":714,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.phonenumber",{"_index":702,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["user.role",{"_index":696,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.role?.includes(role",{"_index":1213,"title":{},"body":{"guards/RolesGuard.html":{}}}],["user.save",{"_index":1491,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["user.tickets.push(ticket._id",{"_index":1490,"title":{},"body":{"injectables/TicketsService.html":{}}}],["userdocument",{"_index":1482,"title":{},"body":{"injectables/TicketsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/typealiases.html":{}}}],["userdto",{"_index":621,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["userdto.email",{"_index":1611,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.firstname",{"_index":1613,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.lastname",{"_index":1614,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.newpassword",{"_index":1619,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.oldpassword",{"_index":1617,"title":{},"body":{"injectables/UsersService.html":{}}}],["userdto.phonenumber",{"_index":1615,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":679,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usermodel",{"_index":1469,"title":{},"body":{"injectables/TicketsService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":1184,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":1538,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["users'})@apiokresponse({description",{"_index":1554,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1584,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1563,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/entities/users.entity",{"_index":522,"title":{},"body":{"controllers/AppController.html":{}}}],["users/users.module",{"_index":557,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users/users.service",{"_index":689,"title":{},"body":{"injectables/AuthService.html":{}}}],["userschema",{"_index":1459,"title":{},"body":{"modules/TicketsModule.html":{},"classes/User.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userscontroller",{"_index":1536,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":1158,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["usersmodule",{"_index":541,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{},"modules.html":{}}}],["usersservice",{"_index":674,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"index.html":{}}}],["user})@apibadrequestresponse({description",{"_index":1559,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apiforbiddenresponse({description",{"_index":512,"title":{},"body":{"controllers/AppController.html":{}}}],["user})@apinotfoundresponse({description",{"_index":1544,"title":{},"body":{"controllers/UsersController.html":{}}}],["user})@apiunauthorizedresponse({description",{"_index":1551,"title":{},"body":{"controllers/UsersController.html":{}}}],["useunifiedtopology",{"_index":587,"title":{},"body":{"modules/AppModule.html":{}}}],["uuid",{"_index":948,"title":{},"body":{"injectables/FilesService.html":{},"dependencies.html":{}}}],["uuid.v4",{"_index":951,"title":{},"body":{"injectables/FilesService.html":{}}}],["validate",{"_index":1155,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":1181,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":1159,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":672,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(email",{"_index":683,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":734,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateAirlineDto.html":{},"classes/CreateAirplaneDto.html":{},"classes/CreateAirportDto.html":{},"classes/CreateFlightDto.html":{},"classes/CreateSectionDto.html":{},"classes/CreateTicketDto.html":{},"classes/CreateUserDto.html":{},"classes/SearchFlightDto.html":{},"classes/UpdateSeatDto.html":{},"dependencies.html":{}}}],["validity",{"_index":874,"title":{},"body":{"classes/CreateTicketDto.html":{},"classes/Ticket.html":{}}}],["validity'})@prop({required",{"_index":1396,"title":{},"body":{"classes/Ticket.html":{}}}],["value",{"_index":1706,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":1636,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":1724,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["writing",{"_index":961,"title":{},"body":{"injectables/FilesService.html":{}}}],["yefremov",{"_index":924,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["z])(?=.*?[0",{"_index":724,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["z])(?=.*?[a",{"_index":723,"title":{},"body":{"classes/ChangeUserPasswordDto.html":{},"classes/CreateUserDto.html":{}}}],["zhulyani",{"_index":404,"title":{},"body":{"classes/Airport.html":{},"classes/CreateAirportDto.html":{}}}],["zhulyani/жуляни/iev",{"_index":820,"title":{},"body":{"classes/CreateFlightDto.html":{},"classes/Flight.html":{},"classes/SearchFlightDto.html":{}}}],["zoom",{"_index":200,"title":{},"body":{"modules/AirlinesModule.html":{},"modules/AirplanesModule.html":{},"modules/AirportsModule.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/FilesModule.html":{},"modules/FlightsModule.html":{},"modules/SeatsModule.html":{},"modules/SectionsModule.html":{},"modules/TicketsModule.html":{},"modules/UsersModule.html":{},"index.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Airline.html":{"url":"classes/Airline.html","title":"class - Airline","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airline\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/entities/airlines.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                airlineNameUa\n                            \n                            \n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Optional\n                                descriptionRu\n                            \n                            \n                                descriptionUa\n                            \n                            \n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:14\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:44\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'logo', description: 'Airline logo'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/entities/airlines.entity.ts:59\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirlineDocument = Airline & Document;\n\n@Schema()\nexport class Airline {\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airlineNameUa: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameEng?: string;\n\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  @Prop({ unique: true, trim: true })\n  airlineNameRu?: string;\n\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  @Prop({ required: true, trim: true })\n  descriptionUa: string;\n\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionEng?: string;\n\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  @Prop({ trim: true })\n  descriptionRu?: string;\n\n  @ApiProperty({\n    example: 'logo',\n    description: 'Airline logo',\n  })\n  @Prop({ required: true, trim: true })\n  logo: string;\n}\nexport const AirlineSchema = SchemaFactory.createForClass(Airline);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirlinesController.html":{"url":"controllers/AirlinesController.html","title":"controller - AirlinesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirlinesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airlines\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airlineDto: CreateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airline'})@ApiCreatedResponse({description: 'Created', type: Airline})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateAirlineDto})@ApiCookieAuth()@Roles('admin')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airline'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airlines'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airline data'})@ApiNotFoundResponse({description: 'Not Found'})@ApiOkResponse({description: 'Success', type: Airline})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiParam({name: 'id', type: 'string'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airlineDto: UpdateAirlineDto, logo: Express.Multer.File)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airline data'})@ApiOkResponse({description: 'Success', type: Airline})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: UpdateAirlineDto})@ApiCookieAuth()@Roles('admin')@UseInterceptors(undefined)@ApiConsumes('multipart/form-data')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airlines/airlines.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                            Express.Multer.File\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UploadedFile,\n  UseInterceptors,\n} from '@nestjs/common';\nimport { FileInterceptor } from '@nestjs/platform-express';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiConsumes,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { Airline } from './entities/airlines.entity';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airlines')\n@Controller('airlines')\nexport class AirlinesController {\n  constructor(private readonly airlinesService: AirlinesService) {}\n\n  @ApiOperation({ summary: 'Create a Airline' })\n  @ApiCreatedResponse({ description: 'Created', type: Airline })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateAirlineDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @UseInterceptors(FileInterceptor('logo'))\n  @ApiConsumes('multipart/form-data')\n  @Post()\n  create(\n    @Body() airlineDto: CreateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.createAirline(airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airlines' })\n  @ApiOkResponse({ description: 'Success', type: [Airline] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.airlinesService.getAllAirlines();\n  }\n\n  @ApiOperation({ summary: 'Get Airline data' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airlinesService.getAirlineById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airline data' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: UpdateAirlineDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @UseInterceptors(FileInterceptor('logo'))\n  @ApiConsumes('multipart/form-data')\n  @Patch(':id')\n  update(\n    @Param('id') id: ObjectId,\n    @Body() airlineDto: UpdateAirlineDto,\n    @UploadedFile() logo: Express.Multer.File,\n  ) {\n    return this.airlinesService.updateAirlineData(id, airlineDto, logo);\n  }\n\n  @ApiOperation({ summary: 'Delete Airline' })\n  @ApiOkResponse({ description: 'Success', type: Airline })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airlinesService.deleteAirline(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirlinesModule.html":{"url":"modules/AirlinesModule.html","title":"module - AirlinesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirlinesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airlines/airlines.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirlinesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            FilesModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirlinesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirlinesService } from './airlines.service';\nimport { AirlinesController } from './airlines.controller';\nimport { FilesModule } from 'src/files/files.module';\nimport { Airline, AirlineSchema } from './entities/airlines.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airline.name, schema: AirlineSchema }]),\n    FilesModule,\n  ],\n  controllers: [AirlinesController],\n  providers: [AirlinesService],\n  exports: [AirlinesService],\n})\nexport class AirlinesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirlinesService.html":{"url":"injectables/AirlinesService.html","title":"injectable - AirlinesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirlinesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/airlines.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirline\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirline\n                            \n                            \n                                    Public\n                                    Async\n                                getAirlineById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirlines\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirlineData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airlineModel: Model, filesService: FilesService)\n                    \n                \n                        \n                            \n                                Defined in src/airlines/airlines.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airlineModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        filesService\n                                                  \n                                                        \n                                                                        FilesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirline(airlineDto: CreateAirlineDto, logo: any)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineDto\n                                    \n                                                CreateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirline\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirline(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirlineById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirlineById(airlineId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirlines\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirlines()\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirlineData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirlineData(airlineId: ObjectId, airlineDto: UpdateAirlineDto, logo: any)\n                \n            \n\n\n            \n                \n                    Defined in src/airlines/airlines.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airlineId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airlineDto\n                                    \n                                                UpdateAirlineDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    logo\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { FilesService, Folder } from '../files/files.service';\nimport { Airline, AirlineDocument } from './entities/airlines.entity';\nimport { CreateAirlineDto } from './dto/create-airline.dto';\nimport { UpdateAirlineDto } from './dto/update-airline.dto';\n\n@Injectable()\nexport class AirlinesService {\n  constructor(\n    @InjectModel(Airline.name) private airlineModel: Model,\n    private filesService: FilesService,\n  ) {}\n\n  public async createAirline(\n    airlineDto: CreateAirlineDto,\n    logo: any,\n  ): Promise {\n    let airline = await this.airlineModel\n      .findOne({\n        airlineNameUa: airlineDto.airlineNameUa,\n      })\n      .exec();\n    if (airline) {\n      throw new HttpException(\n        'Airline with this name already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      const fileName = await this.filesService.createFile(Folder.Airline, logo);\n      airline = await this.airlineModel.create({\n        ...airlineDto,\n        logo: fileName,\n      });\n\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirlines(): Promise {\n    const airlines = await this.airlineModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airlines;\n  }\n\n  public async getAirlineById(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findById(airlineId)\n      .select({ __v: false })\n      .exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n\n  public async updateAirlineData(\n    airlineId: ObjectId,\n    airlineDto: UpdateAirlineDto,\n    logo: any,\n  ): Promise {\n    let airline = await this.airlineModel.findById(airlineId).exec();\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airlineDto.airlineNameEng) {\n      airline.airlineNameEng = airlineDto.airlineNameEng;\n    }\n    if (airlineDto.airlineNameRu) {\n      airline.airlineNameRu = airlineDto.airlineNameRu;\n    }\n    if (airlineDto.descriptionEng) {\n      airline.descriptionEng = airlineDto.descriptionEng;\n    }\n    if (airlineDto.descriptionRu) {\n      airline.descriptionRu = airlineDto.descriptionRu;\n    }\n    if (airlineDto.descriptionUa) {\n      airline.descriptionUa = airlineDto.descriptionUa;\n    }\n\n    try {\n      if (logo) {\n        await this.filesService.deleteFile(airline.logo);\n        const fileName = await this.filesService.createFile(\n          Folder.Airline,\n          logo,\n        );\n        airline.logo = fileName;\n      }\n      await airline.save();\n      airline = await this.airlineModel\n        .findOne({ airlineNameUa: airlineDto.airlineNameUa })\n        .select({ __v: false })\n        .exec();\n      return airline;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async deleteAirline(airlineId: ObjectId): Promise {\n    const airline = await this.airlineModel\n      .findByIdAndDelete(airlineId)\n      .select({ __v: false })\n      .exec();\n    await this.filesService.deleteFile(airline.logo);\n    if (!airline) {\n      throw new HttpException(\n        'Airline with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airline;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airplane.html":{"url":"classes/Airplane.html","title":"class - Airplane","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airplane\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/entities/airplane.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:17\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '45', description: 'Amount Of Seat'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'sections', description: 'Sections'})@Prop({trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/entities/airplane.entity.ts:29\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type AirplaneDocument = Airplane & Document;\n\n@Schema()\nexport class Airplane {\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({ required: true, unique: true, trim: true })\n  airplaneName: string;\n\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  @Prop({ required: true })\n  amountOfSeat: number;\n\n  @ApiProperty({ example: 'sections', description: 'Sections' })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Section',\n  })\n  sections: Section[];\n}\nexport const AirplaneSchema = SchemaFactory.createForClass(Airplane);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirplanesController.html":{"url":"controllers/AirplanesController.html","title":"controller - AirplanesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirplanesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airplanes\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airplaneDto: CreateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airplane'})@ApiCreatedResponse({description: 'Created', type: Airplane})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateAirplaneDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airplane'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airplanes'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airplane data'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airplane data'})@ApiOkResponse({description: 'Success', type: Airplane})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: UpdateAirplaneDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airplanes/airplanes.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { Airplane } from './entities/airplane.entity';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airplanes')\n@Controller('airplanes')\nexport class AirplanesController {\n  constructor(private readonly airplanesService: AirplanesService) {}\n\n  @ApiOperation({ summary: 'Create a Airplane' })\n  @ApiCreatedResponse({ description: 'Created', type: Airplane })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateAirplaneDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() airplaneDto: CreateAirplaneDto) {\n    return this.airplanesService.createAirplane(airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airplanes' })\n  @ApiOkResponse({ description: 'Success', type: [Airplane] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.airplanesService.getAllAirplanes();\n  }\n\n  @ApiOperation({ summary: 'Get Airplane data' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airplanesService.getAirplaneById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airplane data' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: UpdateAirplaneDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airplaneDto: UpdateAirplaneDto) {\n    return this.airplanesService.updateAirplaneData(id, airplaneDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airplane' })\n  @ApiOkResponse({ description: 'Success', type: Airplane })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airplanesService.deleteAirplane(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirplanesModule.html":{"url":"modules/AirplanesModule.html","title":"module - AirplanesModule","body":"\n                   \n\n\n\n\n    Modules\n    AirplanesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airplanes/airplanes.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirplanesController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirplanesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirplanesService } from './airplanes.service';\nimport { AirplanesController } from './airplanes.controller';\nimport { Airplane, AirplaneSchema } from './entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Airplane.name, schema: AirplaneSchema },\n    ]),\n  ],\n  controllers: [AirplanesController],\n  providers: [AirplanesService],\n  exports: [AirplanesService],\n})\nexport class AirplanesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirplanesService.html":{"url":"injectables/AirplanesService.html","title":"injectable - AirplanesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirplanesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/airplanes.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirplane\n                            \n                            \n                                    Public\n                                    Async\n                                getAirplaneById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirplanes\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirplaneData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airplaneModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airplanes/airplanes.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirplane(airplaneDto: CreateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneDto\n                                    \n                                                CreateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirplane\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirplane(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirplaneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirplaneById(airplaneId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirplanes\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirplanes()\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirplaneData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirplaneData(airplaneId: ObjectId, airplaneDto: UpdateAirplaneDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airplanes/airplanes.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airplaneId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airplaneDto\n                                    \n                                                UpdateAirplaneDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Airplane, AirplaneDocument } from './entities/airplane.entity';\nimport { CreateAirplaneDto } from './dto/create-airplane.dto';\nimport { UpdateAirplaneDto } from './dto/update-airplane.dto';\n\n@Injectable()\nexport class AirplanesService {\n  constructor(\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n  ) {}\n\n  public async createAirplane(\n    airplaneDto: CreateAirplaneDto,\n  ): Promise {\n    try {\n      let airplane = await this.airplaneModel.create({ ...airplaneDto });\n      airplane = await this.airplaneModel\n        .findById(airplane._id)\n        .populate({ path: 'sections', select: '-__v' })\n        .select({ __v: false })\n        .exec();\n      return airplane;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirplanes(): Promise {\n    const airplanes = await this.airplaneModel\n      .find()\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplanes;\n  }\n\n  public async getAirplaneById(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n\n  public async updateAirplaneData(\n    airplaneId: ObjectId,\n    airplaneDto: UpdateAirplaneDto,\n  ): Promise {\n    let airplane = await this.airplaneModel.findById(airplaneId).exec();\n    if (!airplane) {\n      throw new BadRequestException('Airplane with this Id not found');\n    }\n\n    if (airplaneDto.airplaneName) {\n      airplane.airplaneName = airplaneDto.airplaneName;\n    }\n    await airplane.save();\n\n    airplane = await this.airplaneModel\n      .findById(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return airplane;\n  }\n\n  public async deleteAirplane(airplaneId: ObjectId): Promise {\n    const airplane = await this.airplaneModel\n      .findByIdAndDelete(airplaneId)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airplane;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Airport.html":{"url":"classes/Airport.html","title":"class - Airport","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Airport\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/entities/airport.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                airportCountryUa\n                            \n                            \n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Optional\n                                airportNameRu\n                            \n                            \n                                airportNameUa\n                            \n                            \n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Optional\n                                airportTownRu\n                            \n                            \n                                airportTownUa\n                            \n                            \n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani', description: 'English airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:18\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляны', description: 'Russian airport name'})@Prop({unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:61\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'IEV', description: 'IATA'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/entities/airport.entity.ts:26\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\n\nexport type AirportDocument = Airport & Document;\n\n@Schema()\nexport class Airport {\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  @Prop({ required: true, unique: true, trim: true })\n  airportNameUa: string;\n\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  @Prop({ unique: true, trim: true })\n  airportNameEng?: string;\n\n  @ApiProperty({ example: 'Жуляны', description: 'Russian airport name' })\n  @Prop({ unique: true, trim: true })\n  airportNameRu?: string;\n\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  @Prop({ required: true, unique: true, trim: true })\n  IATA: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  @Prop({ required: true, trim: true })\n  airportCountryUa: string;\n\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryEng?: string;\n\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  @Prop({ trim: true })\n  airportCountryRu?: string;\n\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  @Prop({ required: true, trim: true })\n  airportTownUa: string;\n\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownEng?: string;\n\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  @Prop({ trim: true })\n  airportTownRu?: string;\n}\nexport const AirportSchema = SchemaFactory.createForClass(Airport);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AirportsController.html":{"url":"controllers/AirportsController.html","title":"controller - AirportsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AirportsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                airports\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(airportDto: CreateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Airport'})@ApiCreatedResponse({description: 'Created', type: Airport})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateAirportDto})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Airport'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Airports'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Airport data'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Airport data'})@ApiOkResponse({description: 'Success', type: Airport})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: UpdateAirportDto})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/airports/airports.controller.ts:81\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { Airport } from './entities/airport.entity';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Airports')\n@Controller('airports')\nexport class AirportsController {\n  constructor(private readonly airportsService: AirportsService) {}\n\n  @ApiOperation({ summary: 'Create a Airport' })\n  @ApiCreatedResponse({ description: 'Created', type: Airport })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateAirportDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() airportDto: CreateAirportDto) {\n    return this.airportsService.createAirport(airportDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Airports' })\n  @ApiOkResponse({ description: 'Success', type: [Airport] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.airportsService.getAllAirports();\n  }\n\n  @ApiOperation({ summary: 'Get Airport data' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.airportsService.getAirportById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Airport data' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: UpdateAirportDto })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() airportDto: UpdateAirportDto) {\n    return this.airportsService.updateAirportData(id, airportDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Airport' })\n  @ApiOkResponse({ description: 'Success', type: Airport })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.airportsService.deleteAirport(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AirportsModule.html":{"url":"modules/AirportsModule.html","title":"module - AirportsModule","body":"\n                   \n\n\n\n\n    Modules\n    AirportsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AirportsModule_exports\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/airports/airports.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AirportsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AirportsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { AirportsService } from './airports.service';\nimport { AirportsController } from './airports.controller';\nimport { Airport, AirportSchema } from './entities/airport.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Airport.name, schema: AirportSchema }]),\n  ],\n  controllers: [AirportsController],\n  providers: [AirportsService],\n  exports: [AirportsService],\n})\nexport class AirportsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AirportsService.html":{"url":"injectables/AirportsService.html","title":"injectable - AirportsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AirportsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/airports.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createAirport\n                            \n                            \n                                    Public\n                                    Async\n                                deleteAirport\n                            \n                            \n                                    Public\n                                    Async\n                                getAirportById\n                            \n                            \n                                    Public\n                                    Async\n                                getAllAirports\n                            \n                            \n                                    Public\n                                    Async\n                                updateAirportData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(airportModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/airports/airports.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        airportModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createAirport(airportDto: CreateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportDto\n                                    \n                                                CreateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteAirport\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteAirport(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:115\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAirportById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAirportById(airportId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllAirports\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllAirports()\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateAirportData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateAirportData(airportId: ObjectId, airportDto: UpdateAirportDto)\n                \n            \n\n\n            \n                \n                    Defined in src/airports/airports.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    airportId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    airportDto\n                                    \n                                                UpdateAirportDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Airport, AirportDocument } from './entities/airport.entity';\nimport { CreateAirportDto } from './dto/create-airport.dto';\nimport { UpdateAirportDto } from './dto/update-airport.dto';\n\n@Injectable()\nexport class AirportsService {\n  constructor(\n    @InjectModel(Airport.name) private airportModel: Model,\n  ) {}\n\n  public async createAirport(airportDto: CreateAirportDto): Promise {\n    let airport = await this.airportModel\n      .findOne({\n        IATA: airportDto.IATA,\n      })\n      .exec();\n    if (airport) {\n      throw new HttpException(\n        'Airport with this IATA already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    try {\n      airport = await this.airportModel.create({ ...airportDto });\n      airport = await this.airportModel\n        .findOne({\n          IATA: airportDto.IATA,\n        })\n        .select({ __v: false })\n        .exec();\n      return airport;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllAirports(): Promise {\n    const airports = await this.airportModel\n      .find()\n      .select({ __v: false })\n      .exec();\n    return airports;\n  }\n\n  public async getAirportById(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n\n  public async updateAirportData(\n    airportId: ObjectId,\n    airportDto: UpdateAirportDto,\n  ): Promise {\n    let airport = await this.airportModel.findById(airportId).exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (airportDto.IATA) {\n      airport.IATA = airportDto.IATA;\n    }\n    if (airportDto.airportCountryEng) {\n      airport.airportCountryEng = airportDto.airportCountryEng;\n    }\n    if (airportDto.airportCountryUa) {\n      airport.airportCountryUa = airportDto.airportCountryUa;\n    }\n    if (airportDto.airportCountryRu) {\n      airport.airportCountryRu = airportDto.airportCountryRu;\n    }\n    if (airportDto.airportNameEng) {\n      airport.airportNameEng = airportDto.airportNameEng;\n    }\n    if (airportDto.airportNameUa) {\n      airport.airportNameUa = airportDto.airportNameUa;\n    }\n    if (airportDto.airportNameRu) {\n      airport.airportNameRu = airportDto.airportNameRu;\n    }\n    if (airportDto.airportTownEng) {\n      airport.airportTownEng = airportDto.airportTownEng;\n    }\n    if (airportDto.airportTownUa) {\n      airport.airportTownUa = airportDto.airportTownUa;\n    }\n    if (airportDto.airportTownRu) {\n      airport.airportTownRu = airportDto.airportTownRu;\n    }\n    await airport.save();\n\n    airport = await this.airportModel\n      .findById(airportId)\n      .select({ __v: false })\n      .exec();\n    return airport;\n  }\n\n  public async deleteAirport(airportId: ObjectId): Promise {\n    const airport = await this.airportModel\n      .findByIdAndDelete(airportId)\n      .select({ __v: false })\n      .exec();\n    if (!airport) {\n      throw new HttpException(\n        'Airport with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return airport;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Profile'})@ApiOkResponse({description: 'Success', type: User})@ApiForbiddenResponse({description: 'Forbidden'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Get('profile')\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, Request, UseGuards } from '@nestjs/common';\nimport {\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\n\nimport { AuthService } from './auth/auth.service';\nimport { User } from './users/entities/users.entity';\nimport { JwtAuthGuard } from './auth/guards/jwt-auth.guard';\n\n@ApiTags('App')\n@Controller()\nexport class AppController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Get Profile' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get('profile')\n  async getProfile(@Request() req: any) {\n    return this.authService.getProfile(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAirlinesModule\n\nAirlinesModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nFilesModule\n\nFilesModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirlinesModule\n                        \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            AuthModule\n                        \n                        \n                            FilesModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            SeatsModule\n                        \n                        \n                            SectionsModule\n                        \n                        \n                            TicketsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { CacheInterceptor, CacheModule, Module } from '@nestjs/common';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ThrottlerGuard, ThrottlerModule } from '@nestjs/throttler';\nimport { APP_GUARD, APP_INTERCEPTOR } from '@nestjs/core';\n\nimport { AppService } from './app.service';\nimport { AppController } from './app.controller';\nimport { UsersModule } from './users/users.module';\nimport { AuthModule } from './auth/auth.module';\nimport { AirportsModule } from './airports/airports.module';\nimport { AirlinesModule } from './airlines/airlines.module';\nimport { FlightsModule } from './flights/flights.module';\nimport { TicketsModule } from './tickets/tickets.module';\nimport { FilesModule } from './files/files.module';\nimport { AirplanesModule } from './airplanes/airplanes.module';\nimport { SeatsModule } from './seats/seats.module';\nimport { SectionsModule } from './sections/sections.module';\nimport { RolesGuard } from './auth/guards/roles.guard';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n      cache: true,\n    }),\n    CacheModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        ttl: configService.get('CACHE_TTL'),\n      }),\n      inject: [ConfigService],\n    }),\n    ThrottlerModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: (config: ConfigService) => ({\n        ttl: config.get('THROTTLE_TTL'),\n        limit: config.get('THROTTLE_LIMIT'),\n      }),\n    }),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('MONGO_DB_URI'),\n        useNewUrlParser: true,\n        useUnifiedTopology: true,\n        useFindAndModify: false,\n        useCreateIndex: true,\n      }),\n      inject: [ConfigService],\n    }),\n    UsersModule,\n    AuthModule,\n    AirportsModule,\n    AirlinesModule,\n    FlightsModule,\n    TicketsModule,\n    FilesModule,\n    AirplanesModule,\n    SeatsModule,\n    SectionsModule,\n  ],\n  controllers: [AppController],\n  providers: [\n    AppService,\n    {\n      provide: APP_INTERCEPTOR,\n      useClass: CacheInterceptor,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: ThrottlerGuard,\n    },\n    {\n      provide: APP_GUARD,\n      useClass: RolesGuard,\n    },\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logOut\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Log Out'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiCreatedResponse({description: 'Created'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@UseGuards(JwtAuthGuard)@ApiCookieAuth()@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(req: any, res: Response)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign In'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBody({type: LoginUserDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@UseGuards(LocalAuthGuard)@Post('signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    res\n                                    \n                                            Response\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Sign Up'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiBody({type: CreateUserDto})@Post('signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Res,\n  Body,\n  Controller,\n  Request,\n  Post,\n  UseGuards,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiOperation,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { Response } from 'express';\n\nimport { AuthService } from './auth.service';\nimport { User } from 'src/users/entities/users.entity';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\nimport { LoginUserDto } from 'src/users/dto/login-user.dto';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { LocalAuthGuard } from './guards/local-auth.guard';\n\n@ApiTags('Authentication')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @ApiOperation({ summary: 'Sign In' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCreatedResponse({ description: 'Created', type: [User] })\n  @ApiBody({ type: LoginUserDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @UseGuards(LocalAuthGuard)\n  @Post('signin')\n  async signIn(@Request() req: any, @Res({ passthrough: true }) res: Response) {\n    const [resBody, jwt] = await this.authService.signIn(req.user);\n    res.cookie('access_token', jwt, {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return resBody;\n  }\n\n  @ApiOperation({ summary: 'Sign Up' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiCreatedResponse({ description: 'Created', type: [User] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiBody({ type: CreateUserDto })\n  @Post('signup')\n  async signUp(@Body() userDto: CreateUserDto) {\n    return await this.authService.signUp(userDto);\n  }\n\n  @ApiOperation({ summary: 'Log Out' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiCreatedResponse({ description: 'Created' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @UseGuards(JwtAuthGuard)\n  @ApiCookieAuth()\n  @Post('logout')\n  async logOut(@Res({ passthrough: true }) res: Response) {\n    res.cookie('access_token', '', {\n      httpOnly: true,\n      sameSite: 'lax',\n      // secure: true,\n    });\n    return;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\nimport { AuthService } from './auth.service';\nimport { AuthController } from './auth.controller';\nimport { UsersModule } from '../users/users.module';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\n\n@Module({\n  imports: [\n    forwardRef(() => UsersModule),\n    PassportModule,\n    ConfigModule.forRoot({\n      envFilePath: `.${process.env.NODE_ENV}.env`,\n    }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_EXPIRES_IN'),\n        },\n      }),\n      inject: [ConfigService],\n    }),\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, LocalStrategy, JwtStrategy],\n  exports: [AuthService, JwtModule],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getProfile\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getProfile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getProfile(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(user: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(email: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  HttpException,\n  HttpStatus,\n  Injectable,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { UsersService } from '../users/users.service';\nimport { CreateUserDto } from 'src/users/dto/create-user.dto';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UsersService,\n    private jwtService: JwtService,\n  ) {}\n\n  async getProfile(userId: ObjectId) {\n    return this.usersService.getUserById(userId);\n  }\n\n  async signIn(user: any) {\n    const payload = { email: user.email, sub: user._id, role: user.role };\n    return [\n      {\n        userId: user._id,\n        email: user.email,\n        firstName: user.firstName,\n        lastName: user.lastName,\n        phoneNumber: user.phoneNumber,\n        role: user.role,\n      },\n      this.jwtService.sign(payload),\n    ];\n  }\n\n  async signUp(userDto: CreateUserDto) {\n    let user = await this.usersService.getUserByEmail(userDto.email);\n    if (user) {\n      throw new HttpException(\n        'User with this email already exists',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n\n    const salt = await bcrypt.genSalt();\n    const hashPassword = await bcrypt.hash(userDto.password, salt);\n    user = await this.usersService.createUser({\n      ...userDto,\n      password: hashPassword,\n    });\n    return user;\n  }\n\n  async validateUser(email: string, pass: string): Promise {\n    const user = await this.usersService.getUserByEmail(email);\n    const passwordEquals = await bcrypt.compare(pass, user.password);\n    if (user && passwordEquals) {\n      return user;\n    }\n    throw new UnauthorizedException({\n      message: 'Incorrect email or password',\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ChangeUserPasswordDto.html":{"url":"classes/ChangeUserPasswordDto.html","title":"class - ChangeUserPasswordDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ChangeUserPasswordDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/change-user-password.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                newPassword\n                            \n                            \n                                    Readonly\n                                oldPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            newPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'B2a3#d1c*', description: 'New Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:15\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            oldPassword\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/change-user-password.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsString, Matches } from 'class-validator';\n\nexport class ChangeUserPasswordDto {\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly oldPassword: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'B2a3#d1c*', description: 'New Password' })\n  readonly newPassword: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirlineDto.html":{"url":"classes/CreateAirlineDto.html","title":"class - CreateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/create-airline.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airlineNameRu\n                            \n                            \n                                    Readonly\n                                airlineNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                descriptionRu\n                            \n                            \n                                    Readonly\n                                descriptionUa\n                            \n                            \n                                    Readonly\n                                logo\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'English name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airlineNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'МАУ (Международные Авиалинии Украины)', description: 'Russian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airlineNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MaxLength(50)@ApiProperty({example: 'МАУ (Міжнародні Авіалінії України)', description: 'Ukrainian name of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(200)@ApiProperty({example: 'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine', description: 'English description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            descriptionRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(200)@ApiProperty({example: 'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.', description: 'Russian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            descriptionUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(200)@ApiProperty({example: 'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України', description: 'Ukrainian description of the airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            logo\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({type: 'file', properties: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airlines/dto/create-airline.dto.ts:71\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty, IsOptional, IsString, MaxLength } from 'class-validator';\n\nexport class CreateAirlineDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'МАУ (Міжнародні Авіалінії України)',\n    description: 'Ukrainian name of the airline',\n  })\n  readonly airlineNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'English name of the airline',\n  })\n  readonly airlineNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'МАУ (Международные Авиалинии Украины)',\n    description: 'Russian name of the airline',\n  })\n  readonly airlineNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Міжнародні Авіалінії України працюють з 1 жовтня 1992 року і є флагманської авіакомпанією України',\n    description: 'Ukrainian description of the airline',\n  })\n  readonly descriptionUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Ukraine International Airlines has been operating since October 1, 1992 and is the flagship airline of Ukraine',\n    description: 'English description of the airline',\n  })\n  readonly descriptionEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(200)\n  @ApiProperty({\n    example:\n      'Международные авиалинии Украины работают с 1 октября 1992 года и являются флагманской авиакомпанией Украины.',\n    description: 'Russian description of the airline',\n  })\n  readonly descriptionRu?: string;\n\n  @ApiProperty({\n    type: 'file',\n    properties: {\n      logo: {\n        type: 'string',\n        format: 'binary',\n      },\n    },\n  })\n  readonly logo: any;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirplaneDto.html":{"url":"classes/CreateAirplaneDto.html","title":"class - CreateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/create-airplane.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airplaneName\n                            \n                            \n                                amountOfSeat\n                            \n                            \n                                    Readonly\n                                sections\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplaneName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@MaxLength(50)@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amountOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@ApiProperty({example: '45', description: 'Amount Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sections\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsArray()@ArrayUnique()@IsNotEmpty()@ApiProperty({example: 'sections', description: 'Sections'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airplanes/dto/create-airplane.dto.ts:35\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  ArrayUnique,\n  IsArray,\n  IsNotEmpty,\n  IsNumber,\n  IsString,\n  MaxLength,\n} from 'class-validator';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport class CreateAirplaneDto {\n  @IsString()\n  @IsNotEmpty()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplaneName: string;\n\n  @IsNotEmpty()\n  @IsNumber()\n  @ApiProperty({ example: '45', description: 'Amount Of Seat' })\n  amountOfSeat: number;\n\n  @IsArray()\n  @ArrayUnique()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'sections',\n    description: 'Sections',\n  })\n  readonly sections: Section[];\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateAirportDto.html":{"url":"classes/CreateAirportDto.html","title":"class - CreateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/create-airport.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportCountryRu\n                            \n                            \n                                    Readonly\n                                airportCountryUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportNameRu\n                            \n                            \n                                    Readonly\n                                airportNameUa\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                airportTownRu\n                            \n                            \n                                    Readonly\n                                airportTownUa\n                            \n                            \n                                    Readonly\n                                IATA\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Ukraine', description: 'The English name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportCountryRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Украина', description: 'The Russian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportCountryUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Україна', description: 'The Ukranian name of the country of the airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Zhulyani', description: 'English airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportNameRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Жуляны', description: 'Russian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportNameUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Жуляни', description: 'Ukranian airport name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Kiev', description: 'The English name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:86\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            airportTownRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@MaxLength(50)@ApiProperty({example: 'Киев', description: 'The Russian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airportTownUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Київ', description: 'The Ukranian name of the airport town'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            IATA\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsUppercase()@Length(2, 4)@ApiProperty({example: 'IEV', description: 'IATA'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/airports/dto/create-airport.dto.ts:41\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  IsUppercase,\n  Length,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateAirportDto {\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({ example: 'Жуляни', description: 'Ukranian airport name' })\n  readonly airportNameUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Zhulyani',\n    description: 'English airport name',\n  })\n  readonly airportNameEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Жуляны',\n    description: 'Russian airport name',\n  })\n  readonly airportNameRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsUppercase()\n  @Length(2, 4)\n  @ApiProperty({ example: 'IEV', description: 'IATA' })\n  readonly IATA: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the country of the airport',\n  })\n  readonly airportCountryUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Ukraine',\n    description: 'The English name of the country of the airport',\n  })\n  readonly airportCountryEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Украина',\n    description: 'The Russian name of the country of the airport',\n  })\n  readonly airportCountryRu?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Київ',\n    description: 'The Ukranian name of the airport town',\n  })\n  readonly airportTownUa: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Kiev',\n    description: 'The English name of the airport town',\n  })\n  readonly airportTownEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Киев',\n    description: 'The Russian name of the airport town',\n  })\n  readonly airportTownRu?: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateFlightDto.html":{"url":"classes/CreateFlightDto.html","title":"class - CreateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/create-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                airline\n                            \n                            \n                                    Readonly\n                                airplane\n                            \n                            \n                                    Readonly\n                                arrivalAirport\n                            \n                            \n                                    Readonly\n                                arrivalTime\n                            \n                            \n                                    Readonly\n                                baggage\n                            \n                            \n                                    Readonly\n                                carryOnBaggage\n                            \n                            \n                                    Readonly\n                                departureAirport\n                            \n                            \n                                    Readonly\n                                departureTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                exchange\n                            \n                            \n                                    Readonly\n                                flightName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                refund\n                            \n                            \n                                    Readonly\n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsMongoId()@IsNotEmpty()@ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:59\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:67\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:78\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsBoolean()@IsNotEmpty()@ApiProperty({example: 'true', description: 'Hand luggage'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:83\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '0.7', description: 'Ticket exchange'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'PS-9065', description: 'Flight name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '0.5', description: 'Ticket return'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '200', description: 'Ticket taxa'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/create-flight.dto.ts:72\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsBoolean,\n  IsMongoId,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n} from 'class-validator';\n\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\nimport { Airport } from 'src/airports/entities/airport.entity';\n\nexport class CreateFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  readonly flightName: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  readonly airline: Airline;\n\n  @IsMongoId()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  readonly airplane: Airplane;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  readonly departureAirport: Airport;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  readonly departureTime: string;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  readonly arrivalAirport: Airport;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  readonly arrivalTime: string;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  readonly taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  readonly baggage: number | null;\n\n  @IsBoolean()\n  @IsNotEmpty()\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  readonly carryOnBaggage: boolean;\n\n  @IsOptional()\n  @ApiPropertyOptional({ example: '0.7', description: 'Ticket exchange' })\n  readonly exchange?: number | null;\n\n  @IsOptional()\n  @ApiPropertyOptional({ example: '0.5', description: 'Ticket return' })\n  readonly refund?: number | null;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSeatDto.html":{"url":"classes/CreateSeatDto.html","title":"class - CreateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/create-seat.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateSeatDto {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateSectionDto.html":{"url":"classes/CreateSectionDto.html","title":"class - CreateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/create-section.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                price\n                            \n                            \n                                    Readonly\n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Class)@ApiProperty({example: 'economy', description: 'Class', enum: Class, enumName: 'Class'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '1700', description: 'Section Price'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNumber()@IsNotEmpty()@ApiProperty({example: '90', description: 'Seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/dto/create-section.dto.ts:28\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty, IsNumber } from 'class-validator';\n\nimport { Class } from '../entities/section.entity';\n\nexport class CreateSectionDto {\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  readonly price: number;\n\n  @IsNotEmpty()\n  @IsEnum(Class)\n  @ApiProperty({\n    example: 'economy',\n    description: 'Class',\n    enum: Class,\n    enumName: 'Class',\n  })\n  readonly class: Class;\n\n  @IsNumber()\n  @IsNotEmpty()\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  readonly seats: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTicketDto.html":{"url":"classes/CreateTicketDto.html","title":"class - CreateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/create-ticket.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                birthday\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Readonly\n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                    Readonly\n                                citizenshipUa\n                            \n                            \n                                    Readonly\n                                document\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                flight\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                    Optional\n                                numberOfSeat\n                            \n                            \n                                    Readonly\n                                sex\n                            \n                            \n                                    Readonly\n                                status\n                            \n                            \n                                    Readonly\n                                type\n                            \n                            \n                                    Readonly\n                                user\n                            \n                            \n                                    Readonly\n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiPropertyOptional({example: 'Ukraine', description: 'The English name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsString()@ApiPropertyOptional({example: 'Украина', description: 'The Russian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@Length(7, 9)@ApiProperty({example: 'RS123456', description: 'Document'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:90\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Dmitry', description: 'First Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'PS-9065', description: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@ApiProperty({example: 'Efremov', description: 'Last Name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:55\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@ApiPropertyOptional({example: '23', description: 'Number Of Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:112\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Sex)@ApiProperty({example: 'male', description: 'Sex', enum: Sex, enumName: 'Sex'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:35\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'booked', description: 'Status', enum: Status, enumName: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:105\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Type)@ApiProperty({example: 'adult', description: 'Type', enum: Type, enumName: 'Type'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsMongoId()@ApiProperty({example: 'test@gmail.com', description: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@IsNotEmpty()@ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/dto/create-ticket.dto.ts:95\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  IsEnum,\n  IsMongoId,\n  IsNotEmpty,\n  IsOptional,\n  IsString,\n  Length,\n} from 'class-validator';\n\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\nimport { User } from 'src/users/entities/users.entity';\nimport { Sex, Status, Type } from '../entities/ticket.entity';\n\nexport class CreateTicketDto {\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  readonly flight: Flight;\n\n  @IsNotEmpty()\n  @IsMongoId()\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  readonly user: User;\n\n  @IsNotEmpty()\n  @IsEnum(Sex)\n  @ApiProperty({\n    example: 'male',\n    description: 'Sex',\n    enum: Sex,\n    enumName: 'Sex',\n  })\n  readonly sex: Sex;\n\n  @IsNotEmpty()\n  @IsEnum(Type)\n  @ApiProperty({\n    example: 'adult',\n    description: 'Type',\n    enum: Type,\n    enumName: 'Type',\n  })\n  readonly type: Type;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  readonly birthday: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  readonly citizenshipUa: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  readonly citizenshipEng?: string;\n\n  @IsOptional()\n  @IsString()\n  @ApiPropertyOptional({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  readonly citizenshipRu?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @Length(7, 9)\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  readonly document: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  readonly validity: string;\n\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({\n    example: 'booked',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  readonly status: Status;\n\n  @IsOptional()\n  @ApiPropertyOptional({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  readonly numberOfSeat?: Seat;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                email\n                            \n                            \n                                    Readonly\n                                firstName\n                            \n                            \n                                    Readonly\n                                lastName\n                            \n                            \n                                    Readonly\n                                password\n                            \n                            \n                                    Readonly\n                                phoneNumber\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEmail()@ApiProperty({example: 'test@gmail.com', description: 'E-mail'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@MaxLength(20)@IsString()@ApiProperty({example: 'Dmitry', description: 'First name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@MaxLength(20)@IsString()@ApiProperty({example: 'Yefremov', description: 'Last name'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')@ApiProperty({example: 'A1b2@c3d!', description: 'Password'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsPhoneNumber()@ApiProperty({example: '380951234567', description: 'Phone number'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/dto/create-user.dto.ts:27\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport {\n  IsEmail,\n  IsNotEmpty,\n  IsPhoneNumber,\n  IsString,\n  Matches,\n  MaxLength,\n} from 'class-validator';\n\nexport class CreateUserDto {\n  @IsNotEmpty()\n  @MaxLength(20)\n  @IsString()\n  @ApiProperty({ example: 'Dmitry', description: 'First name' })\n  readonly firstName: string;\n\n  @IsNotEmpty()\n  @MaxLength(20)\n  @IsString()\n  @ApiProperty({ example: 'Yefremov', description: 'Last name' })\n  readonly lastName: string;\n\n  @IsNotEmpty()\n  @IsPhoneNumber()\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  readonly phoneNumber: number;\n\n  @IsNotEmpty()\n  @IsEmail()\n  @ApiProperty({ example: 'test@gmail.com', description: 'E-mail' })\n  readonly email: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @Matches('^(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#?!@$%^&*-]).{8,12}$')\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  readonly password: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FilesModule.html":{"url":"modules/FilesModule.html","title":"module - FilesModule","body":"\n                   \n\n\n\n\n    Modules\n    FilesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FilesModule_exports\n\n\n\n\nFilesService \n\nFilesService \n\n\n\nFilesModule\n\nFilesModule\n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/files/files.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FilesService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FilesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\n\nimport { FilesService } from './files.service';\n\n@Module({\n  providers: [FilesService],\n  exports: [FilesService],\n})\nexport class FilesModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilesService.html":{"url":"injectables/FilesService.html","title":"injectable - FilesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FilesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/files/files.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createFile\n                            \n                            \n                                    Async\n                                deleteFile\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFile(folder: Folder, file: any)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    folder\n                                    \n                                                Folder\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    file\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteFile\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFile(filePath: any)\n                \n            \n\n\n            \n                \n                    Defined in src/files/files.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport path from 'path';\nimport fs from 'fs';\nimport * as uuid from 'uuid';\n\nexport enum Folder {\n  Airline = 'airline',\n}\n\n@Injectable()\nexport class FilesService {\n  async createFile(folder: Folder, file: any): Promise {\n    try {\n      const fileExtension = file.originalname.split('.').pop();\n      const fileName = uuid.v4() + '.' + fileExtension;\n      const filePath = path.resolve(__dirname, 'static', folder);\n      if (!fs.existsSync(filePath)) {\n        fs.mkdirSync(filePath, { recursive: true });\n      }\n      fs.writeFileSync(path.join(filePath, fileName), file.buffer);\n      return folder + '/' + fileName;\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while writing the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n\n  async deleteFile(filePath: any): Promise {\n    try {\n      const pathToFile = path.resolve(__dirname, 'static', filePath);\n      fs.unlinkSync(pathToFile);\n    } catch (e) {\n      throw new HttpException(\n        'An error occurred while deleting the file',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Flight.html":{"url":"classes/Flight.html","title":"class - Flight","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Flight\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/entities/flights.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                airline\n                            \n                            \n                                airplane\n                            \n                            \n                                arrivalAirport\n                            \n                            \n                                arrivalTime\n                            \n                            \n                                baggage\n                            \n                            \n                                carryOnBaggage\n                            \n                            \n                                departureAirport\n                            \n                            \n                                departureTime\n                            \n                            \n                                    Optional\n                                exchange\n                            \n                            \n                                flightName\n                            \n                            \n                                    Optional\n                                refund\n                            \n                            \n                                taxa\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airline\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airline\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'UIA (Ukraine International Airlines)', description: 'Airline name'})@Prop({required: true, type: undefined, ref: 'Airline'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            airplane\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airplane\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Aerospatiale/Alenia ATR 72', description: 'Airplane name'})@Prop({required: true, type: undefined, ref: 'Airplane'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            arrivalTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-21T09:15:00.000Z', description: 'Arrival time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:76\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            baggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Baggage properties'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:87\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            carryOnBaggage\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'true', description: 'Hand luggage'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureAirport\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Airport\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure airport'})@Prop({required: true, trim: true, type: undefined, ref: 'Airport'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:50\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            departureTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2021-05-16T15:35:00.000Z', description: 'Departure time'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            exchange\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: '0.7', description: 'Ticket exchange'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:95\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flightName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight name'})@Prop({required: true, unique: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            refund\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     number | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: '0.5', description: 'Ticket return'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:99\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            taxa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '200', description: 'Ticket taxa'})@Prop({})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/entities/flights.entity.ts:80\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Airport } from 'src/airports/entities/airport.entity';\nimport { Airline } from 'src/airlines/entities/airlines.entity';\nimport { Airplane } from 'src/airplanes/entities/airplane.entity';\n\nexport type FlightDocument = Flight & Document;\n\n@Schema()\nexport class Flight {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight name' })\n  @Prop({ required: true, unique: true, trim: true })\n  flightName: string;\n\n  @ApiProperty({\n    example: 'UIA (Ukraine International Airlines)',\n    description: 'Airline name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airline',\n  })\n  airline: Airline;\n\n  @ApiProperty({\n    example: 'Aerospatiale/Alenia ATR 72',\n    description: 'Airplane name',\n  })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airplane',\n  })\n  airplane: Airplane;\n\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  departureAirport: Airport;\n\n  @ApiProperty({\n    example: '2021-05-16T15:35:00.000Z',\n    description: 'Departure time',\n  })\n  @Prop({ required: true })\n  departureTime: string;\n\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival airport',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Airport',\n  })\n  arrivalAirport: Airport;\n\n  @ApiProperty({\n    example: '2021-05-21T09:15:00.000Z',\n    description: 'Arrival time',\n  })\n  @Prop({ required: true })\n  arrivalTime: string;\n\n  @ApiProperty({ example: '200', description: 'Ticket taxa' })\n  @Prop({})\n  taxa: number;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Baggage properties',\n  })\n  @Prop({})\n  baggage: number | null;\n\n  @ApiProperty({ example: 'true', description: 'Hand luggage' })\n  @Prop({ required: true })\n  carryOnBaggage: boolean;\n\n  @ApiPropertyOptional({ example: '0.7', description: 'Ticket exchange' })\n  @Prop({})\n  exchange?: number | null;\n\n  @ApiPropertyOptional({ example: '0.5', description: 'Ticket return' })\n  @Prop({})\n  refund?: number | null;\n}\nexport const FlightSchema = SchemaFactory.createForClass(Flight);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/FlightsController.html":{"url":"controllers/FlightsController.html","title":"controller - FlightsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  FlightsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                flights\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                search\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(flightDto: CreateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Flight'})@ApiCreatedResponse({description: 'Created', type: Flight})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateFlightDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Flight'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Flights'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Flight data'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            search\n                        \n                        \n                    \n                \n            \n            \n                \nsearch(flightDto: SearchFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Search Flights'})@ApiCreatedResponse({description: 'Created', type: undefined})@ApiBadRequestResponse({description: 'Bad Request'})@ApiBody({type: SearchFlightDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Post('search')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Flight data'})@ApiOkResponse({description: 'Success', type: Flight})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateFlightDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/flights/flights.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { Flight } from './entities/flights.entity';\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Flights')\n@Controller('flights')\nexport class FlightsController {\n  constructor(private readonly flightsService: FlightsService) {}\n\n  @ApiOperation({ summary: 'Create a Flight' })\n  @ApiCreatedResponse({ description: 'Created', type: Flight })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateFlightDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() flightDto: CreateFlightDto) {\n    return this.flightsService.createFlight(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Search Flights' })\n  @ApiCreatedResponse({ description: 'Created', type: [Flight] })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiBody({ type: SearchFlightDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Post('search')\n  search(@Body() flightDto: SearchFlightDto) {\n    return this.flightsService.searchFlights(flightDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Flights' })\n  @ApiOkResponse({ description: 'Success', type: [Flight] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.flightsService.getAllFlights();\n  }\n\n  @ApiOperation({ summary: 'Get Flight data' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.flightsService.getFlightById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Flight data' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateFlightDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() flightDto: UpdateFlightDto) {\n    return this.flightsService.updateFlightData(id, flightDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Flight' })\n  @ApiOkResponse({ description: 'Success', type: Flight })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.flightsService.deleteFlight(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/FlightsModule.html":{"url":"modules/FlightsModule.html","title":"module - FlightsModule","body":"\n                   \n\n\n\n\n    Modules\n    FlightsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_FlightsModule_exports\n\n\n\n\nFlightsService \n\nFlightsService \n\n\n\nFlightsModule\n\nFlightsModule\n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/flights/flights.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            FlightsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            FlightsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { FlightsService } from './flights.service';\nimport { FlightsController } from './flights.controller';\nimport { Flight, FlightSchema } from './entities/flights.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Flight.name, schema: FlightSchema }]),\n  ],\n  controllers: [FlightsController],\n  providers: [FlightsService],\n  exports: [FlightsService],\n})\nexport class FlightsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FlightsService.html":{"url":"injectables/FlightsService.html","title":"injectable - FlightsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  FlightsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/flights.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createFlight\n                            \n                            \n                                    Public\n                                    Async\n                                deleteFlight\n                            \n                            \n                                    Public\n                                    Async\n                                getAllFlights\n                            \n                            \n                                    Public\n                                    Async\n                                getFlightById\n                            \n                            \n                                    Public\n                                    Async\n                                searchFlights\n                            \n                            \n                                    Public\n                                    Async\n                                updateFlightData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(flightModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/flights/flights.service.ts:18\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createFlight(flightDto: CreateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                CreateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteFlight\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteFlight(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:174\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllFlights()\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getFlightById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getFlightById(flightId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:79\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            searchFlights\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    searchFlights(flightDto: SearchFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightDto\n                                    \n                                                SearchFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateFlightData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateFlightData(flightId: ObjectId, flightDto: UpdateFlightDto)\n                \n            \n\n\n            \n                \n                    Defined in src/flights/flights.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    flightId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    flightDto\n                                    \n                                                UpdateFlightDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  BadRequestException,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport Fuse from 'fuse.js';\nimport moment from 'moment';\n\nimport { CreateFlightDto } from './dto/create-flight.dto';\nimport { SearchFlightDto } from './dto/search-flight.dto';\nimport { UpdateFlightDto } from './dto/update-flight.dto';\nimport { Flight, FlightDocument } from './entities/flights.entity';\n\n@Injectable()\nexport class FlightsService {\n  constructor(\n    @InjectModel(Flight.name) private flightModel: Model,\n  ) {}\n\n  public async createFlight(flightDto: CreateFlightDto): Promise {\n    let flight = await this.flightModel\n      .findOne({\n        flightName: flightDto.flightName,\n      })\n      .exec();\n    if (flight) {\n      throw new BadRequestException('Flight with this name already exists');\n    }\n\n    try {\n      flight = await this.flightModel.create({ ...flightDto });\n      flight = await this.flightModel\n        .findOne({\n          flightName: flightDto.flightName,\n        })\n        .select({ __v: false })\n        .populate({ path: 'airline', select: '-__v' })\n        .populate({\n          path: 'airplane',\n          select: '-__v',\n          populate: {\n            path: 'sections',\n            select: '-__v',\n            populate: { path: 'seats', select: '-__v' },\n          },\n        })\n        .populate({ path: 'departureAirport', select: '-__v' })\n        .populate({ path: 'arrivalAirport', select: '-__v' })\n        .exec();\n      return flight;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllFlights(): Promise {\n    const flights = await this.flightModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flights;\n  }\n\n  public async getFlightById(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return flight;\n  }\n\n  public async updateFlightData(\n    flightId: ObjectId,\n    flightDto: UpdateFlightDto,\n  ): Promise {\n    let flight = await this.flightModel.findById(flightId).exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (flightDto.airline) {\n      flight.airline = flightDto.airline;\n    }\n    if (flightDto.airplane) {\n      flight.airplane = flightDto.airplane;\n    }\n    if (flightDto.arrivalAirport) {\n      flight.arrivalAirport = flightDto.arrivalAirport;\n    }\n    if (flightDto.arrivalTime) {\n      flight.arrivalTime = flightDto.arrivalTime;\n    }\n    if (flightDto.baggage) {\n      flight.baggage = flightDto.baggage;\n    }\n    if (flightDto.carryOnBaggage) {\n      flight.carryOnBaggage = flightDto.carryOnBaggage;\n    }\n    if (flightDto.departureAirport) {\n      flight.departureAirport = flightDto.departureAirport;\n    }\n    if (flightDto.departureTime) {\n      flight.departureTime = flightDto.departureTime;\n    }\n    if (flightDto.exchange) {\n      flight.exchange = flightDto.exchange;\n    }\n    if (flightDto.flightName) {\n      flight.flightName = flightDto.flightName;\n    }\n    if (flightDto.refund) {\n      flight.refund = flightDto.refund;\n    }\n    if (flightDto.taxa) {\n      flight.taxa = flightDto.taxa;\n    }\n    await flight.save();\n\n    flight = await this.flightModel\n      .findById(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    return flight;\n  }\n\n  public async deleteFlight(flightId: ObjectId): Promise {\n    const flight = await this.flightModel\n      .findByIdAndDelete(flightId)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return flight;\n  }\n\n  public async searchFlights(flightDto: SearchFlightDto): Promise {\n    let secondDepTime: string = flightDto.firstDepTime;\n    if (flightDto.secondDepTime) {\n      secondDepTime = flightDto.secondDepTime;\n    }\n\n    const initialFlights = await this.flightModel\n      .find({\n        departureTime: {\n          $gte: moment(flightDto.firstDepTime)\n            .startOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n          $lte: moment(secondDepTime)\n            .endOf('day')\n            .add(3, 'hours')\n            .toISOString()\n            .toString(),\n        },\n      })\n      .select({ __v: false })\n      .populate({\n        path: 'airline',\n        select: '-__v',\n      })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        populate: {\n          path: 'sections',\n          select: '-__v',\n          match: { class: { $in: flightDto.class } },\n          populate: { path: 'seats', select: '-__v' },\n        },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    const arr = [];\n    initialFlights.forEach((a) => {\n      if (flightDto.class.length > 1) {\n        if (a.airplane.amountOfSeat >= flightDto.count) {\n          a.airplane.sections.forEach((s) => {\n            for (const q of flightDto.class)\n              if (s.class === q) {\n                arr.push(a);\n                break;\n              }\n          });\n        }\n      } else {\n        a.airplane.sections.forEach((s) => {\n          for (const q of flightDto.class)\n            if (s.class === q) {\n              if (s.seats.length >= flightDto.count) {\n                arr.push(a);\n              }\n            }\n        });\n      }\n    });\n    const flights = Array.from(new Set(arr));\n\n    const optionsForDeparture = {\n      includeScore: true,\n      keys: [\n        'departureAirport.airportNameUa',\n        'departureAirport.airportNameEng',\n        'departureAirport.airportNameRu',\n        'departureAirport.IATA',\n        'departureAirport.airportTownUa',\n        'departureAirport.airportTownEng',\n        'departureAirport.airportTownRu',\n      ],\n    };\n\n    let fuse = new Fuse(flights, optionsForDeparture);\n    let result = fuse.search(flightDto.departure).map((r) => r.item);\n    const optionsForArrival = {\n      includeScore: true,\n      keys: [\n        'arrivalAirport.airportNameUa',\n        'arrivalAirport.airportNameEng',\n        'arrivalAirport.airportNameRu',\n        'arrivalAirport.IATA',\n        'arrivalAirport.airportTownUa',\n        'arrivalAirport.airportTownEng',\n        'arrivalAirport.airportTownRu',\n      ],\n    };\n\n    fuse = new Fuse(result, optionsForArrival);\n    result = fuse.search(flightDto.arrival).map((r) => r.item);\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/jwt-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-jwt';\nimport { ConfigService } from '@nestjs/config';\n\nimport { UsersService } from 'src/users/users.service';\n\nconst cookieExtractor = function (req: any) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n};\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private userService: UsersService,\n    private configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: cookieExtractor,\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: any) {\n    const user = await this.userService.getUserByEmail(payload.email);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthGuard.html":{"url":"injectables/LocalAuthGuard.html","title":"injectable - LocalAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/local-auth.guard.ts\n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/local.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/local.strategy.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport';\nimport { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { Strategy } from 'passport-local';\n\nimport { AuthService } from '../auth.service';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authService: AuthService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n\n  async validate(email: string, password: string): Promise {\n    const user = await this.authService.validateUser(email, password);\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDto.html":{"url":"classes/LoginUserDto.html","title":"class - LoginUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/login-user.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class LoginUserDto extends PartialType(\n  OmitType(CreateUserDto, ['firstName', 'lastName', 'phoneNumber'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            canActivate\n                        \n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     boolean | Promise | Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  CanActivate,\n  ExecutionContext,\n  HttpException,\n  HttpStatus,\n  Injectable,\n} from '@nestjs/common';\nimport { Observable } from 'rxjs';\nimport { JwtService } from '@nestjs/jwt';\nimport { Reflector } from '@nestjs/core';\n\nimport { ROLES_KEY } from '../decorators/roles-auth.decorator';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private jwtService: JwtService, private reflector: Reflector) {}\n\n  canActivate(\n    context: ExecutionContext,\n  ): boolean | Promise | Observable {\n    try {\n      const requiredRoles = this.reflector.getAllAndOverride(\n        ROLES_KEY,\n        [context.getHandler(), context.getClass()],\n      );\n      if (!requiredRoles) {\n        return true;\n      }\n\n      const req = context.switchToHttp().getRequest();\n      let token = null;\n      if (req && req.cookies) {\n        token = req.cookies['access_token'];\n      }\n\n      const user = this.jwtService.verify(token);\n      req.user = user;\n      return requiredRoles.some((role) => user.role?.includes(role));\n    } catch (e) {\n      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);\n    }\n  }\n}\n\n        \n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SearchFlightDto.html":{"url":"classes/SearchFlightDto.html","title":"class - SearchFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SearchFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/search-flight.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                arrival\n                            \n                            \n                                    Readonly\n                                class\n                            \n                            \n                                    Readonly\n                                count\n                            \n                            \n                                    Readonly\n                                departure\n                            \n                            \n                                    Readonly\n                                firstDepTime\n                            \n                            \n                                    Readonly\n                                    Optional\n                                secondDepTime\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            arrival\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Sheremetyevo/Шереметьево/SVO', description: 'Arrival'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:53\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsArray()@IsEnum(Class, {each: true})@ArrayNotEmpty()@ApiProperty({example: '[\"business\"]', description: 'Class of section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            count\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsNumber()@Min(1)@Max(9)@ApiProperty({example: '3', description: 'Count of seats'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            departure\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@MaxLength(50)@ApiProperty({example: 'Zhulyani/Жуляни/IEV', description: 'Departure'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            firstDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsString()@IsDateString()@ApiProperty({example: '2021-05-15T15:35:00.000Z', description: 'First range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                                Optional\n                            secondDepTime\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()@IsString()@IsDateString()@ApiPropertyOptional({example: '2021-05-18T15:35:00.000Z', description: 'Second range departure time'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/flights/dto/search-flight.dto.ts:44\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport {\n  ArrayNotEmpty,\n  IsArray,\n  IsDateString,\n  IsEnum,\n  IsNotEmpty,\n  IsNumber,\n  IsOptional,\n  IsString,\n  Max,\n  MaxLength,\n  Min,\n} from 'class-validator';\nimport { Class } from 'src/sections/entities/section.entity';\n\nexport class SearchFlightDto {\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Zhulyani/Жуляни/IEV',\n    description: 'Departure',\n  })\n  readonly departure: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @IsDateString()\n  @ApiProperty({\n    example: '2021-05-15T15:35:00.000Z',\n    description: 'First range departure time',\n  })\n  readonly firstDepTime: string;\n\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @IsDateString()\n  @ApiPropertyOptional({\n    example: '2021-05-18T15:35:00.000Z',\n    description: 'Second range departure time',\n  })\n  readonly secondDepTime?: string;\n\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(50)\n  @ApiProperty({\n    example: 'Sheremetyevo/Шереметьево/SVO',\n    description: 'Arrival',\n  })\n  readonly arrival: string;\n\n  @IsNotEmpty()\n  @IsArray()\n  @IsEnum(Class, { each: true })\n  @ArrayNotEmpty()\n  @ApiProperty({\n    example: '[\"business\"]',\n    description: 'Class of section',\n  })\n  readonly class: Class[];\n\n  @IsNotEmpty()\n  @IsNumber()\n  @Min(1)\n  @Max(9)\n  @ApiProperty({\n    example: '3',\n    description: 'Count of seats',\n  })\n  readonly count: number;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Seat.html":{"url":"classes/Seat.html","title":"class - Seat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Seat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/entities/seat.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                number\n                            \n                            \n                                section\n                            \n                            \n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            number\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1', description: 'Number of Seat'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            section\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Section\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Section', description: 'Section'})@Prop({required: true, trim: true, type: undefined, ref: 'Section'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'free', description: 'Status', enum: Status, enumName: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/entities/seat.entity.ts:43\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Section } from 'src/sections/entities/section.entity';\n\nexport type SeatDocument = Seat & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  Free = 'free',\n  NotAvailable = 'notAvailable',\n}\n\n@Schema()\nexport class Seat {\n  @ApiProperty({\n    example: 'Section',\n    description: 'Section',\n  })\n  @Prop({\n    required: true,\n    trim: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Section',\n  })\n  section: Section;\n\n  @ApiProperty({ example: '1', description: 'Number of Seat' })\n  @Prop({ required: true, trim: true })\n  number: number;\n\n  @ApiProperty({\n    example: 'free',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Free })\n  status: Status;\n}\nexport const SeatSchema = SchemaFactory.createForClass(Seat);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SeatsController.html":{"url":"controllers/SeatsController.html","title":"controller - SeatsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SeatsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                seats\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Seat data'})@ApiOkResponse({description: 'Success', type: Seat})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateSeatDto})@UseGuards(JwtAuthGuard)@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Patch(':id/update')\n                \n            \n\n            \n                \n                    Defined in src/seats/seats.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Param, Patch, UseGuards } from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { Seat } from './entities/seat.entity';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Seats')\n@Controller('seats')\nexport class SeatsController {\n  constructor(private readonly seatsService: SeatsService) {}\n\n  @ApiOperation({ summary: 'Update Seat data' })\n  @ApiOkResponse({ description: 'Success', type: Seat })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateSeatDto })\n  @UseGuards(JwtAuthGuard)\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Patch(':id/update')\n  update(@Param('id') id: ObjectId, @Body() seatDto: UpdateSeatDto) {\n    return this.seatsService.updateSeatData(id, seatDto);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SeatsModule.html":{"url":"modules/SeatsModule.html","title":"module - SeatsModule","body":"\n                   \n\n\n\n\n    Modules\n    SeatsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SeatsModule_exports\n\n\n\n\nSeatsService \n\nSeatsService \n\n\n\nSeatsModule\n\nSeatsModule\n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/seats/seats.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SeatsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SeatsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SeatsService } from './seats.service';\nimport { SeatsController } from './seats.controller';\nimport { Seat, SeatSchema } from './entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SeatsController],\n  providers: [SeatsService],\n  exports: [SeatsService],\n})\nexport class SeatsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SeatsService.html":{"url":"injectables/SeatsService.html","title":"injectable - SeatsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SeatsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/seats.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                updateSeatData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/seats/seats.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSeatData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSeatData(seatId: ObjectId, seatDto: UpdateSeatDto)\n                \n            \n\n\n            \n                \n                    Defined in src/seats/seats.service.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    seatId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    seatDto\n                                    \n                                                UpdateSeatDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Seat, SeatDocument } from './entities/seat.entity';\nimport { UpdateSeatDto } from './dto/update-seat.dto';\n\n@Injectable()\nexport class SeatsService {\n  constructor(@InjectModel(Seat.name) private seatModel: Model) {}\n\n  public async updateSeatData(\n    seatId: ObjectId,\n    seatDto: UpdateSeatDto,\n  ): Promise {\n    let seat = await this.seatModel.findById(seatId).exec();\n    if (!seat) {\n      throw new HttpException(\n        'Seat with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    if (seatDto.status) {\n      seat.status = seatDto.status;\n    }\n\n    await seat.save();\n    seat = await this.seatModel.findById(seatId).select({ __v: false }).exec();\n    return seat;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Section.html":{"url":"classes/Section.html","title":"class - Section","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Section\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/entities/section.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                class\n                            \n                            \n                                price\n                            \n                            \n                                seats\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            class\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Class\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'economy', description: 'Class', enum: Class, enumName: 'Class'})@Prop({required: true, trim: true, enum: Class})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            price\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '1700', description: 'Section Price'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            seats\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '90', description: 'Seats'})@Prop({trim: true, type: undefined, ref: 'Seat'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/sections/entities/section.entity.ts:39\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport * as mongoose from 'mongoose';\n\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type SectionDocument = Section & Document;\n\nexport enum Class {\n  Business = 'business',\n  Economy = 'economy',\n}\n\n@Schema()\nexport class Section {\n  @ApiProperty({ example: '1700', description: 'Section Price' })\n  @Prop({ required: true, trim: true })\n  price: number;\n\n  @ApiProperty({\n    example: 'economy',\n    description: 'Class',\n    enum: Class,\n    enumName: 'Class',\n  })\n  @Prop({ required: true, trim: true, enum: Class })\n  class: Class;\n\n  @ApiProperty({\n    example: '90',\n    description: 'Seats',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Seat',\n  })\n  seats: Seat[];\n}\nexport const SectionSchema = SchemaFactory.createForClass(Section);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/SectionsController.html":{"url":"controllers/SectionsController.html","title":"controller - SectionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  SectionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                sections\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(sectionDto: CreateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Create a Section'})@ApiCreatedResponse({description: 'Created', type: Section})@ApiBadRequestResponse({description: 'BadRequest'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: CreateSectionDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Post()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete Section'})@ApiOkResponse({description: 'Success', type: Section})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:96\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Sections'})@ApiOkResponse({description: 'Success', type: undefined})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get()\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:56\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Section data'})@ApiOkResponse({description: 'Success', type: Section})@ApiNotFoundResponse({description: 'Not Found'})@ApiParam({name: 'id', type: 'string'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(id: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Section data'})@ApiOkResponse({description: 'Success', type: Section})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiBody({type: UpdateSectionDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/sections/sections.controller.ts:82\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Delete,\n  Get,\n  Param,\n  Patch,\n  Post,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiResponse,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\nimport { Section } from './entities/section.entity';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\n\n@ApiTags('Sections')\n@Controller('sections')\nexport class SectionsController {\n  constructor(private readonly sectionsService: SectionsService) {}\n\n  @ApiOperation({ summary: 'Create a Section' })\n  @ApiCreatedResponse({ description: 'Created', type: Section })\n  @ApiBadRequestResponse({ description: 'BadRequest' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: CreateSectionDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Post()\n  create(@Body() sectionDto: CreateSectionDto) {\n    return this.sectionsService.createSection(sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Sections' })\n  @ApiOkResponse({ description: 'Success', type: [Section] })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get()\n  findAll() {\n    return this.sectionsService.getAllSections();\n  }\n\n  @ApiOperation({ summary: 'Get Section data' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.sectionsService.getSectionById(id);\n  }\n\n  @ApiOperation({ summary: 'Update Section data' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBody({ type: UpdateSectionDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Patch(':id')\n  update(@Param('id') id: ObjectId, @Body() sectionDto: UpdateSectionDto) {\n    return this.sectionsService.updateSectionData(id, sectionDto);\n  }\n\n  @ApiOperation({ summary: 'Delete Section' })\n  @ApiOkResponse({ description: 'Success', type: Section })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Delete(':id')\n  delete(@Param('id') id: ObjectId) {\n    return this.sectionsService.deleteSection(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SectionsModule.html":{"url":"modules/SectionsModule.html","title":"module - SectionsModule","body":"\n                   \n\n\n\n\n    Modules\n    SectionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\n\nSectionsService \n\nSectionsService \n\n\n\nSectionsModule\n\nSectionsModule\n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/sections/sections.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            SectionsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            SectionsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { SectionsService } from './sections.service';\nimport { SectionsController } from './sections.controller';\nimport { Section, SectionSchema } from './entities/section.entity';\nimport { Seat, SeatSchema } from 'src/seats/entities/seat.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Section.name, schema: SectionSchema }]),\n    MongooseModule.forFeature([{ name: Seat.name, schema: SeatSchema }]),\n  ],\n  controllers: [SectionsController],\n  providers: [SectionsService],\n  exports: [SectionsService],\n})\nexport class SectionsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SectionsService.html":{"url":"injectables/SectionsService.html","title":"injectable - SectionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  SectionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/sections.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createSection\n                            \n                            \n                                    Public\n                                    Async\n                                deleteSection\n                            \n                            \n                                    Public\n                                    Async\n                                getAllSections\n                            \n                            \n                                    Public\n                                    Async\n                                getSectionById\n                            \n                            \n                                    Public\n                                    Async\n                                updateSectionData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sectionModel: Model, seatModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/sections/sections.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        sectionModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        seatModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createSection(sectionDto: CreateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionDto\n                                    \n                                                CreateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteSection\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteSection(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:95\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllSections\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllSections()\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getSectionById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getSectionById(sectionId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateSectionData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateSectionData(sectionId: ObjectId, sectionDto: UpdateSectionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/sections/sections.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    sectionId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    sectionDto\n                                    \n                                                UpdateSectionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Section, SectionDocument } from './entities/section.entity';\nimport { Seat, SeatDocument } from 'src/seats/entities/seat.entity';\nimport { CreateSectionDto } from './dto/create-section.dto';\nimport { UpdateSectionDto } from './dto/update-section.dto';\n\n@Injectable()\nexport class SectionsService {\n  constructor(\n    @InjectModel(Section.name) private sectionModel: Model,\n    @InjectModel(Seat.name) private seatModel: Model,\n  ) {}\n\n  public async createSection(sectionDto: CreateSectionDto): Promise {\n    try {\n      let section = await this.sectionModel.create({\n        price: sectionDto.price,\n        class: sectionDto.class,\n        seats: [],\n      });\n      for (let i = 1; i  {\n    const sections = await this.sectionModel\n      .find()\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    return sections;\n  }\n\n  public async getSectionById(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findById(sectionId)\n      .populate({ path: 'seats', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n\n  public async updateSectionData(\n    sectionId: ObjectId,\n    sectionDto: UpdateSectionDto,\n  ): Promise {\n    let section = await this.sectionModel.findById(sectionId).exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (sectionDto.class) {\n      section.class = sectionDto.class;\n    }\n    if (sectionDto.price) {\n      section.price = sectionDto.price;\n    }\n\n    await section.save();\n    section = await this.sectionModel\n      .findById(sectionId)\n      .select({ __v: false })\n      .exec();\n    return section;\n  }\n\n  public async deleteSection(sectionId: ObjectId): Promise {\n    const section = await this.sectionModel\n      .findByIdAndDelete(sectionId)\n      .select({ __v: false })\n      .exec();\n    if (!section) {\n      throw new HttpException(\n        'Section with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return section;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ticket.html":{"url":"classes/Ticket.html","title":"class - Ticket","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ticket\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/entities/ticket.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                birthday\n                            \n                            \n                                    Optional\n                                citizenshipEng\n                            \n                            \n                                    Optional\n                                citizenshipRu\n                            \n                            \n                                citizenshipUa\n                            \n                            \n                                document\n                            \n                            \n                                firstName\n                            \n                            \n                                flight\n                            \n                            \n                                lastName\n                            \n                            \n                                numberOfSeat\n                            \n                            \n                                sex\n                            \n                            \n                                status\n                            \n                            \n                                type\n                            \n                            \n                                user\n                            \n                            \n                                validity\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            birthday\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2000-08-31T00:00:00.000Z', description: 'Birthday'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipEng\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: 'Ukraine', description: 'The English name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:91\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            citizenshipRu\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiPropertyOptional({example: 'Украина', description: 'The Russian name of the citizenship'})@Prop({trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:98\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            citizenshipUa\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Україна', description: 'The Ukranian name of the citizenship'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            document\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'RS123456', description: 'Document'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:102\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Dmitry', description: 'First Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:69\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            flight\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Flight\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'PS-9065', description: 'Flight'})@Prop({required: true, type: undefined, ref: 'Flight'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Efremov', description: 'Last Name'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:73\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            numberOfSeat\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Seat | null\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '23', description: 'Number Of Seat'})@Prop({default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:122\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            sex\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Sex\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'male', description: 'Sex', enum: Sex, enumName: 'Sex'})@Prop({required: true, trim: true, enum: Sex})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:56\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'booked', description: 'Status', enum: Status, enumName: 'Status'})@Prop({required: true, trim: true, enum: Status, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:115\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Type\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'adult', description: 'Type', enum: Type, enumName: 'Type'})@Prop({required: true, trim: true, enum: Type})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:65\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'User'})@Prop({required: true, type: undefined, ref: 'User'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            validity\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '2016-08-31T00:00:00.000Z', description: 'Validity'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tickets/entities/ticket.entity.ts:106\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty, ApiPropertyOptional } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { User } from 'src/users/entities/users.entity';\nimport { Flight } from 'src/flights/entities/flights.entity';\nimport { Seat } from 'src/seats/entities/seat.entity';\n\nexport type TicketDocument = Ticket & Document;\n\nexport enum Status {\n  Paid = 'paid',\n  Booked = 'booked',\n  Returned = 'returned',\n  NotAvailable = 'notAvailable',\n}\n\nexport enum Sex {\n  Male = 'male',\n  Female = 'female',\n}\n\nexport enum Type {\n  Adult = 'adult',\n  Child = 'child',\n  Baby = 'baby',\n  Disabled = 'disabled',\n}\n\n@Schema()\nexport class Ticket {\n  @ApiProperty({ example: 'PS-9065', description: 'Flight' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'Flight',\n  })\n  flight: Flight;\n\n  @ApiProperty({ example: 'test@gmail.com', description: 'User' })\n  @Prop({\n    required: true,\n    type: mongoose.Schema.Types.ObjectId,\n    ref: 'User',\n  })\n  user: User;\n\n  @ApiProperty({\n    example: 'male',\n    description: 'Sex',\n    enum: Sex,\n    enumName: 'Sex',\n  })\n  @Prop({ required: true, trim: true, enum: Sex })\n  sex: Sex;\n\n  @ApiProperty({\n    example: 'adult',\n    description: 'Type',\n    enum: Type,\n    enumName: 'Type',\n  })\n  @Prop({ required: true, trim: true, enum: Type })\n  type: Type;\n\n  @ApiProperty({ example: 'Dmitry', description: 'First Name' })\n  @Prop({ required: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Efremov', description: 'Last Name' })\n  @Prop({ required: true })\n  lastName: string;\n\n  @ApiProperty({ example: '2000-08-31T00:00:00.000Z', description: 'Birthday' })\n  @Prop({ required: true })\n  birthday: string;\n\n  @ApiProperty({\n    example: 'Україна',\n    description: 'The Ukranian name of the citizenship',\n  })\n  @Prop({ required: true, trim: true })\n  citizenshipUa: string;\n\n  @ApiPropertyOptional({\n    example: 'Ukraine',\n    description: 'The English name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipEng?: string;\n\n  @ApiPropertyOptional({\n    example: 'Украина',\n    description: 'The Russian name of the citizenship',\n  })\n  @Prop({ trim: true })\n  citizenshipRu?: string;\n\n  @ApiProperty({ example: 'RS123456', description: 'Document' })\n  @Prop({ required: true, trim: true })\n  document: string;\n\n  @ApiProperty({ example: '2016-08-31T00:00:00.000Z', description: 'Validity' })\n  @Prop({ required: true })\n  validity: string;\n\n  @ApiProperty({\n    example: 'booked',\n    description: 'Status',\n    enum: Status,\n    enumName: 'Status',\n  })\n  @Prop({ required: true, trim: true, enum: Status, default: Status.Booked })\n  status: Status;\n\n  @ApiProperty({\n    example: '23',\n    description: 'Number Of Seat',\n  })\n  @Prop({ default: null })\n  numberOfSeat: Seat | null;\n}\nexport const TicketSchema = SchemaFactory.createForClass(Ticket);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TicketsController.html":{"url":"controllers/TicketsController.html","title":"controller - TicketsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TicketsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tickets\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                find\n                            \n                            \n                                findAll\n                            \n                            \n                                return\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            create\n                        \n                        \n                    \n                \n            \n            \n                \ncreate(ticketDto: CreateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Reserve a Ticket'})@ApiCreatedResponse({description: 'Created', type: Ticket})@ApiBody({type: CreateTicketDto})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Post('reserve')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            find\n                        \n                        \n                    \n                \n            \n            \n                \nfind(req: any, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get Ticket data'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Tickets'})@ApiOkResponse({description: 'Success', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:62\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            return\n                        \n                        \n                    \n                \n            \n            \n                \nreturn(req: any, id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Return Ticket'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Delete(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:110\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            update\n                        \n                        \n                    \n                \n            \n            \n                \nupdate(req: any, id: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update Ticket data'})@ApiOkResponse({description: 'Success', type: Ticket})@ApiParam({name: 'id', type: 'string'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiBody({type: UpdateTicketDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch(':id')\n                \n            \n\n            \n                \n                    Defined in src/tickets/tickets.controller.ts:92\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiCreatedResponse,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { TicketsService } from './tickets.service';\nimport { Ticket } from './entities/ticket.entity';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Tickets')\n@Controller('tickets')\nexport class TicketsController {\n  constructor(private readonly ticketsService: TicketsService) {}\n\n  @ApiOperation({ summary: 'Reserve a Ticket' })\n  @ApiCreatedResponse({ description: 'Created', type: Ticket })\n  @ApiBody({ type: CreateTicketDto })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Post('reserve')\n  create(@Body() ticketDto: CreateTicketDto) {\n    return this.ticketsService.createTicket(ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Get data all Tickets' })\n  @ApiOkResponse({ description: 'Success', type: [Ticket] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.ticketsService.getAllTickets();\n  }\n\n  @ApiOperation({ summary: 'Get Ticket data' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Get(':id')\n  find(@Request() req: any, @Param('id') id: ObjectId) {\n    return this.ticketsService.getTicketById(req.user._id, id);\n  }\n\n  @ApiOperation({ summary: 'Update Ticket data' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiBody({ type: UpdateTicketDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch(':id')\n  update(\n    @Request() req: any,\n    @Param('id') id: ObjectId,\n    @Body() ticketDto: UpdateTicketDto,\n  ) {\n    return this.ticketsService.updateTicketData(req.user._id, id, ticketDto);\n  }\n\n  @ApiOperation({ summary: 'Return Ticket' })\n  @ApiOkResponse({ description: 'Success', type: Ticket })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete(':id')\n  return(@Request() req: any, @Param('id') id: ObjectId) {\n    return this.ticketsService.returnTicket(req.user._id, id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TicketsModule.html":{"url":"modules/TicketsModule.html","title":"module - TicketsModule","body":"\n                   \n\n\n\n\n    Modules\n    TicketsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_imports\n\n\n\n\nAirplanesModule\n\nAirplanesModule\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\n\n\nAirportsModule\n\nAirportsModule\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tickets/tickets.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TicketsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AirplanesModule\n                        \n                        \n                            AirportsModule\n                        \n                        \n                            FlightsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            TicketsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { TicketsService } from './tickets.service';\nimport { TicketsController } from './tickets.controller';\nimport { AirplanesModule } from 'src/airplanes/airplanes.module';\nimport { AirportsModule } from 'src/airports/airports.module';\nimport { FlightsModule } from 'src/flights/flights.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { User, UserSchema } from 'src/users/entities/users.entity';\nimport { Flight, FlightSchema } from 'src/flights/entities/flights.entity';\nimport { Ticket, TicketSchema } from './entities/ticket.entity';\nimport {\n  Airplane,\n  AirplaneSchema,\n} from 'src/airplanes/entities/airplane.entity';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: Ticket.name, schema: TicketSchema },\n      { name: Flight.name, schema: FlightSchema },\n      { name: Airplane.name, schema: AirplaneSchema },\n      { name: User.name, schema: UserSchema },\n    ]),\n    UsersModule,\n    AirportsModule,\n    FlightsModule,\n    AirplanesModule,\n  ],\n  controllers: [TicketsController],\n  providers: [TicketsService],\n  exports: [TicketsService],\n})\nexport class TicketsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TicketsService.html":{"url":"injectables/TicketsService.html","title":"injectable - TicketsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TicketsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/tickets.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                createTicket\n                            \n                            \n                                    Public\n                                    Async\n                                getAllTickets\n                            \n                            \n                                    Public\n                                    Async\n                                getTicketById\n                            \n                            \n                                    Public\n                                    Async\n                                returnTicket\n                            \n                            \n                                    Public\n                                    Async\n                                updateTicketData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(ticketModel: Model, flightModel: Model, airplaneModel: Model, userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/tickets/tickets.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        ticketModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        flightModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        airplaneModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTicket(ticketDto: CreateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ticketDto\n                                    \n                                                CreateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllTickets\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllTickets()\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:76\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getTicketById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTicketById(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:86\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            returnTicket\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    returnTicket(userId: ObjectId, ticketId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:137\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateTicketData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTicketData(userId: ObjectId, ticketId: ObjectId, ticketDto: UpdateTicketDto)\n                \n            \n\n\n            \n                \n                    Defined in src/tickets/tickets.service.ts:106\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    ticketDto\n                                    \n                                                UpdateTicketDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\n\nimport { Status, Ticket, TicketDocument } from './entities/ticket.entity';\nimport { Flight, FlightDocument } from 'src/flights/entities/flights.entity';\nimport { User, UserDocument } from 'src/users/entities/users.entity';\nimport {\n  Airplane,\n  AirplaneDocument,\n} from 'src/airplanes/entities/airplane.entity';\nimport { CreateTicketDto } from './dto/create-ticket.dto';\nimport { UpdateTicketDto } from './dto/update-ticket.dto';\n\n@Injectable()\nexport class TicketsService {\n  constructor(\n    @InjectModel(Ticket.name) private ticketModel: Model,\n    @InjectModel(Flight.name) private flightModel: Model,\n    @InjectModel(Airplane.name) private airplaneModel: Model,\n    @InjectModel(User.name) private userModel: Model,\n  ) {}\n\n  public async createTicket(ticketDto: CreateTicketDto): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .populate({ path: 'airline', select: '-__v' })\n      .populate({\n        path: 'airplane',\n        select: '-__v',\n        match: { amountOfSeat: { $gte: 1 } },\n        populate: { path: 'sections', select: '-__v' },\n      })\n      .populate({ path: 'departureAirport', select: '-__v' })\n      .populate({ path: 'arrivalAirport', select: '-__v' })\n      .exec();\n\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const user = await this.userModel\n      .findById(ticketDto.user)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const ticket = await this.ticketModel.create({ ...ticketDto });\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    user.tickets.push(ticket._id);\n    await user.save();\n    airplane.amountOfSeat -= 1;\n    await airplane.save();\n    return ticket;\n  }\n\n  public async getAllTickets(): Promise {\n    const tickets = await this.ticketModel\n      .find()\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    return tickets;\n  }\n\n  public async getTicketById(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    const ticket = await this.ticketModel\n      .findById(ticketId)\n      // .findOne({ user: userId })\n      .select({ __v: false })\n      .populate({ path: 'flight', select: '-__v' })\n      .populate({ path: 'user', select: '-__v' })\n      .exec();\n    if (!ticket) {\n      throw new HttpException(\n        'Ticket with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return ticket;\n  }\n\n  public async updateTicketData(\n    userId: ObjectId,\n    ticketId: ObjectId,\n    ticketDto: UpdateTicketDto,\n  ): Promise {\n    const flight = await this.flightModel\n      .findById(ticketDto.flight)\n      .select({ __v: false })\n      .exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    return ticket;\n  }\n\n  public async returnTicket(\n    userId: ObjectId,\n    ticketId: ObjectId,\n  ): Promise {\n    const ticket = await this.ticketModel.findById(ticketId).exec();\n    const flight = await this.flightModel.findById(ticket.flight).exec();\n    if (!flight) {\n      throw new HttpException(\n        'Flight with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const airplane = await this.airplaneModel\n      .findById(flight.airplane)\n      .populate({ path: 'sections', select: '-__v' })\n      .select({ __v: false })\n      .exec();\n    if (!airplane) {\n      throw new HttpException(\n        'Airplane with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    ticket.status = Status.Returned;\n    await ticket.save();\n    airplane.amountOfSeat += 1;\n    await airplane.save();\n    return ticket;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirlineDto.html":{"url":"classes/UpdateAirlineDto.html","title":"class - UpdateAirlineDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirlineDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airlines/dto/update-airline.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirlineDto } from './create-airline.dto';\n\nexport class UpdateAirlineDto extends PartialType(CreateAirlineDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirplaneDto.html":{"url":"classes/UpdateAirplaneDto.html","title":"class - UpdateAirplaneDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirplaneDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airplanes/dto/update-airplane.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirplaneDto } from './create-airplane.dto';\n\nexport class UpdateAirplaneDto extends PartialType(CreateAirplaneDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateAirportDto.html":{"url":"classes/UpdateAirportDto.html","title":"class - UpdateAirportDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateAirportDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/airports/dto/update-airport.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateAirportDto } from './create-airport.dto';\n\nexport class UpdateAirportDto extends PartialType(CreateAirportDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateFlightDto.html":{"url":"classes/UpdateFlightDto.html","title":"class - UpdateFlightDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateFlightDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/flights/dto/update-flight.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateFlightDto } from './create-flight.dto';\n\nexport class UpdateFlightDto extends PartialType(CreateFlightDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSeatDto.html":{"url":"classes/UpdateSeatDto.html","title":"class - UpdateSeatDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSeatDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/seats/dto/update-seat.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Status\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsNotEmpty()@IsEnum(Status)@ApiProperty({example: 'Booked', description: 'Class', enum: Status, enumName: 'Status'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/seats/dto/update-seat.dto.ts:16\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsEnum, IsNotEmpty } from 'class-validator';\n\nimport { Status } from '../entities/seat.entity';\nimport { CreateSeatDto } from './create-seat.dto';\n\nexport class UpdateSeatDto extends PartialType(CreateSeatDto) {\n  @IsNotEmpty()\n  @IsEnum(Status)\n  @ApiProperty({\n    example: 'Booked',\n    description: 'Class',\n    enum: Status,\n    enumName: 'Status',\n  })\n  readonly status: Status;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateSectionDto.html":{"url":"classes/UpdateSectionDto.html","title":"class - UpdateSectionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateSectionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/sections/dto/update-section.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateSectionDto } from './create-section.dto';\n\nexport class UpdateSectionDto extends PartialType(CreateSectionDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTicketDto.html":{"url":"classes/UpdateTicketDto.html","title":"class - UpdateTicketDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTicketDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tickets/dto/update-ticket.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\n\nimport { CreateTicketDto } from './create-ticket.dto';\n\nexport class UpdateTicketDto extends PartialType(CreateTicketDto) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDataDto.html":{"url":"classes/UpdateUserDataDto.html","title":"class - UpdateUserDataDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDataDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-data.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { OmitType, PartialType } from '@nestjs/swagger';\n\nimport { CreateUserDto } from './create-user.dto';\n\nexport class UpdateUserDataDto extends PartialType(\n  OmitType(CreateUserDto, ['password'] as const),\n) {}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/entities/users.entity.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                firstName\n                            \n                            \n                                lastName\n                            \n                            \n                                password\n                            \n                            \n                                phoneNumber\n                            \n                            \n                                role\n                            \n                            \n                                tickets\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'test@gmail.com', description: 'E-mail'})@Prop({required: true, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:38\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            firstName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Іван', description: 'First name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastName\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'Шевченко', description: 'Last name'})@Prop({required: true, trim: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'A1b2@c3d!', description: 'Password'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phoneNumber\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: '380951234567', description: 'Phone number'})@Prop({required: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            role\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Role\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'user', description: 'Role', enum: Role, enumName: 'Role'})@Prop({required: true, trim: true, enum: Role, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:47\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tickets\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Ticket[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty({example: 'tickets', description: 'Tickets'})@Prop({trim: true, type: undefined, ref: 'Ticket'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/users/entities/users.entity.ts:58\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { ApiProperty } from '@nestjs/swagger';\nimport { Document } from 'mongoose';\nimport mongoose from 'mongoose';\n\nimport { Ticket } from 'src/tickets/entities/ticket.entity';\n\nexport type UserDocument = User & Document;\n\nexport enum Role {\n  User = 'user',\n  Admin = 'admin',\n}\n\n@Schema()\nexport class User {\n  @ApiProperty({ example: 'Іван', description: 'First name' })\n  @Prop({ required: true, trim: true })\n  firstName: string;\n\n  @ApiProperty({ example: 'Шевченко', description: 'Last name' })\n  @Prop({ required: true, trim: true })\n  lastName: string;\n\n  @ApiProperty({ example: '380951234567', description: 'Phone number' })\n  @Prop({ required: true })\n  phoneNumber: number;\n\n  @ApiProperty({ example: 'A1b2@c3d!', description: 'Password' })\n  @Prop({ required: true })\n  password: string;\n\n  @ApiProperty({\n    example: 'test@gmail.com',\n    description: 'E-mail',\n  })\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @ApiProperty({\n    example: 'user',\n    description: 'Role',\n    enum: Role,\n    enumName: 'Role',\n  })\n  @Prop({ required: true, trim: true, enum: Role, default: Role.User })\n  role: Role;\n\n  @ApiProperty({\n    example: 'tickets',\n    description: 'Tickets',\n  })\n  @Prop({\n    trim: true,\n    type: [{ type: mongoose.Schema.Types.ObjectId }],\n    ref: 'Ticket',\n  })\n  tickets: Ticket[];\n}\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changePassword\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                updateData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            changePassword\n                        \n                        \n                    \n                \n            \n            \n                \nchangePassword(req: any, userDto: ChangeUserPasswordDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Change User password'})@ApiOkResponse({description: 'Success', type: User})@ApiNotFoundResponse({description: 'Not Found'})@ApiBadRequestResponse({description: 'Bad Request'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: ChangeUserPasswordDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch('/changepassword')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            delete\n                        \n                        \n                    \n                \n            \n            \n                \ndelete(req: any)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Delete User'})@ApiOkResponse({description: 'Success', type: User})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Delete('')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findAll\n                        \n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get data all Users'})@ApiOkResponse({description: 'Success', type: undefined})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Get()\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(id: ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Get User data'})@ApiOkResponse({description: 'Success', type: User})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiForbiddenResponse({description: 'Forbidden'})@ApiParam({name: 'id', type: 'string'})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@Roles('admin')@Get(':id')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateData\n                        \n                        \n                    \n                \n            \n            \n                \nupdateData(req: any, userDto: UpdateUserDataDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ApiOperation({summary: 'Update User data'})@ApiOkResponse({description: 'Success', type: User})@ApiBadRequestResponse({description: 'Bad Request'})@ApiNotFoundResponse({description: 'Not Found'})@ApiUnauthorizedResponse({description: 'Unauthorized'})@ApiBody({type: UpdateUserDataDto})@ApiTooManyRequestsResponse({description: 'Too Many Requests'})@ApiCookieAuth()@UseGuards(JwtAuthGuard)@Patch('/update')\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    req\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Request,\n} from '@nestjs/common';\nimport {\n  ApiBadRequestResponse,\n  ApiBody,\n  ApiCookieAuth,\n  ApiForbiddenResponse,\n  ApiNotFoundResponse,\n  ApiOkResponse,\n  ApiOperation,\n  ApiParam,\n  ApiTags,\n  ApiTooManyRequestsResponse,\n  ApiUnauthorizedResponse,\n} from '@nestjs/swagger';\nimport { ObjectId } from 'mongoose';\n\nimport { UsersService } from './users.service';\nimport { User } from './entities/users.entity';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { Roles } from 'src/auth/decorators/roles-auth.decorator';\nimport { JwtAuthGuard } from 'src/auth/guards/jwt-auth.guard';\n\n@ApiTags('Users')\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @ApiOperation({ summary: 'Get data all Users' })\n  @ApiOkResponse({ description: 'Success', type: [User] })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get()\n  findAll() {\n    return this.usersService.getAllUsers();\n  }\n\n  @ApiOperation({ summary: 'Get User data' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiParam({ name: 'id', type: 'string' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @Roles('admin')\n  @Get(':id')\n  findOne(@Param('id') id: ObjectId) {\n    return this.usersService.getUserById(id);\n  }\n\n  @ApiOperation({ summary: 'Update User data' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: UpdateUserDataDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('/update')\n  updateData(@Request() req: any, @Body() userDto: UpdateUserDataDto) {\n    return this.usersService.updateUserData(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Change User password' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiNotFoundResponse({ description: 'Not Found' })\n  @ApiBadRequestResponse({ description: 'Bad Request' })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiBody({ type: ChangeUserPasswordDto })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Patch('/changepassword')\n  changePassword(@Request() req: any, @Body() userDto: ChangeUserPasswordDto) {\n    return this.usersService.changeUserPassword(req.user._id, userDto);\n  }\n\n  @ApiOperation({ summary: 'Delete User' })\n  @ApiOkResponse({ description: 'Success', type: User })\n  @ApiUnauthorizedResponse({ description: 'Unauthorized' })\n  @ApiTooManyRequestsResponse({ description: 'Too Many Requests' })\n  @ApiCookieAuth()\n  @UseGuards(JwtAuthGuard)\n  @Delete('')\n  delete(@Request() req: any) {\n    return this.usersService.deleteUser(req.user._id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\n\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { AuthModule } from 'src/auth/auth.module';\nimport { User, UserSchema } from './entities/users.entity';\n\n@Module({\n  imports: [\n    forwardRef(() => AuthModule),\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n  ],\n  controllers: [UsersController],\n  providers: [UsersService],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                changeUserPassword\n                            \n                            \n                                    Public\n                                    Async\n                                createUser\n                            \n                            \n                                    Public\n                                    Async\n                                deleteUser\n                            \n                            \n                                    Public\n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Public\n                                    Async\n                                getUserByEmail\n                            \n                            \n                                    Public\n                                    Async\n                                getUserById\n                            \n                            \n                                    Public\n                                    Async\n                                updateUserData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            changeUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    changeUserPassword(userId: ObjectId, userDto: ChangeUserPasswordDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:83\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                ChangeUserPasswordDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(userDto: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userDto\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getAllUsers\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserByEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:139\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            getUserById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserById(userId: ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Public\n                            Async\n                            updateUserData\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserData(userId: ObjectId, userDto: UpdateUserDataDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userDto\n                                    \n                                                UpdateUserDataDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, ObjectId } from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { UpdateUserDataDto } from './dto/update-user-data.dto';\nimport { ChangeUserPasswordDto } from './dto/change-user-password.dto';\nimport { User, UserDocument } from './entities/users.entity';\n\n@Injectable()\nexport class UsersService {\n  constructor(@InjectModel(User.name) private userModel: Model) {}\n\n  public async createUser(userDto: CreateUserDto): Promise {\n    try {\n      let user = await this.userModel.create({ ...userDto });\n      user = await this.userModel\n        .findOne({ email: userDto.email })\n        .select({ password: false, __v: false })\n        .exec();\n      return user;\n    } catch (err) {\n      throw new HttpException(err, HttpStatus.BAD_REQUEST);\n    }\n  }\n\n  public async getAllUsers(): Promise {\n    const users = await this.userModel\n      .find()\n      .select({ password: false, __v: false })\n      .exec();\n    return users;\n  }\n\n  public async getUserById(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async updateUserData(\n    userId: ObjectId,\n    userDto: UpdateUserDataDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    if (userDto.email) {\n      user.email = userDto.email;\n    }\n    if (userDto.firstName) {\n      user.firstName = userDto.firstName;\n    }\n    if (userDto.lastName) {\n      user.lastName = userDto.lastName;\n    }\n    if (userDto.phoneNumber) {\n      user.phoneNumber = userDto.phoneNumber;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async changeUserPassword(\n    userId: ObjectId,\n    userDto: ChangeUserPasswordDto,\n  ): Promise {\n    let user = await this.userModel.findById(userId).exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n\n    const passwordEquals = await bcrypt.compare(\n      userDto.oldPassword,\n      user.password,\n    );\n    const newPasswordEquals = await bcrypt.compare(\n      userDto.newPassword,\n      user.password,\n    );\n\n    if (!passwordEquals) {\n      throw new HttpException('Password mismatch', HttpStatus.BAD_REQUEST);\n    } else if (newPasswordEquals) {\n      throw new HttpException(\n        'New and old passwords must not match',\n        HttpStatus.BAD_REQUEST,\n      );\n    } else {\n      const salt = await bcrypt.genSalt();\n      const hashPassword = await bcrypt.hash(userDto.newPassword, salt);\n      user.password = hashPassword;\n    }\n    await user.save();\n\n    user = await this.userModel\n      .findById(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    return user;\n  }\n\n  public async deleteUser(userId: ObjectId): Promise {\n    const user = await this.userModel\n      .findByIdAndDelete(userId)\n      .select({ password: false, __v: false })\n      .exec();\n    if (!user) {\n      throw new HttpException(\n        'User with this id not found',\n        HttpStatus.NOT_FOUND,\n      );\n    }\n    return user;\n  }\n\n  public async getUserByEmail(email: string): Promise {\n    const user = await this.userModel.findOne({ email: email }).exec();\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/airlines/airlines.controller.ts\n            \n            controller\n            AirlinesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airlines/airlines.service.ts\n            \n            injectable\n            AirlinesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airlines/dto/create-airline.dto.ts\n            \n            class\n            CreateAirlineDto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/dto/update-airline.dto.ts\n            \n            class\n            UpdateAirlineDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            class\n            Airline\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/airlines/entities/airlines.entity.ts\n            \n            variable\n            AirlineSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.controller.ts\n            \n            controller\n            AirplanesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airplanes/airplanes.service.ts\n            \n            injectable\n            AirplanesService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airplanes/dto/create-airplane.dto.ts\n            \n            class\n            CreateAirplaneDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/dto/update-airplane.dto.ts\n            \n            class\n            UpdateAirplaneDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            class\n            Airplane\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/airplanes/entities/airplane.entity.ts\n            \n            variable\n            AirplaneSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/airports.controller.ts\n            \n            controller\n            AirportsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/airports/airports.service.ts\n            \n            injectable\n            AirportsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/airports/dto/create-airport.dto.ts\n            \n            class\n            CreateAirportDto\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/dto/update-airport.dto.ts\n            \n            class\n            UpdateAirportDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            class\n            Airport\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/airports/entities/airport.entity.ts\n            \n            variable\n            AirportSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles-auth.decorator.ts\n            \n            variable\n            ROLES_KEY\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/jwt-auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/local-auth.guard.ts\n            \n            injectable\n            LocalAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            variable\n            cookieExtractor\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/files/files.service.ts\n            \n            injectable\n            FilesService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/flights/dto/create-flight.dto.ts\n            \n            class\n            CreateFlightDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/dto/search-flight.dto.ts\n            \n            class\n            SearchFlightDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/dto/update-flight.dto.ts\n            \n            class\n            UpdateFlightDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            class\n            Flight\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/flights/entities/flights.entity.ts\n            \n            variable\n            FlightSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/flights/flights.controller.ts\n            \n            controller\n            FlightsController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/flights/flights.service.ts\n            \n            injectable\n            FlightsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/create-seat.dto.ts\n            \n            class\n            CreateSeatDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/dto/update-seat.dto.ts\n            \n            class\n            UpdateSeatDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            class\n            Seat\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/seats/entities/seat.entity.ts\n            \n            variable\n            SeatSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/seats/seats.controller.ts\n            \n            controller\n            SeatsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/seats/seats.service.ts\n            \n            injectable\n            SeatsService\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/sections/dto/create-section.dto.ts\n            \n            class\n            CreateSectionDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/dto/update-section.dto.ts\n            \n            class\n            UpdateSectionDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            class\n            Section\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/sections/entities/section.entity.ts\n            \n            variable\n            SectionSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/sections/sections.controller.ts\n            \n            controller\n            SectionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/sections/sections.service.ts\n            \n            injectable\n            SectionsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tickets/dto/create-ticket.dto.ts\n            \n            class\n            CreateTicketDto\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/dto/update-ticket.dto.ts\n            \n            class\n            UpdateTicketDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            class\n            Ticket\n            \n                0 %\n                (0/15)\n            \n        \n        \n            \n                \n                src/tickets/entities/ticket.entity.ts\n            \n            variable\n            TicketSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tickets/tickets.controller.ts\n            \n            controller\n            TicketsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tickets/tickets.service.ts\n            \n            injectable\n            TicketsService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/users/dto/change-user-password.dto.ts\n            \n            class\n            ChangeUserPasswordDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/login-user.dto.ts\n            \n            class\n            LoginUserDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-data.dto.ts\n            \n            class\n            UpdateUserDataDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/users/entities/users.entity.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/9)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            - : 0.0.1\n        \n            @nestjs/common : ^7.6.15\n        \n            @nestjs/config : ^0.6.3\n        \n            @nestjs/core : ^7.6.15\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^7.2.4\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.6.15\n        \n            @nestjs/serve-static : ^2.1.4\n        \n            @nestjs/swagger : ^4.8.0\n        \n            @nestjs/throttler : ^1.1.4\n        \n            @types/cookie-parser : ^1.4.2\n        \n            @types/multer : ^1.4.5\n        \n            bcrypt : ^5.0.1\n        \n            body-parser : ^1.19.0\n        \n            cache-manager : ^3.4.3\n        \n            class-transformer : ^0.4.0\n        \n            class-validator : ^0.13.1\n        \n            compression : ^1.7.4\n        \n            cookie-parser : ^1.4.5\n        \n            cross-env : ^7.0.3\n        \n            csurf : ^1.11.0\n        \n            fuse.js : ^6.4.6\n        \n            helmet : ^4.6.0\n        \n            moment : ^2.29.1\n        \n            mongoose : ^5.12.9\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.6.6\n        \n            swagger-ui-express : ^4.1.6\n        \n            uuid : ^8.3.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Class   (src/.../section.entity.ts)\n                        \n                        \n                            Folder   (src/.../files.service.ts)\n                        \n                        \n                            Role   (src/.../users.entity.ts)\n                        \n                        \n                            Sex   (src/.../ticket.entity.ts)\n                        \n                        \n                            Status   (src/.../seat.entity.ts)\n                        \n                        \n                            Status   (src/.../ticket.entity.ts)\n                        \n                        \n                            Type   (src/.../ticket.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/sections/entities/section.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Class\n                    \n                \n                        \n                            \n                                 Business\n                            \n                        \n                        \n                            \n                                Value : business\n                            \n                        \n                        \n                            \n                                 Economy\n                            \n                        \n                        \n                            \n                                Value : economy\n                            \n                        \n            \n        \n\n    src/files/files.service.ts\n    \n        \n            \n                \n                    \n                        \n                        Folder\n                    \n                \n                        \n                            \n                                 Airline\n                            \n                        \n                        \n                            \n                                Value : airline\n                            \n                        \n            \n        \n\n    src/users/entities/users.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Sex\n                    \n                \n                        \n                            \n                                 Male\n                            \n                        \n                        \n                            \n                                Value : male\n                            \n                        \n                        \n                            \n                                 Female\n                            \n                        \n                        \n                            \n                                Value : female\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Type\n                    \n                \n                        \n                            \n                                 Adult\n                            \n                        \n                        \n                            \n                                Value : adult\n                            \n                        \n                        \n                            \n                                 Child\n                            \n                        \n                        \n                            \n                                Value : child\n                            \n                        \n                        \n                            \n                                 Baby\n                            \n                        \n                        \n                            \n                                Value : baby\n                            \n                        \n                        \n                            \n                                 Disabled\n                            \n                        \n                        \n                            \n                                Value : disabled\n                            \n                        \n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n        \n            \n                \n                    \n                        \n                        Status\n                    \n                \n                        \n                            \n                                 Paid\n                            \n                        \n                        \n                            \n                                Value : paid\n                            \n                        \n                        \n                            \n                                 Booked\n                            \n                        \n                        \n                            \n                                Value : booked\n                            \n                        \n                        \n                            \n                                 Returned\n                            \n                        \n                        \n                            \n                                Value : returned\n                            \n                        \n                        \n                            \n                                 Free\n                            \n                        \n                        \n                            \n                                Value : free\n                            \n                        \n                        \n                            \n                                 NotAvailable\n                            \n                        \n                        \n                            \n                                Value : notAvailable\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AirlinesModule\n\n\n\ncluster_AirlinesModule_imports\n\n\n\ncluster_AirlinesModule_exports\n\n\n\ncluster_AirlinesModule_providers\n\n\n\ncluster_AirplanesModule\n\n\n\ncluster_AirplanesModule_exports\n\n\n\ncluster_AirplanesModule_providers\n\n\n\ncluster_AirportsModule\n\n\n\ncluster_AirportsModule_exports\n\n\n\ncluster_AirportsModule_providers\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_FilesModule\n\n\n\ncluster_FilesModule_exports\n\n\n\ncluster_FilesModule_providers\n\n\n\ncluster_FlightsModule\n\n\n\ncluster_FlightsModule_exports\n\n\n\ncluster_FlightsModule_providers\n\n\n\ncluster_SeatsModule\n\n\n\ncluster_SeatsModule_exports\n\n\n\ncluster_SeatsModule_providers\n\n\n\ncluster_SectionsModule\n\n\n\ncluster_SectionsModule_exports\n\n\n\ncluster_SectionsModule_providers\n\n\n\ncluster_TicketsModule\n\n\n\ncluster_TicketsModule_exports\n\n\n\ncluster_TicketsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nFilesModule\n\nFilesModule\n\n\n\nAirlinesModule\n\nAirlinesModule\n\nAirlinesModule -->\n\nFilesModule->AirlinesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nFilesModule->AppModule\n\n\n\n\n\nFilesService \n\nFilesService \n\nFilesService  -->\n\nFilesModule->FilesService \n\n\n\n\n\nAirlinesService \n\nAirlinesService \n\nAirlinesService  -->\n\nAirlinesModule->AirlinesService \n\n\n\nAppModule -->\n\nAirlinesModule->AppModule\n\n\n\n\n\nAirlinesService\n\nAirlinesService\n\nAirlinesModule -->\n\nAirlinesService->AirlinesModule\n\n\n\n\n\nAirplanesService \n\nAirplanesService \n\n\n\nAirplanesModule\n\nAirplanesModule\n\nAirplanesService  -->\n\nAirplanesModule->AirplanesService \n\n\n\n\n\nTicketsModule\n\nTicketsModule\n\nTicketsModule -->\n\nAirplanesModule->TicketsModule\n\n\n\nAppModule -->\n\nAirplanesModule->AppModule\n\n\n\n\n\nAirplanesService\n\nAirplanesService\n\nAirplanesModule -->\n\nAirplanesService->AirplanesModule\n\n\n\n\n\nAirportsService \n\nAirportsService \n\n\n\nAirportsModule\n\nAirportsModule\n\nAirportsService  -->\n\nAirportsModule->AirportsService \n\n\n\nTicketsModule -->\n\nAirportsModule->TicketsModule\n\n\n\nAppModule -->\n\nAirportsModule->AppModule\n\n\n\n\n\nAirportsService\n\nAirportsService\n\nAirportsModule -->\n\nAirportsService->AirportsModule\n\n\n\n\n\nAuthModule\n\nAuthModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nFlightsModule\n\nFlightsModule\n\nTicketsModule -->\n\nFlightsModule->TicketsModule\n\n\n\nAppModule -->\n\nFlightsModule->AppModule\n\n\n\n\n\nFlightsService \n\nFlightsService \n\nFlightsService  -->\n\nFlightsModule->FlightsService \n\n\n\n\n\nSeatsModule\n\nSeatsModule\n\nAppModule -->\n\nSeatsModule->AppModule\n\n\n\n\n\nSeatsService \n\nSeatsService \n\nSeatsService  -->\n\nSeatsModule->SeatsService \n\n\n\n\n\nSectionsModule\n\nSectionsModule\n\nAppModule -->\n\nSectionsModule->AppModule\n\n\n\n\n\nSectionsService \n\nSectionsService \n\nSectionsService  -->\n\nSectionsModule->SectionsService \n\n\n\nAppModule -->\n\nTicketsModule->AppModule\n\n\n\n\n\nTicketsService \n\nTicketsService \n\nTicketsService  -->\n\nTicketsModule->TicketsService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nTicketsModule -->\n\nUsersModule->TicketsModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthModule -->\n\nLocalStrategy->AuthModule\n\n\n\n\n\nFilesService\n\nFilesService\n\nFilesModule -->\n\nFilesService->FilesModule\n\n\n\n\n\nFlightsService\n\nFlightsService\n\nFlightsModule -->\n\nFlightsService->FlightsModule\n\n\n\n\n\nSeatsService\n\nSeatsService\n\nSeatsModule -->\n\nSeatsService->SeatsModule\n\n\n\n\n\nSectionsService\n\nSectionsService\n\nSectionsModule -->\n\nSectionsService->SectionsModule\n\n\n\n\n\nTicketsService\n\nTicketsService\n\nTicketsModule -->\n\nTicketsService->TicketsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        11 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    15 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    27 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AirlinesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirplanesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AirportsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FilesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        FlightsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SeatsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SectionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TicketsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineDocument   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneDocument   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportDocument   (src/.../airport.entity.ts)\n                        \n                        \n                            FlightDocument   (src/.../flights.entity.ts)\n                        \n                        \n                            SeatDocument   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionDocument   (src/.../section.entity.ts)\n                        \n                        \n                            TicketDocument   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserDocument   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirlineDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airplanes/entities/airplane.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirplaneDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/airports/entities/airport.entity.ts\n    \n    \n        \n            \n                \n                    \n                    AirportDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/flights/entities/flights.entity.ts\n    \n    \n        \n            \n                \n                    \n                    FlightDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/seats/entities/seat.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SeatDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/sections/entities/section.entity.ts\n    \n    \n        \n            \n                \n                    \n                    SectionDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/tickets/entities/ticket.entity.ts\n    \n    \n        \n            \n                \n                    \n                    TicketDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/users/entities/users.entity.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AirlineSchema   (src/.../airlines.entity.ts)\n                        \n                        \n                            AirplaneSchema   (src/.../airplane.entity.ts)\n                        \n                        \n                            AirportSchema   (src/.../airport.entity.ts)\n                        \n                        \n                            cookieExtractor   (src/.../jwt.strategy.ts)\n                        \n                        \n                            FlightSchema   (src/.../flights.entity.ts)\n                        \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            Roles   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            ROLES_KEY   (src/.../roles-auth.decorator.ts)\n                        \n                        \n                            SeatSchema   (src/.../seat.entity.ts)\n                        \n                        \n                            SectionSchema   (src/.../section.entity.ts)\n                        \n                        \n                            TicketSchema   (src/.../ticket.entity.ts)\n                        \n                        \n                            UserSchema   (src/.../users.entity.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/airlines/entities/airlines.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirlineSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airline)\n                        \n                    \n\n\n            \n        \n\n    src/airplanes/entities/airplane.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirplaneSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airplane)\n                        \n                    \n\n\n            \n        \n\n    src/airports/entities/airport.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            AirportSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Airport)\n                        \n                    \n\n\n            \n        \n\n    src/auth/strategies/jwt.strategy.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            cookieExtractor\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : function (req: any) {\n  let token = null;\n  if (req && req.cookies) {\n    token = req.cookies['access_token'];\n  }\n  return token;\n}\n                        \n                    \n\n\n            \n        \n\n    src/flights/entities/flights.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            FlightSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Flight)\n                        \n                    \n\n\n            \n        \n\n    src/main.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            module\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         any\n\n                        \n                    \n\n\n            \n        \n\n    src/auth/decorators/roles-auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            Roles\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : (...role: string[]) => SetMetadata(ROLES_KEY, role)\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            ROLES_KEY\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : 'role'\n                        \n                    \n\n\n            \n        \n\n    src/seats/entities/seat.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SeatSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Seat)\n                        \n                    \n\n\n            \n        \n\n    src/sections/entities/section.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SectionSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Section)\n                        \n                    \n\n\n            \n        \n\n    src/tickets/entities/ticket.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TicketSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(Ticket)\n                        \n                    \n\n\n            \n        \n\n    src/users/entities/users.entity.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            UserSchema\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : SchemaFactory.createForClass(User)\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
